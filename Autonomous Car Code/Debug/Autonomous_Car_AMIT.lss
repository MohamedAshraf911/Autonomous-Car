
Autonomous_Car_AMIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004778  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00004778  0000480c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080008e  0080008e  0000483a  2**0
                  ALLOC
  3 .stab         00004e18  00000000  00000000  0000483c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e4e  00000000  00000000  00009654  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000b4a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000b602  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000b791  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000d7d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000e8d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000f85c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000f9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000fc9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001052c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__vector_1>
       8:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_10>
      2c:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <main>
      8a:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 83 23 	jmp	0x4706	; 0x4706 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9f 23 	jmp	0x473e	; 0x473e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8f 23 	jmp	0x471e	; 0x471e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ab 23 	jmp	0x4756	; 0x4756 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8f 23 	jmp	0x471e	; 0x471e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ab 23 	jmp	0x4756	; 0x4756 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 83 23 	jmp	0x4706	; 0x4706 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9f 23 	jmp	0x473e	; 0x473e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8b 23 	jmp	0x4716	; 0x4716 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e6       	ldi	r22, 0x6D	; 109
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a7 23 	jmp	0x474e	; 0x474e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8f 23 	jmp	0x471e	; 0x471e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ab 23 	jmp	0x4756	; 0x4756 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8f 23 	jmp	0x471e	; 0x471e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ab 23 	jmp	0x4756	; 0x4756 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8f 23 	jmp	0x471e	; 0x471e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ab 23 	jmp	0x4756	; 0x4756 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 93 23 	jmp	0x4726	; 0x4726 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 af 23 	jmp	0x475e	; 0x475e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MSUART_Init>:
 */

#include "MSUART_Interface.h"

void MSUART_Init()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <MSUART_Init+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_UCSRC=0;
     caa:	1b 82       	std	Y+3, r1	; 0x03

	/*Set Mode*/

#if MUSART_OPERATING_MODE==MUSART_ASYNCHRONOUS_MODE
	CLR_BIT(Loc_UCSRC,6);
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	8f 7b       	andi	r24, 0xBF	; 191
     cb0:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Loc_UCSRC,6);
#endif

	/*Set Parity*/
#if MUSART_PARITY_MODE==MUSART_PARITY_DISABLED
	CLR_BIT(Loc_UCSRC,4);
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	8f 7e       	andi	r24, 0xEF	; 239
     cb6:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Loc_UCSRC,5);
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	8f 7d       	andi	r24, 0xDF	; 223
     cbc:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Loc_UCSRC,5);
#endif

	/*Set Stop Bits*/
#if MUSART_STOP_MODE==MUSART_ONE_STOP_BIT
	CLR_BIT(Loc_UCSRC,3);
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	87 7f       	andi	r24, 0xF7	; 247
     cc2:	8b 83       	std	Y+3, r24	; 0x03
#elif MUSART_DATA_SIZE==MUSART_SEVEN_DATA_BITS
	CLR_BIT(Loc_UCSRC,1);
	SET_BIT(Loc_UCSRC,2);
	CLR_BIT(UCSRB,2);
#elif MUSART_DATA_SIZE==MUSART_EIGHT_DATA_BITS
	SET_BIT(Loc_UCSRC,1);
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	82 60       	ori	r24, 0x02	; 2
     cc8:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Loc_UCSRC,2);
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	84 60       	ori	r24, 0x04	; 4
     cce:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRB,2);
     cd0:	aa e2       	ldi	r26, 0x2A	; 42
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ea e2       	ldi	r30, 0x2A	; 42
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8b 7f       	andi	r24, 0xFB	; 251
     cdc:	8c 93       	st	X, r24
	SET_BIT(Loc_UCSRC,2);
	SET_BIT(UCSRB,2);
#endif

	/*Set Bit 7 in Local Variable*/
	SET_BIT(Loc_UCSRC,7);
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	80 68       	ori	r24, 0x80	; 128
     ce2:	8b 83       	std	Y+3, r24	; 0x03

	UCSRC=Loc_UCSRC;
     ce4:	e0 e4       	ldi	r30, 0x40	; 64
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	80 83       	st	Z, r24

	/*Set Baud Rate*/
	u16 LocBaud=MUSART_BAUD_RATE;
     cec:	88 e6       	ldi	r24, 0x68	; 104
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01

	//UBRRL=LocBaud&(0x0FF);
	//UBRRH=LocBaud>>8;
	UBRRL=MUSART_BAUD_RATE;
     cf4:	e9 e2       	ldi	r30, 0x29	; 41
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	88 e6       	ldi	r24, 0x68	; 104
     cfa:	80 83       	st	Z, r24

	/*Enable RXEN and TXEN*/
	SET_BIT(UCSRB,3);
     cfc:	aa e2       	ldi	r26, 0x2A	; 42
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ea e2       	ldi	r30, 0x2A	; 42
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	88 60       	ori	r24, 0x08	; 8
     d08:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
     d0a:	aa e2       	ldi	r26, 0x2A	; 42
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ea e2       	ldi	r30, 0x2A	; 42
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	80 61       	ori	r24, 0x10	; 16
     d16:	8c 93       	st	X, r24
}
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <MSUART_SendChar>:

void MSUART_SendChar(u8 TransmitValue)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	0f 92       	push	r0
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	89 83       	std	Y+1, r24	; 0x01
	/*Poll on UDRE Flag*/
	while(GET_BIT(UCSRA,5)==0)
     d30:	eb e2       	ldi	r30, 0x2B	; 43
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	82 95       	swap	r24
     d38:	86 95       	lsr	r24
     d3a:	87 70       	andi	r24, 0x07	; 7
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	81 70       	andi	r24, 0x01	; 1
     d42:	90 70       	andi	r25, 0x00	; 0
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	a1 f3       	breq	.-24     	; 0xd30 <MSUART_SendChar+0xc>
	{
		//Do Nothing
	}
	//Send Value to UDR
	UDR = TransmitValue;
     d48:	ec e2       	ldi	r30, 0x2C	; 44
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	80 83       	st	Z, r24
}
     d50:	0f 90       	pop	r0
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <MSUART_RecieveChar>:

u8 MSUART_RecieveChar()
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	/*Poll on RXC Flag*/
	while(GET_BIT(UCSRA,7)==0)
     d60:	eb e2       	ldi	r30, 0x2B	; 43
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	88 23       	and	r24, r24
     d68:	dc f7       	brge	.-10     	; 0xd60 <MSUART_RecieveChar+0x8>
	{
		//Do Nothing
	}
	//Save UDR Content
	return UDR;
     d6a:	ec e2       	ldi	r30, 0x2C	; 44
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
}
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <MUSART_SendString>:

void MUSART_SendString(u8* P_TransmitString)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <MUSART_SendString+0x6>
     d7c:	0f 92       	push	r0
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	9b 83       	std	Y+3, r25	; 0x03
     d84:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_TransmitCounter=0;
     d86:	19 82       	std	Y+1, r1	; 0x01
     d88:	0e c0       	rjmp	.+28     	; 0xda6 <MUSART_SendString+0x30>

	while(P_TransmitString[Loc_TransmitCounter]!=NULL)
	{
		MSUART_SendChar(P_TransmitString[Loc_TransmitCounter]);
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	9b 81       	ldd	r25, Y+3	; 0x03
     d94:	fc 01       	movw	r30, r24
     d96:	e2 0f       	add	r30, r18
     d98:	f3 1f       	adc	r31, r19
     d9a:	80 81       	ld	r24, Z
     d9c:	0e 94 92 06 	call	0xd24	; 0xd24 <MSUART_SendChar>
		Loc_TransmitCounter++;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	89 83       	std	Y+1, r24	; 0x01

void MUSART_SendString(u8* P_TransmitString)
{
	u8 Loc_TransmitCounter=0;

	while(P_TransmitString[Loc_TransmitCounter]!=NULL)
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	9b 81       	ldd	r25, Y+3	; 0x03
     db0:	fc 01       	movw	r30, r24
     db2:	e2 0f       	add	r30, r18
     db4:	f3 1f       	adc	r31, r19
     db6:	80 81       	ld	r24, Z
     db8:	88 23       	and	r24, r24
     dba:	39 f7       	brne	.-50     	; 0xd8a <MUSART_SendString+0x14>
	{
		MSUART_SendChar(P_TransmitString[Loc_TransmitCounter]);
		Loc_TransmitCounter++;
	}
}
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <MUSART_ReceiveString>:

/*Implementation is Changed instead of Checking On the Received element
 *a While(1) is used instead and its Exit Condition is when
 *the Received Element is ('\n')*/
void MUSART_ReceiveString(u8* P_ReceiveString)
{
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <MUSART_ReceiveString+0xa>
     dd2:	0f 92       	push	r0
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	9b 83       	std	Y+3, r25	; 0x03
     dda:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_ReceiveCounter=0;
     ddc:	19 82       	std	Y+1, r1	; 0x01

	while(1)
		{
			//Receive
		P_ReceiveString[Loc_ReceiveCounter]= MSUART_RecieveChar();
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	9b 81       	ldd	r25, Y+3	; 0x03
     de8:	8c 01       	movw	r16, r24
     dea:	02 0f       	add	r16, r18
     dec:	13 1f       	adc	r17, r19
     dee:	0e 94 ac 06 	call	0xd58	; 0xd58 <MSUART_RecieveChar>
     df2:	f8 01       	movw	r30, r16
     df4:	80 83       	st	Z, r24

		if(P_ReceiveString[Loc_ReceiveCounter]=='\n')
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	9b 81       	ldd	r25, Y+3	; 0x03
     e00:	fc 01       	movw	r30, r24
     e02:	e2 0f       	add	r30, r18
     e04:	f3 1f       	adc	r31, r19
     e06:	80 81       	ld	r24, Z
     e08:	8a 30       	cpi	r24, 0x0A	; 10
     e0a:	21 f0       	breq	.+8      	; 0xe14 <MUSART_ReceiveString+0x4c>
		{
			break;
		}
		Loc_ReceiveCounter++;
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	8f 5f       	subi	r24, 0xFF	; 255
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	e5 cf       	rjmp	.-54     	; 0xdde <MUSART_ReceiveString+0x16>
		}
}
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	08 95       	ret

00000e24 <MTWI_MasterInit>:
#include"MTWI_Config.h"
#include"MTWI_Private.h"
#include "MTWI_Interface.h"

TWI_ErrorState MTWI_MasterInit(u8 Copy_u8SelfSlaveAddress)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	00 d0       	rcall	.+0      	; 0xe2a <MTWI_MasterInit+0x6>
     e2a:	0f 92       	push	r0
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	8a 83       	std	Y+2, r24	; 0x02
	u8 ReturnedErrorState = NoError;
     e32:	19 82       	std	Y+1, r1	; 0x01
	/*Enable the ACK [TWEA]*/
	SET_BIT(TWCR,6);
     e34:	a6 e5       	ldi	r26, 0x56	; 86
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e6 e5       	ldi	r30, 0x56	; 86
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	80 64       	ori	r24, 0x40	; 64
     e40:	8c 93       	st	X, r24

	/*Set Interrupt Mode*/
#if MTWI_INTERRUPT_MODE==MTWI_INTERRUPT_DISABLED
	CLR_BIT(TWCR,0);
     e42:	a6 e5       	ldi	r26, 0x56	; 86
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e6 e5       	ldi	r30, 0x56	; 86
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8e 7f       	andi	r24, 0xFE	; 254
     e4e:	8c 93       	st	X, r24
#endif

	/*Set Bit Rate of the TWI Bus */
	/*1-Write on TWPS(1,0)*/
#if MTWI_PRESCALAR_MODE==MTWI_PRESCALAR_BY_1
	CLR_BIT(TWSR,0);
     e50:	a1 e2       	ldi	r26, 0x21	; 33
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e1 e2       	ldi	r30, 0x21	; 33
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8e 7f       	andi	r24, 0xFE	; 254
     e5c:	8c 93       	st	X, r24
	CLR_BIT(TWSR,1);
     e5e:	a1 e2       	ldi	r26, 0x21	; 33
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e1 e2       	ldi	r30, 0x21	; 33
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8d 7f       	andi	r24, 0xFD	; 253
     e6a:	8c 93       	st	X, r24

	/*2-Write the Value of TWBR
	 * Solve this Equation for TWBR
	 * SCL_Freq=(FCPU_FREQ)/(16+2*TWBR*4^(TWPS))
	 * Desired SCL_FREQ=400 KHZ @ Maximum */
	TWBR=12;
     e6c:	e0 e2       	ldi	r30, 0x20	; 32
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	8c e0       	ldi	r24, 0x0C	; 12
     e72:	80 83       	st	Z, r24


	/*Check Address Sent is */
	if(Copy_u8SelfSlaveAddress!=0)
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	88 23       	and	r24, r24
     e78:	f1 f0       	breq	.+60     	; 0xeb6 <MTWI_MasterInit+0x92>
	{
		//Put Slave Address in the Register

		/*Clear the LSB of The TWAR*/
		TWAR&=MTWI_TWAR_ADD_MASK;
     e7a:	a2 e2       	ldi	r26, 0x22	; 34
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e2 e2       	ldi	r30, 0x22	; 34
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	81 70       	andi	r24, 0x01	; 1
     e86:	8c 93       	st	X, r24

		/*Putting the Slave Address shifted by one inside the TWAR*/
		TWAR|=(Copy_u8SelfSlaveAddress<<1);
     e88:	a2 e2       	ldi	r26, 0x22	; 34
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e2 e2       	ldi	r30, 0x22	; 34
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	28 2f       	mov	r18, r24
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	82 2b       	or	r24, r18
     ea0:	8c 93       	st	X, r24
	{
		ReturnedErrorState = WrongAddressPassed;
		return ReturnedErrorState;
	}
	/*enable the TWI*/
	SET_BIT(TWCR,2);
     ea2:	a6 e5       	ldi	r26, 0x56	; 86
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e6 e5       	ldi	r30, 0x56	; 86
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	84 60       	ori	r24, 0x04	; 4
     eae:	8c 93       	st	X, r24

	return ReturnedErrorState;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	8b 83       	std	Y+3, r24	; 0x03
     eb4:	04 c0       	rjmp	.+8      	; 0xebe <MTWI_MasterInit+0x9a>
		/*Putting the Slave Address shifted by one inside the TWAR*/
		TWAR|=(Copy_u8SelfSlaveAddress<<1);
	}
	else
	{
		ReturnedErrorState = WrongAddressPassed;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	89 83       	std	Y+1, r24	; 0x01
		return ReturnedErrorState;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	8b 83       	std	Y+3, r24	; 0x03
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
	/*enable the TWI*/
	SET_BIT(TWCR,2);

	return ReturnedErrorState;

}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <MTWI_SlaveInit>:

TWI_ErrorState MTWI_SlaveInit(u8 Copy_u8SelfSlaveAddress)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <MTWI_SlaveInit+0x6>
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	8a 83       	std	Y+2, r24	; 0x02
	u8 ReturnedErrorState = NoError;
     eda:	19 82       	std	Y+1, r1	; 0x01

	/*Enable the ACK [TWEA]*/
	SET_BIT(TWCR,6);
     edc:	a6 e5       	ldi	r26, 0x56	; 86
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e6 e5       	ldi	r30, 0x56	; 86
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 64       	ori	r24, 0x40	; 64
     ee8:	8c 93       	st	X, r24

	/*Set Interrupt Mode*/
#if MTWI_INTERRUPT_MODE==MTWI_INTERRUPT_DISABLED
	CLR_BIT(TWCR,0);
     eea:	a6 e5       	ldi	r26, 0x56	; 86
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e6 e5       	ldi	r30, 0x56	; 86
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8e 7f       	andi	r24, 0xFE	; 254
     ef6:	8c 93       	st	X, r24

	/*2-Write the Value of TWBR
	 * Solve this Equation for TWBR
	 * SCL_Freq=(FCPU_FREQ)/(16+2*TWBR*4^(TWPS))
	 * Desired SCL_FREQ=400 KHZ @ Maximum */
	TWBR=12;
     ef8:	e0 e2       	ldi	r30, 0x20	; 32
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	8c e0       	ldi	r24, 0x0C	; 12
     efe:	80 83       	st	Z, r24


	/*Check Address Sent is */
	if(Copy_u8SelfSlaveAddress!=0)
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	88 23       	and	r24, r24
     f04:	f1 f0       	breq	.+60     	; 0xf42 <MTWI_SlaveInit+0x76>
	{
		//Put Slave Address in the Register

		/*Clear the LSB of The TWAR*/
		TWAR&=MTWI_TWAR_ADD_MASK;
     f06:	a2 e2       	ldi	r26, 0x22	; 34
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e2 e2       	ldi	r30, 0x22	; 34
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	81 70       	andi	r24, 0x01	; 1
     f12:	8c 93       	st	X, r24

		/*Putting the Slave Address shifted by one inside the TWAR*/
		TWAR|=(Copy_u8SelfSlaveAddress<<1);
     f14:	a2 e2       	ldi	r26, 0x22	; 34
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e2 e2       	ldi	r30, 0x22	; 34
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	28 2f       	mov	r18, r24
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	82 2b       	or	r24, r18
     f2c:	8c 93       	st	X, r24
		ReturnedErrorState = WrongAddressPassed;
		return ReturnedErrorState;
	}

	/*enable the TWI*/
	SET_BIT(TWCR,2);
     f2e:	a6 e5       	ldi	r26, 0x56	; 86
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e6 e5       	ldi	r30, 0x56	; 86
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	84 60       	ori	r24, 0x04	; 4
     f3a:	8c 93       	st	X, r24

	return ReturnedErrorState;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	8b 83       	std	Y+3, r24	; 0x03
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <MTWI_SlaveInit+0x7e>
		/*Putting the Slave Address shifted by one inside the TWAR*/
		TWAR|=(Copy_u8SelfSlaveAddress<<1);
	}
	else
	{
		ReturnedErrorState = WrongAddressPassed;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	89 83       	std	Y+1, r24	; 0x01
		return ReturnedErrorState;
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	8b 83       	std	Y+3, r24	; 0x03
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03

	/*enable the TWI*/
	SET_BIT(TWCR,2);

	return ReturnedErrorState;
}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <MTWI_SendStartCondition>:

TWI_ErrorState MTWI_SendStartCondition()
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	0f 92       	push	r0
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
	u8 ReturnedErrorState = NoError;
     f62:	19 82       	std	Y+1, r1	; 0x01

	//Send Start Condition
	//Note: In the Next operation, you should clear it by software
	SET_BIT(TWCR,5);
     f64:	a6 e5       	ldi	r26, 0x56	; 86
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e6 e5       	ldi	r30, 0x56	; 86
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 62       	ori	r24, 0x20	; 32
     f70:	8c 93       	st	X, r24

	//Clear the TWINT Flag So the TWI performs the last ordered operation
	SET_BIT(TWCR,7);
     f72:	a6 e5       	ldi	r26, 0x56	; 86
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e6 e5       	ldi	r30, 0x56	; 86
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	80 68       	ori	r24, 0x80	; 128
     f7e:	8c 93       	st	X, r24

	//Wait on flag to be high
	while(GET_BIT(TWCR,7)==0);
     f80:	e6 e5       	ldi	r30, 0x56	; 86
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	88 23       	and	r24, r24
     f88:	dc f7       	brge	.-10     	; 0xf80 <MTWI_SendStartCondition+0x28>

	//Check Status Code
	if((TWSR&MTWI_TWSR_STATUSCODE_MASK)!= MTWI_STATUS_CODE_START_COND_ACK)
     f8a:	e1 e2       	ldi	r30, 0x21	; 33
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	88 7f       	andi	r24, 0xF8	; 248
     f96:	90 70       	andi	r25, 0x00	; 0
     f98:	88 30       	cpi	r24, 0x08	; 8
     f9a:	91 05       	cpc	r25, r1
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <MTWI_SendStartCondition+0x4c>
	{
		//Start Condition Error Happens
		ReturnedErrorState = StartConditionFailed;
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <MTWI_SendStartCondition+0x4e>
	}
	else
	{
		//Start Condition Sent Successfully
		ReturnedErrorState = NoError;
     fa4:	19 82       	std	Y+1, r1	; 0x01
	}
	return ReturnedErrorState;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <MTWI_SendSlaveAddress_WithWrite>:

TWI_ErrorState MTWI_SendSlaveAddress_WithWrite(u8 Copy_u8SlaveAddress)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <MTWI_SendSlaveAddress_WithWrite+0x6>
     fb6:	0f 92       	push	r0
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	8b 83       	std	Y+3, r24	; 0x03
	/*Make this for further operations*/
	u8 Loc_u8SlaveAddress = Copy_u8SlaveAddress;
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	8a 83       	std	Y+2, r24	; 0x02
	u8 ReturnedErrorState = NoError;
     fc2:	19 82       	std	Y+1, r1	; 0x01

	//Clear TWSTA ==> Start Condition Bit
	CLR_BIT(TWCR,5);
     fc4:	a6 e5       	ldi	r26, 0x56	; 86
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8f 7d       	andi	r24, 0xDF	; 223
     fd0:	8c 93       	st	X, r24

	/*Shift the Address Sent one bit to the left - Automatically a zero
	 * added to the LSB in the variable which indicates a Write Request*/
	TWDR = Loc_u8SlaveAddress<<1;
     fd2:	e3 e2       	ldi	r30, 0x23	; 35
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	88 0f       	add	r24, r24
     fda:	80 83       	st	Z, r24

	//Clear the TWINT Flag so the last Ordered operation is performed
	SET_BIT(TWCR,7);
     fdc:	a6 e5       	ldi	r26, 0x56	; 86
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e6 e5       	ldi	r30, 0x56	; 86
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	8c 93       	st	X, r24

	//wait on the flag so that the operation is completed
	while(GET_BIT(TWCR,7)==0);
     fea:	e6 e5       	ldi	r30, 0x56	; 86
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	88 23       	and	r24, r24
     ff2:	dc f7       	brge	.-10     	; 0xfea <MTWI_SendSlaveAddress_WithWrite+0x3a>

	//Check Status Code
	if((TWSR&MTWI_TWSR_STATUSCODE_MASK)!= MTWI_STATUS_CODE_SLAVE_ADD_WR_ACK)
     ff4:	e1 e2       	ldi	r30, 0x21	; 33
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	88 7f       	andi	r24, 0xF8	; 248
    1000:	90 70       	andi	r25, 0x00	; 0
    1002:	88 31       	cpi	r24, 0x18	; 24
    1004:	91 05       	cpc	r25, r1
    1006:	19 f0       	breq	.+6      	; 0x100e <MTWI_SendSlaveAddress_WithWrite+0x5e>
	{
		//Start Condition Error Happens
		ReturnedErrorState = SlaveAddressWithWriteFailed;
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <MTWI_SendSlaveAddress_WithWrite+0x60>
	}
	else
	{
		//Start Condition Sent Successfully
		ReturnedErrorState = NoError;
    100e:	19 82       	std	Y+1, r1	; 0x01
	}
	return ReturnedErrorState;
    1010:	89 81       	ldd	r24, Y+1	; 0x01
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <MTWI_SendSlaveAddress_WithRead>:

TWI_ErrorState MTWI_SendSlaveAddress_WithRead(u8 Copy_u8SlaveAddress)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <MTWI_SendSlaveAddress_WithRead+0x6>
    1024:	0f 92       	push	r0
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	8b 83       	std	Y+3, r24	; 0x03
	/*Make this for further operations*/
	u8 Loc_u8SlaveAddress = Copy_u8SlaveAddress;
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	8a 83       	std	Y+2, r24	; 0x02
	u8 ReturnedErrorState = NoError;
    1030:	19 82       	std	Y+1, r1	; 0x01

	//Clear TWSTA ==> Start Condition Bit
	CLR_BIT(TWCR,5);
    1032:	a6 e5       	ldi	r26, 0x56	; 86
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e6 e5       	ldi	r30, 0x56	; 86
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8f 7d       	andi	r24, 0xDF	; 223
    103e:	8c 93       	st	X, r24

	/*Shift the Address Sent one bit to the left -
	 * And add a one to the local variable at its LSB to indicate a read request*/
	TWDR = (Loc_u8SlaveAddress<<1)|1;
    1040:	e3 e2       	ldi	r30, 0x23	; 35
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	81 60       	ori	r24, 0x01	; 1
    1050:	80 83       	st	Z, r24

	//Clear the TWINT Flag so the last Ordered operation is performed
	SET_BIT(TWCR,7);
    1052:	a6 e5       	ldi	r26, 0x56	; 86
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e6 e5       	ldi	r30, 0x56	; 86
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	80 68       	ori	r24, 0x80	; 128
    105e:	8c 93       	st	X, r24

	//wait on the flag so that the operation is completed
	while(GET_BIT(TWCR,7)==0);
    1060:	e6 e5       	ldi	r30, 0x56	; 86
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	88 23       	and	r24, r24
    1068:	dc f7       	brge	.-10     	; 0x1060 <MTWI_SendSlaveAddress_WithRead+0x42>

	//Check Status Code
	if((TWSR&MTWI_TWSR_STATUSCODE_MASK)!= MTWI_STATUS_CODE_SLAVE_ADD_R_ACK)
    106a:	e1 e2       	ldi	r30, 0x21	; 33
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	88 7f       	andi	r24, 0xF8	; 248
    1076:	90 70       	andi	r25, 0x00	; 0
    1078:	80 34       	cpi	r24, 0x40	; 64
    107a:	91 05       	cpc	r25, r1
    107c:	19 f0       	breq	.+6      	; 0x1084 <MTWI_SendSlaveAddress_WithRead+0x66>
	{
		//Start Condition Error Happens
		ReturnedErrorState = SlaveAddressWithReadFailed;
    107e:	84 e0       	ldi	r24, 0x04	; 4
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	01 c0       	rjmp	.+2      	; 0x1086 <MTWI_SendSlaveAddress_WithRead+0x68>
	}
	else
	{
		//Start Condition Sent Successfully
		ReturnedErrorState = NoError;
    1084:	19 82       	std	Y+1, r1	; 0x01
	}
	return ReturnedErrorState;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <MTWI_MasterSlaveWriteData>:

TWI_ErrorState MTWI_MasterSlaveWriteData(u8 Copy_u8DataToWrite)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <MTWI_MasterSlaveWriteData+0x6>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	8a 83       	std	Y+2, r24	; 0x02
	u8 ReturnedErrorState = NoError;
    10a0:	19 82       	std	Y+1, r1	; 0x01

	TWDR = Copy_u8DataToWrite;
    10a2:	e3 e2       	ldi	r30, 0x23	; 35
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	80 83       	st	Z, r24

	//Clear the TWINT Flag so the last Ordered operation is performed
	SET_BIT(TWCR,7);
    10aa:	a6 e5       	ldi	r26, 0x56	; 86
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e6 e5       	ldi	r30, 0x56	; 86
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 68       	ori	r24, 0x80	; 128
    10b6:	8c 93       	st	X, r24

	//wait on the flag so that the operation is completed
	while(GET_BIT(TWCR,7)==0);
    10b8:	e6 e5       	ldi	r30, 0x56	; 86
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	88 23       	and	r24, r24
    10c0:	dc f7       	brge	.-10     	; 0x10b8 <MTWI_MasterSlaveWriteData+0x24>

	//Check Status Code
	if((TWSR&MTWI_TWSR_STATUSCODE_MASK)!= MTWI_STATUS_CODE_START_DATA_SENT_ACK)
    10c2:	e1 e2       	ldi	r30, 0x21	; 33
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	88 7f       	andi	r24, 0xF8	; 248
    10ce:	90 70       	andi	r25, 0x00	; 0
    10d0:	88 32       	cpi	r24, 0x28	; 40
    10d2:	91 05       	cpc	r25, r1
    10d4:	19 f0       	breq	.+6      	; 0x10dc <MTWI_MasterSlaveWriteData+0x48>
	{
		//Start Condition Error Happens
		ReturnedErrorState = DataSendFailed;
    10d6:	85 e0       	ldi	r24, 0x05	; 5
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	01 c0       	rjmp	.+2      	; 0x10de <MTWI_MasterSlaveWriteData+0x4a>
	}
	else
	{
		//Start Condition Sent Successfully
		ReturnedErrorState = NoError;
    10dc:	19 82       	std	Y+1, r1	; 0x01
	}
	return ReturnedErrorState;
    10de:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <MTWI_MasterSlaveReadData>:

TWI_ErrorState MTWI_MasterSlaveReadData(u8* Ptr_u8DataToRead)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <MTWI_MasterSlaveReadData+0x6>
    10f0:	0f 92       	push	r0
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	9b 83       	std	Y+3, r25	; 0x03
    10f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 ReturnedErrorState = NoError;
    10fa:	19 82       	std	Y+1, r1	; 0x01


	//Clear the TWINT Flag so the last Ordered operation is performed
	SET_BIT(TWCR,7);
    10fc:	a6 e5       	ldi	r26, 0x56	; 86
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e6 e5       	ldi	r30, 0x56	; 86
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	80 68       	ori	r24, 0x80	; 128
    1108:	8c 93       	st	X, r24

	//wait on the flag so that the operation is completed
	while(GET_BIT(TWCR,7)==0);
    110a:	e6 e5       	ldi	r30, 0x56	; 86
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	88 23       	and	r24, r24
    1112:	dc f7       	brge	.-10     	; 0x110a <MTWI_MasterSlaveReadData+0x20>


	//Check Status Code
	if((TWSR&MTWI_TWSR_STATUSCODE_MASK)!= MTWI_STATUS_CODE_DATA_REC_ACK)
    1114:	e1 e2       	ldi	r30, 0x21	; 33
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	88 7f       	andi	r24, 0xF8	; 248
    1120:	90 70       	andi	r25, 0x00	; 0
    1122:	80 35       	cpi	r24, 0x50	; 80
    1124:	91 05       	cpc	r25, r1
    1126:	19 f0       	breq	.+6      	; 0x112e <MTWI_MasterSlaveReadData+0x44>
	{
		//Start Condition Error Happens
		ReturnedErrorState = DataReceptionFailed;
    1128:	86 e0       	ldi	r24, 0x06	; 6
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	07 c0       	rjmp	.+14     	; 0x113c <MTWI_MasterSlaveReadData+0x52>
	}
	else
	{
		//Read the Data in the TWDR
		*Ptr_u8DataToRead = TWDR;
    112e:	e3 e2       	ldi	r30, 0x23	; 35
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	ea 81       	ldd	r30, Y+2	; 0x02
    1136:	fb 81       	ldd	r31, Y+3	; 0x03
    1138:	80 83       	st	Z, r24
		//Start Condition Sent Successfully
		ReturnedErrorState = NoError;
    113a:	19 82       	std	Y+1, r1	; 0x01
	}


	return ReturnedErrorState;
    113c:	89 81       	ldd	r24, Y+1	; 0x01
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <MTWI_SendStopCondtition>:

TWI_ErrorState MTWI_SendStopCondtition()
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	0f 92       	push	r0
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
	u8 ReturnedErrorState = NoError;
    1154:	19 82       	std	Y+1, r1	; 0x01

	//Set TWSTO ==> Stop Condition Bit
	SET_BIT(TWCR,4);
    1156:	a6 e5       	ldi	r26, 0x56	; 86
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e6 e5       	ldi	r30, 0x56	; 86
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 61       	ori	r24, 0x10	; 16
    1162:	8c 93       	st	X, r24

	//Clear the TWINT Flag so the last Ordered operation is performed
	SET_BIT(TWCR,7);
    1164:	a6 e5       	ldi	r26, 0x56	; 86
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e6 e5       	ldi	r30, 0x56	; 86
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	80 68       	ori	r24, 0x80	; 128
    1170:	8c 93       	st	X, r24

	//wait on the flag so that the operation is completed
	while(GET_BIT(TWCR,7)==0);
    1172:	e6 e5       	ldi	r30, 0x56	; 86
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	88 23       	and	r24, r24
    117a:	dc f7       	brge	.-10     	; 0x1172 <MTWI_SendStopCondtition+0x28>

	return ReturnedErrorState;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
}
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <MTIMER0_Init>:
//Two Global Pointers
void (*Glob_OverflowISR_Ptr)(void)=NULL;
void (*Glob_CTC_ISR_Ptr)(void)=NULL;

void MTIMER0_Init()
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62

#if TIMER0_MODE==TIMER_NORMAL_MODE
	CLR_BIT(TCCR0,3);
    118e:	a3 e5       	ldi	r26, 0x53	; 83
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e3 e5       	ldi	r30, 0x53	; 83
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	87 7f       	andi	r24, 0xF7	; 247
    119a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
    119c:	a3 e5       	ldi	r26, 0x53	; 83
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e3 e5       	ldi	r30, 0x53	; 83
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8f 7b       	andi	r24, 0xBF	; 191
    11a8:	8c 93       	st	X, r24
#else
#error "Wrong Mode Chosen"
#endif

#if TIMER0_CLOCK_SCOURCE==PRESCALAR_OVER_1024
		SET_BIT(TCCR0,0);
    11aa:	a3 e5       	ldi	r26, 0x53	; 83
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e3 e5       	ldi	r30, 0x53	; 83
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	81 60       	ori	r24, 0x01	; 1
    11b6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
    11b8:	a3 e5       	ldi	r26, 0x53	; 83
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e3 e5       	ldi	r30, 0x53	; 83
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8d 7f       	andi	r24, 0xFD	; 253
    11c4:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
    11c6:	a3 e5       	ldi	r26, 0x53	; 83
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e3 e5       	ldi	r30, 0x53	; 83
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	84 60       	ori	r24, 0x04	; 4
    11d2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,0);
		SET_BIT(TCCR0,1);
		SET_BIT(TCCR0,2);
#endif

}
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <MTIMER0_SetPreload>:

void MTIMER0_SetPreload(u8 Copy_u8Preload)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload;
    11e6:	e2 e5       	ldi	r30, 0x52	; 82
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	80 83       	st	Z, r24
}
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <MTIMER0_SetCTC>:

void MTIMER0_SetCTC(u8 Copy_u8OCR)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8OCR;
    1202:	ec e5       	ldi	r30, 0x5C	; 92
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	80 83       	st	Z, r24
}
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <MTIMER0_OVERFLOW_CALLBACK>:

void MTIMER0_OVERFLOW_CALLBACK(void(*Ptr_OverflowApp)(void))
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <MTIMER0_OVERFLOW_CALLBACK+0x6>
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_OverflowApp!=NULL)
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	61 f0       	breq	.+24     	; 0x1240 <MTIMER0_OVERFLOW_CALLBACK+0x2e>
	{
		if(Glob_OverflowISR_Ptr==NULL)
    1228:	80 91 8e 00 	lds	r24, 0x008E
    122c:	90 91 8f 00 	lds	r25, 0x008F
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	31 f4       	brne	.+12     	; 0x1240 <MTIMER0_OVERFLOW_CALLBACK+0x2e>
		{
			Glob_OverflowISR_Ptr=Ptr_OverflowApp;
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	90 93 8f 00 	sts	0x008F, r25
    123c:	80 93 8e 00 	sts	0x008E, r24
		}
	}
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <MTIMER0_CTC_CALLBACK>:


void MTIMER0_CTC_CALLBACK(void(*Ptr_CTCApp)(void))
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <MTIMER0_CTC_CALLBACK+0x6>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_CTCApp !=NULL)
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	61 f0       	breq	.+24     	; 0x1278 <MTIMER0_CTC_CALLBACK+0x2e>
	{
		if(Glob_CTC_ISR_Ptr==NULL)
    1260:	80 91 90 00 	lds	r24, 0x0090
    1264:	90 91 91 00 	lds	r25, 0x0091
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	31 f4       	brne	.+12     	; 0x1278 <MTIMER0_CTC_CALLBACK+0x2e>
		{
			Glob_CTC_ISR_Ptr=Ptr_CTCApp;
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	9a 81       	ldd	r25, Y+2	; 0x02
    1270:	90 93 91 00 	sts	0x0091, r25
    1274:	80 93 90 00 	sts	0x0090, r24
		}
	}
}
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <MTIMER0_SetDutyCycle>:

void MTIMER0_SetDutyCycle(u8 Copy_u8DutyCycle)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <MTIMER0_SetDutyCycle+0x6>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	8a 83       	std	Y+2, r24	; 0x02
	u8 CTC_Value;
	if((Copy_u8DutyCycle>=0)&&(Copy_u8DutyCycle<=100))
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	85 36       	cpi	r24, 0x65	; 101
    1292:	20 f5       	brcc	.+72     	; 0x12dc <MTIMER0_SetDutyCycle+0x5a>
	{
		CTC_Value=((u32)(Copy_u8DutyCycle*255))/100 ;
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	48 2f       	mov	r20, r24
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	ca 01       	movw	r24, r20
    129c:	9c 01       	movw	r18, r24
    129e:	22 0f       	add	r18, r18
    12a0:	33 1f       	adc	r19, r19
    12a2:	c9 01       	movw	r24, r18
    12a4:	96 95       	lsr	r25
    12a6:	98 2f       	mov	r25, r24
    12a8:	88 27       	eor	r24, r24
    12aa:	97 95       	ror	r25
    12ac:	87 95       	ror	r24
    12ae:	82 1b       	sub	r24, r18
    12b0:	93 0b       	sbc	r25, r19
    12b2:	84 0f       	add	r24, r20
    12b4:	95 1f       	adc	r25, r21
    12b6:	aa 27       	eor	r26, r26
    12b8:	97 fd       	sbrc	r25, 7
    12ba:	a0 95       	com	r26
    12bc:	ba 2f       	mov	r27, r26
    12be:	24 e6       	ldi	r18, 0x64	; 100
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__udivmodsi4>
    12ce:	da 01       	movw	r26, r20
    12d0:	c9 01       	movw	r24, r18
    12d2:	89 83       	std	Y+1, r24	; 0x01
		OCR0=CTC_Value;
    12d4:	ec e5       	ldi	r30, 0x5C	; 92
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	80 83       	st	Z, r24
	}

}
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <MTIMER0_STOP>:


void MTIMER0_STOP()
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,0);
    12ee:	a3 e5       	ldi	r26, 0x53	; 83
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e3 e5       	ldi	r30, 0x53	; 83
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	8e 7f       	andi	r24, 0xFE	; 254
    12fa:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
    12fc:	a3 e5       	ldi	r26, 0x53	; 83
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e3 e5       	ldi	r30, 0x53	; 83
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8d 7f       	andi	r24, 0xFD	; 253
    1308:	8c 93       	st	X, r24
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <__vector_10>:

//CTC ISR
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	5f 93       	push	r21
    1322:	6f 93       	push	r22
    1324:	7f 93       	push	r23
    1326:	8f 93       	push	r24
    1328:	9f 93       	push	r25
    132a:	af 93       	push	r26
    132c:	bf 93       	push	r27
    132e:	ef 93       	push	r30
    1330:	ff 93       	push	r31
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
	if(Glob_CTC_ISR_Ptr!=NULL)
    133a:	80 91 90 00 	lds	r24, 0x0090
    133e:	90 91 91 00 	lds	r25, 0x0091
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	29 f0       	breq	.+10     	; 0x1350 <__vector_10+0x40>
	{
		Glob_CTC_ISR_Ptr();
    1346:	e0 91 90 00 	lds	r30, 0x0090
    134a:	f0 91 91 00 	lds	r31, 0x0091
    134e:	09 95       	icall
	}
}
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	ff 91       	pop	r31
    1356:	ef 91       	pop	r30
    1358:	bf 91       	pop	r27
    135a:	af 91       	pop	r26
    135c:	9f 91       	pop	r25
    135e:	8f 91       	pop	r24
    1360:	7f 91       	pop	r23
    1362:	6f 91       	pop	r22
    1364:	5f 91       	pop	r21
    1366:	4f 91       	pop	r20
    1368:	3f 91       	pop	r19
    136a:	2f 91       	pop	r18
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	0f 90       	pop	r0
    1372:	1f 90       	pop	r1
    1374:	18 95       	reti

00001376 <__vector_11>:

//Overflow ISR
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    1376:	1f 92       	push	r1
    1378:	0f 92       	push	r0
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	0f 92       	push	r0
    137e:	11 24       	eor	r1, r1
    1380:	2f 93       	push	r18
    1382:	3f 93       	push	r19
    1384:	4f 93       	push	r20
    1386:	5f 93       	push	r21
    1388:	6f 93       	push	r22
    138a:	7f 93       	push	r23
    138c:	8f 93       	push	r24
    138e:	9f 93       	push	r25
    1390:	af 93       	push	r26
    1392:	bf 93       	push	r27
    1394:	ef 93       	push	r30
    1396:	ff 93       	push	r31
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
	if(Glob_OverflowISR_Ptr!=NULL)
    13a0:	80 91 8e 00 	lds	r24, 0x008E
    13a4:	90 91 8f 00 	lds	r25, 0x008F
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	29 f0       	breq	.+10     	; 0x13b6 <__vector_11+0x40>
	{
		Glob_OverflowISR_Ptr();
    13ac:	e0 91 8e 00 	lds	r30, 0x008E
    13b0:	f0 91 8f 00 	lds	r31, 0x008F
    13b4:	09 95       	icall
	}
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	ff 91       	pop	r31
    13bc:	ef 91       	pop	r30
    13be:	bf 91       	pop	r27
    13c0:	af 91       	pop	r26
    13c2:	9f 91       	pop	r25
    13c4:	8f 91       	pop	r24
    13c6:	7f 91       	pop	r23
    13c8:	6f 91       	pop	r22
    13ca:	5f 91       	pop	r21
    13cc:	4f 91       	pop	r20
    13ce:	3f 91       	pop	r19
    13d0:	2f 91       	pop	r18
    13d2:	0f 90       	pop	r0
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	0f 90       	pop	r0
    13d8:	1f 90       	pop	r1
    13da:	18 95       	reti

000013dc <MSPI_MasterInit>:
 */
#include "MSPI_Interface.h"
#include "MSPI_Config.h"

void MSPI_MasterInit()
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62

#if MSPI_DORD_MODE==MSPI_DORD_MSB_FIRST
	CLR_BIT(SPCR,5);
    13e4:	ad e2       	ldi	r26, 0x2D	; 45
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ed e2       	ldi	r30, 0x2D	; 45
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8f 7d       	andi	r24, 0xDF	; 223
    13f0:	8c 93       	st	X, r24
#endif

#if MSPI_POLARITY_MODE==MSPI_POL_ACTIVE_HIGH
	CLR_BIT(SPCR,3);
#elif MSPI_POLARITY_MODE==MSPI_POL_ACTIVE_LOW
	SET_BIT(SPCR,3);
    13f2:	ad e2       	ldi	r26, 0x2D	; 45
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ed e2       	ldi	r30, 0x2D	; 45
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	88 60       	ori	r24, 0x08	; 8
    13fe:	8c 93       	st	X, r24
#endif


#if MSPI_PHASE_MODE==MSPI_PHASE_SAMPLE_AT_LEADING
	CLR_BIT(SPCR,2);
    1400:	ad e2       	ldi	r26, 0x2D	; 45
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ed e2       	ldi	r30, 0x2D	; 45
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	8b 7f       	andi	r24, 0xFB	; 251
    140c:	8c 93       	st	X, r24


#if MSPI_INTERRUPT_MODE_MODE==MSPI_INTERRUPT_OFF
	CLR_BIT(SPCR,7);
#elif MSPI_INTERRUPT_MODE_MODE==MSPI_INTERRUPT_ON
	SET_BIT(SPCR,7);
    140e:	ad e2       	ldi	r26, 0x2D	; 45
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ed e2       	ldi	r30, 0x2D	; 45
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 68       	ori	r24, 0x80	; 128
    141a:	8c 93       	st	X, r24
#endif

#if MSPI_CLOCK_MODE_MODE==MSPI_CLOCK_FCPU_4
	CLR_BIT(SPCR,0);
    141c:	ad e2       	ldi	r26, 0x2D	; 45
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	ed e2       	ldi	r30, 0x2D	; 45
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8e 7f       	andi	r24, 0xFE	; 254
    1428:	8c 93       	st	X, r24
	CLR_BIT(SPCR,1);
    142a:	ad e2       	ldi	r26, 0x2D	; 45
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	ed e2       	ldi	r30, 0x2D	; 45
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8d 7f       	andi	r24, 0xFD	; 253
    1436:	8c 93       	st	X, r24
	CLR_BIT(SPSR,7);
    1438:	ae e2       	ldi	r26, 0x2E	; 46
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ee e2       	ldi	r30, 0x2E	; 46
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 77       	andi	r24, 0x7F	; 127
    1444:	8c 93       	st	X, r24
	SET_BIT(SPCR,1);
	SET_BIT(SPSR,7);
#endif

//init master spi
SET_BIT(SPCR,4);
    1446:	ad e2       	ldi	r26, 0x2D	; 45
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	ed e2       	ldi	r30, 0x2D	; 45
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	80 61       	ori	r24, 0x10	; 16
    1452:	8c 93       	st	X, r24

//ENABLE SPI
SET_BIT(SPCR,6);
    1454:	ad e2       	ldi	r26, 0x2D	; 45
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	ed e2       	ldi	r30, 0x2D	; 45
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	80 64       	ori	r24, 0x40	; 64
    1460:	8c 93       	st	X, r24

}
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <MSPI_SlaveInit>:


void MSPI_SlaveInit()
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
#if MSPI_DORD_MODE==MSPI_DORD_MSB_FIRST
	CLR_BIT(SPCR,5);
    1470:	ad e2       	ldi	r26, 0x2D	; 45
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ed e2       	ldi	r30, 0x2D	; 45
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	8f 7d       	andi	r24, 0xDF	; 223
    147c:	8c 93       	st	X, r24
#endif

#if MSPI_POLARITY_MODE==MSPI_POL_ACTIVE_HIGH
	CLR_BIT(SPCR,3);
#elif MSPI_POLARITY_MODE==MSPI_POL_ACTIVE_LOW
	SET_BIT(SPCR,3);
    147e:	ad e2       	ldi	r26, 0x2D	; 45
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ed e2       	ldi	r30, 0x2D	; 45
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	88 60       	ori	r24, 0x08	; 8
    148a:	8c 93       	st	X, r24
#endif


#if MSPI_PHASE_MODE==MSPI_PHASE_SAMPLE_AT_LEADING
	CLR_BIT(SPCR,2);
    148c:	ad e2       	ldi	r26, 0x2D	; 45
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ed e2       	ldi	r30, 0x2D	; 45
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8b 7f       	andi	r24, 0xFB	; 251
    1498:	8c 93       	st	X, r24


#if MSPI_INTERRUPT_MODE_MODE==MSPI_INTERRUPT_OFF
	CLR_BIT(SPCR,7);
#elif MSPI_INTERRUPT_MODE_MODE==MSPI_INTERRUPT_ON
	SET_BIT(SPCR,7);
    149a:	ad e2       	ldi	r26, 0x2D	; 45
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ed e2       	ldi	r30, 0x2D	; 45
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	80 68       	ori	r24, 0x80	; 128
    14a6:	8c 93       	st	X, r24
#endif

	//init slave spi
	CLR_BIT(SPCR,4);
    14a8:	ad e2       	ldi	r26, 0x2D	; 45
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ed e2       	ldi	r30, 0x2D	; 45
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8f 7e       	andi	r24, 0xEF	; 239
    14b4:	8c 93       	st	X, r24

	//ENABLE SPI
	SET_BIT(SPCR,6);
    14b6:	ad e2       	ldi	r26, 0x2D	; 45
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ed e2       	ldi	r30, 0x2D	; 45
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	80 64       	ori	r24, 0x40	; 64
    14c2:	8c 93       	st	X, r24

}
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <MSPI_SendReceive>:

u8 MSPI_SendReceive(u8 Copy_u8TransmittedValue)
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	0f 92       	push	r0
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8TransmittedValue;
    14d6:	ef e2       	ldi	r30, 0x2F	; 47
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	80 83       	st	Z, r24
	//Poll On SPIF Flag
	while(GET_BIT(SPSR,7)==0);
    14de:	ee e2       	ldi	r30, 0x2E	; 46
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	88 23       	and	r24, r24
    14e6:	dc f7       	brge	.-10     	; 0x14de <MSPI_SendReceive+0x14>

	return SPDR;
    14e8:	ef e2       	ldi	r30, 0x2F	; 47
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
}
    14ee:	0f 90       	pop	r0
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <MGIE_Enable>:
#include "../../LIB/STD_TYPES.H"
#include "MGIE_Interface.h"
#include "MGIE_Private.h"

void MGIE_Enable(void)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    14fe:	af e5       	ldi	r26, 0x5F	; 95
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	ef e5       	ldi	r30, 0x5F	; 95
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 68       	ori	r24, 0x80	; 128
    150a:	8c 93       	st	X, r24
}
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <MGIE_Disable>:
void MGIE_Disable(void)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    151a:	af e5       	ldi	r26, 0x5F	; 95
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	ef e5       	ldi	r30, 0x5F	; 95
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8f 77       	andi	r24, 0x7F	; 127
    1526:	8c 93       	st	X, r24
}
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <MEXTII0_Init>:

void(*Global_Pointer1)(void) = NULL;
void(*Global_Pointer2)(void) = NULL;

void MEXTII0_Init()
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,0);
	CLR_BIT(MCUCR,1);

#elif MEXTI_SENSE_CONTROL_STATE == MEXTI_ANY_LOGICAL_CHANGE

	SET_BIT(MCUCR,0);
    1536:	a5 e5       	ldi	r26, 0x55	; 85
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e5 e5       	ldi	r30, 0x55	; 85
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	81 60       	ori	r24, 0x01	; 1
    1542:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
    1544:	a5 e5       	ldi	r26, 0x55	; 85
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e5 e5       	ldi	r30, 0x55	; 85
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	8d 7f       	andi	r24, 0xFD	; 253
    1550:	8c 93       	st	X, r24
	SET_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);

#endif

	SET_BIT(GICR,6);
    1552:	ab e5       	ldi	r26, 0x5B	; 91
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	eb e5       	ldi	r30, 0x5B	; 91
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	80 64       	ori	r24, 0x40	; 64
    155e:	8c 93       	st	X, r24
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <MEXTII1_Init>:

void MEXTII1_Init()
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,2);
	CLR_BIT(MCUCR,3);

#elif MEXTI_SENSE_CONTROL_STATE == MEXTI_ANY_LOGICAL_CHANGE

	SET_BIT(MCUCR,2);
    156e:	a5 e5       	ldi	r26, 0x55	; 85
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e5 e5       	ldi	r30, 0x55	; 85
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	84 60       	ori	r24, 0x04	; 4
    157a:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,3);
    157c:	a5 e5       	ldi	r26, 0x55	; 85
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e5 e5       	ldi	r30, 0x55	; 85
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	87 7f       	andi	r24, 0xF7	; 247
    1588:	8c 93       	st	X, r24
	SET_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);

#endif

	SET_BIT(GICR,7);
    158a:	ab e5       	ldi	r26, 0x5B	; 91
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	eb e5       	ldi	r30, 0x5B	; 91
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	80 68       	ori	r24, 0x80	; 128
    1596:	8c 93       	st	X, r24
}
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <MEXTII2_Init>:

void MEXTII2_Init()
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62

}
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <MEXTI_Callback1>:

void MEXTI_Callback1(void(*ptr)(void))
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <MEXTI_Callback1+0x6>
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	31 f0       	breq	.+12     	; 0x15ce <MEXTI_Callback1+0x22>
	{
		Global_Pointer1 = ptr;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	90 93 93 00 	sts	0x0093, r25
    15ca:	80 93 92 00 	sts	0x0092, r24
	}
}
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <MEXTI_Callback2>:

void MEXTI_Callback2(void(*ptr)(void))
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <MEXTI_Callback2+0x6>
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	31 f0       	breq	.+12     	; 0x15fa <MEXTI_Callback2+0x22>
	{
		Global_Pointer2 = ptr;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	90 93 95 00 	sts	0x0095, r25
    15f6:	80 93 94 00 	sts	0x0094, r24
	}
}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <__vector_1>:


ISR(VECT_INT0)
{
    1604:	1f 92       	push	r1
    1606:	0f 92       	push	r0
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	0f 92       	push	r0
    160c:	11 24       	eor	r1, r1
    160e:	2f 93       	push	r18
    1610:	3f 93       	push	r19
    1612:	4f 93       	push	r20
    1614:	5f 93       	push	r21
    1616:	6f 93       	push	r22
    1618:	7f 93       	push	r23
    161a:	8f 93       	push	r24
    161c:	9f 93       	push	r25
    161e:	af 93       	push	r26
    1620:	bf 93       	push	r27
    1622:	ef 93       	push	r30
    1624:	ff 93       	push	r31
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
	if(Global_Pointer1 != NULL)
    162e:	80 91 92 00 	lds	r24, 0x0092
    1632:	90 91 93 00 	lds	r25, 0x0093
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	29 f0       	breq	.+10     	; 0x1644 <__vector_1+0x40>
	{
		Global_Pointer1();
    163a:	e0 91 92 00 	lds	r30, 0x0092
    163e:	f0 91 93 00 	lds	r31, 0x0093
    1642:	09 95       	icall
	}
}
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	ff 91       	pop	r31
    164a:	ef 91       	pop	r30
    164c:	bf 91       	pop	r27
    164e:	af 91       	pop	r26
    1650:	9f 91       	pop	r25
    1652:	8f 91       	pop	r24
    1654:	7f 91       	pop	r23
    1656:	6f 91       	pop	r22
    1658:	5f 91       	pop	r21
    165a:	4f 91       	pop	r20
    165c:	3f 91       	pop	r19
    165e:	2f 91       	pop	r18
    1660:	0f 90       	pop	r0
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	0f 90       	pop	r0
    1666:	1f 90       	pop	r1
    1668:	18 95       	reti

0000166a <__vector_2>:

ISR(VECT_INT1)
{
    166a:	1f 92       	push	r1
    166c:	0f 92       	push	r0
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	0f 92       	push	r0
    1672:	11 24       	eor	r1, r1
    1674:	2f 93       	push	r18
    1676:	3f 93       	push	r19
    1678:	4f 93       	push	r20
    167a:	5f 93       	push	r21
    167c:	6f 93       	push	r22
    167e:	7f 93       	push	r23
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	af 93       	push	r26
    1686:	bf 93       	push	r27
    1688:	ef 93       	push	r30
    168a:	ff 93       	push	r31
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
	if(Global_Pointer2 != NULL)
    1694:	80 91 94 00 	lds	r24, 0x0094
    1698:	90 91 95 00 	lds	r25, 0x0095
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	29 f0       	breq	.+10     	; 0x16aa <__vector_2+0x40>
	{
		Global_Pointer2();
    16a0:	e0 91 94 00 	lds	r30, 0x0094
    16a4:	f0 91 95 00 	lds	r31, 0x0095
    16a8:	09 95       	icall
	}
}
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	ff 91       	pop	r31
    16b0:	ef 91       	pop	r30
    16b2:	bf 91       	pop	r27
    16b4:	af 91       	pop	r26
    16b6:	9f 91       	pop	r25
    16b8:	8f 91       	pop	r24
    16ba:	7f 91       	pop	r23
    16bc:	6f 91       	pop	r22
    16be:	5f 91       	pop	r21
    16c0:	4f 91       	pop	r20
    16c2:	3f 91       	pop	r19
    16c4:	2f 91       	pop	r18
    16c6:	0f 90       	pop	r0
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	0f 90       	pop	r0
    16cc:	1f 90       	pop	r1
    16ce:	18 95       	reti

000016d0 <MDIO_SetPortDirection>:
#include "../../LIB/STD_TYPES.H"
#include "MDIO_Interface.h"
#include "MDIO_Private.h"

void MDIO_SetPortDirection(u8 Copy_u8PortNumber, u8 Copy_u8PortDirection)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <MDIO_SetPortDirection+0x6>
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <MDIO_SetPortDirection+0x8>
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PortDirection == PORT_OUTPUT)||(Copy_u8PortDirection == PORT_INPUT))
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	8f 3f       	cpi	r24, 0xFF	; 255
    16e4:	19 f0       	breq	.+6      	; 0x16ec <MDIO_SetPortDirection+0x1c>
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	88 23       	and	r24, r24
    16ea:	91 f5       	brne	.+100    	; 0x1750 <MDIO_SetPortDirection+0x80>
	{
		//VALID PORT DIRECTION GIVEN
		switch(Copy_u8PortNumber)
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	3c 83       	std	Y+4, r19	; 0x04
    16f4:	2b 83       	std	Y+3, r18	; 0x03
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 05       	cpc	r25, r1
    16fe:	d1 f0       	breq	.+52     	; 0x1734 <MDIO_SetPortDirection+0x64>
    1700:	2b 81       	ldd	r18, Y+3	; 0x03
    1702:	3c 81       	ldd	r19, Y+4	; 0x04
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	2c f4       	brge	.+10     	; 0x1714 <MDIO_SetPortDirection+0x44>
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	61 f0       	breq	.+24     	; 0x172a <MDIO_SetPortDirection+0x5a>
    1712:	1e c0       	rjmp	.+60     	; 0x1750 <MDIO_SetPortDirection+0x80>
    1714:	2b 81       	ldd	r18, Y+3	; 0x03
    1716:	3c 81       	ldd	r19, Y+4	; 0x04
    1718:	22 30       	cpi	r18, 0x02	; 2
    171a:	31 05       	cpc	r19, r1
    171c:	81 f0       	breq	.+32     	; 0x173e <MDIO_SetPortDirection+0x6e>
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	83 30       	cpi	r24, 0x03	; 3
    1724:	91 05       	cpc	r25, r1
    1726:	81 f0       	breq	.+32     	; 0x1748 <MDIO_SetPortDirection+0x78>
    1728:	13 c0       	rjmp	.+38     	; 0x1750 <MDIO_SetPortDirection+0x80>
		{
		case MDIO_PORTA :
			DDRA = Copy_u8PortDirection;
    172a:	ea e3       	ldi	r30, 0x3A	; 58
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	80 83       	st	Z, r24
    1732:	0e c0       	rjmp	.+28     	; 0x1750 <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTB :
			DDRB = Copy_u8PortDirection;
    1734:	e7 e3       	ldi	r30, 0x37	; 55
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	80 83       	st	Z, r24
    173c:	09 c0       	rjmp	.+18     	; 0x1750 <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTC :
			DDRC = Copy_u8PortDirection;
    173e:	e4 e3       	ldi	r30, 0x34	; 52
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	80 83       	st	Z, r24
    1746:	04 c0       	rjmp	.+8      	; 0x1750 <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTD :
			DDRD = Copy_u8PortDirection;
    1748:	e1 e3       	ldi	r30, 0x31	; 49
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	80 83       	st	Z, r24
	}
	else
	{
		//Invalid Port direction given
	}
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <MDIO_SetPinDirection>:

void MDIO_SetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PortNumber, u8 Copy_u8PinDirection)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	00 d0       	rcall	.+0      	; 0x1764 <MDIO_SetPinDirection+0x6>
    1764:	00 d0       	rcall	.+0      	; 0x1766 <MDIO_SetPinDirection+0x8>
    1766:	0f 92       	push	r0
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	6a 83       	std	Y+2, r22	; 0x02
    1770:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	88 30       	cpi	r24, 0x08	; 8
    1776:	08 f0       	brcs	.+2      	; 0x177a <MDIO_SetPinDirection+0x1c>
    1778:	e0 c0       	rjmp	.+448    	; 0x193a <MDIO_SetPinDirection+0x1dc>
	{
		switch(Copy_u8PortNumber)
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	3d 83       	std	Y+5, r19	; 0x05
    1782:	2c 83       	std	Y+4, r18	; 0x04
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	91 05       	cpc	r25, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <MDIO_SetPinDirection+0x32>
    178e:	47 c0       	rjmp	.+142    	; 0x181e <MDIO_SetPinDirection+0xc0>
    1790:	2c 81       	ldd	r18, Y+4	; 0x04
    1792:	3d 81       	ldd	r19, Y+5	; 0x05
    1794:	22 30       	cpi	r18, 0x02	; 2
    1796:	31 05       	cpc	r19, r1
    1798:	2c f4       	brge	.+10     	; 0x17a4 <MDIO_SetPinDirection+0x46>
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	9d 81       	ldd	r25, Y+5	; 0x05
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	71 f0       	breq	.+28     	; 0x17be <MDIO_SetPinDirection+0x60>
    17a2:	cb c0       	rjmp	.+406    	; 0x193a <MDIO_SetPinDirection+0x1dc>
    17a4:	2c 81       	ldd	r18, Y+4	; 0x04
    17a6:	3d 81       	ldd	r19, Y+5	; 0x05
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <MDIO_SetPinDirection+0x52>
    17ae:	67 c0       	rjmp	.+206    	; 0x187e <MDIO_SetPinDirection+0x120>
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	9d 81       	ldd	r25, Y+5	; 0x05
    17b4:	83 30       	cpi	r24, 0x03	; 3
    17b6:	91 05       	cpc	r25, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <MDIO_SetPinDirection+0x5e>
    17ba:	91 c0       	rjmp	.+290    	; 0x18de <MDIO_SetPinDirection+0x180>
    17bc:	be c0       	rjmp	.+380    	; 0x193a <MDIO_SetPinDirection+0x1dc>
		{
		case MDIO_PORTA:
			if(Copy_u8PinDirection == PIN_OUTPUT)
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	a1 f4       	brne	.+40     	; 0x17ec <MDIO_SetPinDirection+0x8e>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    17c4:	aa e3       	ldi	r26, 0x3A	; 58
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	ea e3       	ldi	r30, 0x3A	; 58
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <MDIO_SetPinDirection+0x84>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <MDIO_SetPinDirection+0x80>
    17e6:	84 2b       	or	r24, r20
    17e8:	8c 93       	st	X, r24
    17ea:	a7 c0       	rjmp	.+334    	; 0x193a <MDIO_SetPinDirection+0x1dc>
			}
			else if(Copy_u8PinDirection == PIN_INPUT)
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	88 23       	and	r24, r24
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <MDIO_SetPinDirection+0x96>
    17f2:	a3 c0       	rjmp	.+326    	; 0x193a <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    17f4:	aa e3       	ldi	r26, 0x3A	; 58
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	ea e3       	ldi	r30, 0x3A	; 58
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <MDIO_SetPinDirection+0xb4>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <MDIO_SetPinDirection+0xb0>
    1816:	80 95       	com	r24
    1818:	84 23       	and	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	8e c0       	rjmp	.+284    	; 0x193a <MDIO_SetPinDirection+0x1dc>
			{
				//invalid pin direction
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinDirection == PIN_OUTPUT)
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	a1 f4       	brne	.+40     	; 0x184c <MDIO_SetPinDirection+0xee>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    1824:	a7 e3       	ldi	r26, 0x37	; 55
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e7 e3       	ldi	r30, 0x37	; 55
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <MDIO_SetPinDirection+0xe4>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <MDIO_SetPinDirection+0xe0>
    1846:	84 2b       	or	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	77 c0       	rjmp	.+238    	; 0x193a <MDIO_SetPinDirection+0x1dc>
			}
			else if(Copy_u8PinDirection == PIN_INPUT)
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	88 23       	and	r24, r24
    1850:	09 f0       	breq	.+2      	; 0x1854 <MDIO_SetPinDirection+0xf6>
    1852:	73 c0       	rjmp	.+230    	; 0x193a <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    1854:	a7 e3       	ldi	r26, 0x37	; 55
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e7 e3       	ldi	r30, 0x37	; 55
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <MDIO_SetPinDirection+0x114>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <MDIO_SetPinDirection+0x110>
    1876:	80 95       	com	r24
    1878:	84 23       	and	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	5e c0       	rjmp	.+188    	; 0x193a <MDIO_SetPinDirection+0x1dc>
			{
				//invalid pin direction
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinDirection == PIN_OUTPUT)
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	a1 f4       	brne	.+40     	; 0x18ac <MDIO_SetPinDirection+0x14e>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    1884:	a4 e3       	ldi	r26, 0x34	; 52
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e4 e3       	ldi	r30, 0x34	; 52
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <MDIO_SetPinDirection+0x144>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <MDIO_SetPinDirection+0x140>
    18a6:	84 2b       	or	r24, r20
    18a8:	8c 93       	st	X, r24
    18aa:	47 c0       	rjmp	.+142    	; 0x193a <MDIO_SetPinDirection+0x1dc>
			}
			else if(Copy_u8PinDirection == PIN_INPUT)
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	88 23       	and	r24, r24
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <MDIO_SetPinDirection+0x156>
    18b2:	43 c0       	rjmp	.+134    	; 0x193a <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    18b4:	a4 e3       	ldi	r26, 0x34	; 52
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e4 e3       	ldi	r30, 0x34	; 52
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 2e       	mov	r0, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <MDIO_SetPinDirection+0x174>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	0a 94       	dec	r0
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <MDIO_SetPinDirection+0x170>
    18d6:	80 95       	com	r24
    18d8:	84 23       	and	r24, r20
    18da:	8c 93       	st	X, r24
    18dc:	2e c0       	rjmp	.+92     	; 0x193a <MDIO_SetPinDirection+0x1dc>
			{
				//invalid pin direction
			}
			break;
		case MDIO_PORTD:
			if(Copy_u8PinDirection == PIN_OUTPUT)
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	a1 f4       	brne	.+40     	; 0x190c <MDIO_SetPinDirection+0x1ae>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    18e4:	a1 e3       	ldi	r26, 0x31	; 49
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e1 e3       	ldi	r30, 0x31	; 49
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	48 2f       	mov	r20, r24
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	02 2e       	mov	r0, r18
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <MDIO_SetPinDirection+0x1a4>
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	0a 94       	dec	r0
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <MDIO_SetPinDirection+0x1a0>
    1906:	84 2b       	or	r24, r20
    1908:	8c 93       	st	X, r24
    190a:	17 c0       	rjmp	.+46     	; 0x193a <MDIO_SetPinDirection+0x1dc>
			}
			else if(Copy_u8PinDirection == PIN_INPUT)
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	88 23       	and	r24, r24
    1910:	a1 f4       	brne	.+40     	; 0x193a <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    1912:	a1 e3       	ldi	r26, 0x31	; 49
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e1 e3       	ldi	r30, 0x31	; 49
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <MDIO_SetPinDirection+0x1d2>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <MDIO_SetPinDirection+0x1ce>
    1934:	80 95       	com	r24
    1936:	84 23       	and	r24, r20
    1938:	8c 93       	st	X, r24
	}
	else
	{
		//wrong pin number
	}
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <MDIO_SetPortValue>:

void MDIO_SetPortValue(u8 Copy_u8PortNumber, u8 Copy_u8PortValue)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <MDIO_SetPortValue+0x6>
    1950:	00 d0       	rcall	.+0      	; 0x1952 <MDIO_SetPortValue+0x8>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PortValue <= PORT_HIGH)&&(Copy_u8PortValue >= PORT_LOW))
	{
		switch(Copy_u8PortNumber)
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	3c 83       	std	Y+4, r19	; 0x04
    1962:	2b 83       	std	Y+3, r18	; 0x03
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	91 05       	cpc	r25, r1
    196c:	d1 f0       	breq	.+52     	; 0x19a2 <MDIO_SetPortValue+0x58>
    196e:	2b 81       	ldd	r18, Y+3	; 0x03
    1970:	3c 81       	ldd	r19, Y+4	; 0x04
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	2c f4       	brge	.+10     	; 0x1982 <MDIO_SetPortValue+0x38>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	61 f0       	breq	.+24     	; 0x1998 <MDIO_SetPortValue+0x4e>
    1980:	1e c0       	rjmp	.+60     	; 0x19be <MDIO_SetPortValue+0x74>
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	81 f0       	breq	.+32     	; 0x19ac <MDIO_SetPortValue+0x62>
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	83 30       	cpi	r24, 0x03	; 3
    1992:	91 05       	cpc	r25, r1
    1994:	81 f0       	breq	.+32     	; 0x19b6 <MDIO_SetPortValue+0x6c>
    1996:	13 c0       	rjmp	.+38     	; 0x19be <MDIO_SetPortValue+0x74>
		{
		case MDIO_PORTA :
			PORTA = Copy_u8PortValue;
    1998:	eb e3       	ldi	r30, 0x3B	; 59
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	80 83       	st	Z, r24
    19a0:	0e c0       	rjmp	.+28     	; 0x19be <MDIO_SetPortValue+0x74>
			break;
		case MDIO_PORTB :
			PORTB = Copy_u8PortValue;
    19a2:	e8 e3       	ldi	r30, 0x38	; 56
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	80 83       	st	Z, r24
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <MDIO_SetPortValue+0x74>
			break;
		case MDIO_PORTC :
			PORTC = Copy_u8PortValue;
    19ac:	e5 e3       	ldi	r30, 0x35	; 53
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	80 83       	st	Z, r24
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <MDIO_SetPortValue+0x74>
			break;
		case MDIO_PORTD :
			PORTD = Copy_u8PortValue;
    19b6:	e2 e3       	ldi	r30, 0x32	; 50
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	80 83       	st	Z, r24
	}
	else
	{
		//Invalid Port value
	}
}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <MDIO_SetPinValue>:

void MDIO_SetPinValue(u8 Copy_u8PinNumber, u8 Copy_u8PortNumber, u8 Copy_u8PinValue)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <MDIO_SetPinValue+0x6>
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <MDIO_SetPinValue+0x8>
    19d4:	0f 92       	push	r0
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	6a 83       	std	Y+2, r22	; 0x02
    19de:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	88 30       	cpi	r24, 0x08	; 8
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <MDIO_SetPinValue+0x1c>
    19e6:	e0 c0       	rjmp	.+448    	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
	{
		switch(Copy_u8PortNumber)
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	3d 83       	std	Y+5, r19	; 0x05
    19f0:	2c 83       	std	Y+4, r18	; 0x04
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	9d 81       	ldd	r25, Y+5	; 0x05
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	91 05       	cpc	r25, r1
    19fa:	09 f4       	brne	.+2      	; 0x19fe <MDIO_SetPinValue+0x32>
    19fc:	47 c0       	rjmp	.+142    	; 0x1a8c <MDIO_SetPinValue+0xc0>
    19fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1a00:	3d 81       	ldd	r19, Y+5	; 0x05
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	2c f4       	brge	.+10     	; 0x1a12 <MDIO_SetPinValue+0x46>
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	71 f0       	breq	.+28     	; 0x1a2c <MDIO_SetPinValue+0x60>
    1a10:	cb c0       	rjmp	.+406    	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
    1a12:	2c 81       	ldd	r18, Y+4	; 0x04
    1a14:	3d 81       	ldd	r19, Y+5	; 0x05
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <MDIO_SetPinValue+0x52>
    1a1c:	67 c0       	rjmp	.+206    	; 0x1aec <MDIO_SetPinValue+0x120>
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	9d 81       	ldd	r25, Y+5	; 0x05
    1a22:	83 30       	cpi	r24, 0x03	; 3
    1a24:	91 05       	cpc	r25, r1
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <MDIO_SetPinValue+0x5e>
    1a28:	91 c0       	rjmp	.+290    	; 0x1b4c <MDIO_SetPinValue+0x180>
    1a2a:	be c0       	rjmp	.+380    	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
		{
		case MDIO_PORTA:
			if(Copy_u8PinValue == PIN_HIGH)
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	a1 f4       	brne	.+40     	; 0x1a5a <MDIO_SetPinValue+0x8e>
			{
				SET_BIT(PORTA,Copy_u8PinNumber);
    1a32:	ab e3       	ldi	r26, 0x3B	; 59
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	eb e3       	ldi	r30, 0x3B	; 59
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <MDIO_SetPinValue+0x84>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <MDIO_SetPinValue+0x80>
    1a54:	84 2b       	or	r24, r20
    1a56:	8c 93       	st	X, r24
    1a58:	a7 c0       	rjmp	.+334    	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
			}
			else if(Copy_u8PinValue == PIN_LOW)
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	88 23       	and	r24, r24
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <MDIO_SetPinValue+0x96>
    1a60:	a3 c0       	rjmp	.+326    	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTA,Copy_u8PinNumber);
    1a62:	ab e3       	ldi	r26, 0x3B	; 59
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	eb e3       	ldi	r30, 0x3B	; 59
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <MDIO_SetPinValue+0xb4>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <MDIO_SetPinValue+0xb0>
    1a84:	80 95       	com	r24
    1a86:	84 23       	and	r24, r20
    1a88:	8c 93       	st	X, r24
    1a8a:	8e c0       	rjmp	.+284    	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
			{
				//invalid pin direction
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinValue == PIN_HIGH)
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	a1 f4       	brne	.+40     	; 0x1aba <MDIO_SetPinValue+0xee>
			{
				SET_BIT(PORTB,Copy_u8PinNumber);
    1a92:	a8 e3       	ldi	r26, 0x38	; 56
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e8 e3       	ldi	r30, 0x38	; 56
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <MDIO_SetPinValue+0xe4>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <MDIO_SetPinValue+0xe0>
    1ab4:	84 2b       	or	r24, r20
    1ab6:	8c 93       	st	X, r24
    1ab8:	77 c0       	rjmp	.+238    	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
			}
			else if(Copy_u8PinValue == PIN_LOW)
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	88 23       	and	r24, r24
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <MDIO_SetPinValue+0xf6>
    1ac0:	73 c0       	rjmp	.+230    	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTB,Copy_u8PinNumber);
    1ac2:	a8 e3       	ldi	r26, 0x38	; 56
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e8 e3       	ldi	r30, 0x38	; 56
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <MDIO_SetPinValue+0x114>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <MDIO_SetPinValue+0x110>
    1ae4:	80 95       	com	r24
    1ae6:	84 23       	and	r24, r20
    1ae8:	8c 93       	st	X, r24
    1aea:	5e c0       	rjmp	.+188    	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
			{
				//invalid pin direction
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinValue == PIN_HIGH)
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	a1 f4       	brne	.+40     	; 0x1b1a <MDIO_SetPinValue+0x14e>
			{
				SET_BIT(PORTC,Copy_u8PinNumber);
    1af2:	a5 e3       	ldi	r26, 0x35	; 53
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e5 e3       	ldi	r30, 0x35	; 53
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	48 2f       	mov	r20, r24
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	02 2e       	mov	r0, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <MDIO_SetPinValue+0x144>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	0a 94       	dec	r0
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <MDIO_SetPinValue+0x140>
    1b14:	84 2b       	or	r24, r20
    1b16:	8c 93       	st	X, r24
    1b18:	47 c0       	rjmp	.+142    	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
			}
			else if(Copy_u8PinValue == PIN_LOW)
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	88 23       	and	r24, r24
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <MDIO_SetPinValue+0x156>
    1b20:	43 c0       	rjmp	.+134    	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTC,Copy_u8PinNumber);
    1b22:	a5 e3       	ldi	r26, 0x35	; 53
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e5 e3       	ldi	r30, 0x35	; 53
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2f       	mov	r20, r24
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 2e       	mov	r0, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <MDIO_SetPinValue+0x174>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	0a 94       	dec	r0
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <MDIO_SetPinValue+0x170>
    1b44:	80 95       	com	r24
    1b46:	84 23       	and	r24, r20
    1b48:	8c 93       	st	X, r24
    1b4a:	2e c0       	rjmp	.+92     	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
			{
				//invalid pin direction
			}
			break;
		case MDIO_PORTD:
			if(Copy_u8PinValue == PIN_HIGH)
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	81 30       	cpi	r24, 0x01	; 1
    1b50:	a1 f4       	brne	.+40     	; 0x1b7a <MDIO_SetPinValue+0x1ae>
			{
				SET_BIT(PORTD,Copy_u8PinNumber);
    1b52:	a2 e3       	ldi	r26, 0x32	; 50
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e2 e3       	ldi	r30, 0x32	; 50
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	48 2f       	mov	r20, r24
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 2e       	mov	r0, r18
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <MDIO_SetPinValue+0x1a4>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	0a 94       	dec	r0
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <MDIO_SetPinValue+0x1a0>
    1b74:	84 2b       	or	r24, r20
    1b76:	8c 93       	st	X, r24
    1b78:	17 c0       	rjmp	.+46     	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
			}
			else if(Copy_u8PinValue == PIN_LOW)
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	88 23       	and	r24, r24
    1b7e:	a1 f4       	brne	.+40     	; 0x1ba8 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTD,Copy_u8PinNumber);
    1b80:	a2 e3       	ldi	r26, 0x32	; 50
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e2 e3       	ldi	r30, 0x32	; 50
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <MDIO_SetPinValue+0x1d2>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <MDIO_SetPinValue+0x1ce>
    1ba2:	80 95       	com	r24
    1ba4:	84 23       	and	r24, r20
    1ba6:	8c 93       	st	X, r24
	}
	else
	{
		//Invalid pin number
	}
}
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <MDIO_ReadPortValue>:

void MDIO_ReadPortValue(u8 Copy_u8PortNumber, u8 * P_u8PortReading)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <MDIO_ReadPortValue+0x6>
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <MDIO_ReadPortValue+0x8>
    1bc0:	0f 92       	push	r0
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	7b 83       	std	Y+3, r23	; 0x03
    1bca:	6a 83       	std	Y+2, r22	; 0x02
	if(P_u8PortReading != NULL)
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	d1 f1       	breq	.+116    	; 0x1c48 <MDIO_ReadPortValue+0x90>
	{
		switch(Copy_u8PortNumber)
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	3d 83       	std	Y+5, r19	; 0x05
    1bdc:	2c 83       	std	Y+4, r18	; 0x04
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	9d 81       	ldd	r25, Y+5	; 0x05
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	91 05       	cpc	r25, r1
    1be6:	e1 f0       	breq	.+56     	; 0x1c20 <MDIO_ReadPortValue+0x68>
    1be8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bea:	3d 81       	ldd	r19, Y+5	; 0x05
    1bec:	22 30       	cpi	r18, 0x02	; 2
    1bee:	31 05       	cpc	r19, r1
    1bf0:	2c f4       	brge	.+10     	; 0x1bfc <MDIO_ReadPortValue+0x44>
    1bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	61 f0       	breq	.+24     	; 0x1c12 <MDIO_ReadPortValue+0x5a>
    1bfa:	26 c0       	rjmp	.+76     	; 0x1c48 <MDIO_ReadPortValue+0x90>
    1bfc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bfe:	3d 81       	ldd	r19, Y+5	; 0x05
    1c00:	22 30       	cpi	r18, 0x02	; 2
    1c02:	31 05       	cpc	r19, r1
    1c04:	a1 f0       	breq	.+40     	; 0x1c2e <MDIO_ReadPortValue+0x76>
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0a:	83 30       	cpi	r24, 0x03	; 3
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	b1 f0       	breq	.+44     	; 0x1c3c <MDIO_ReadPortValue+0x84>
    1c10:	1b c0       	rjmp	.+54     	; 0x1c48 <MDIO_ReadPortValue+0x90>
		{
		case MDIO_PORTA:
			*P_u8PortReading = PINA;
    1c12:	e9 e3       	ldi	r30, 0x39	; 57
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	ea 81       	ldd	r30, Y+2	; 0x02
    1c1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c1c:	80 83       	st	Z, r24
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <MDIO_ReadPortValue+0x90>
			break;
		case MDIO_PORTB:
			*P_u8PortReading = PINB;
    1c20:	e6 e3       	ldi	r30, 0x36	; 54
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	ea 81       	ldd	r30, Y+2	; 0x02
    1c28:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2a:	80 83       	st	Z, r24
    1c2c:	0d c0       	rjmp	.+26     	; 0x1c48 <MDIO_ReadPortValue+0x90>
			break;
		case MDIO_PORTC:
			*P_u8PortReading = PINC;
    1c2e:	e3 e3       	ldi	r30, 0x33	; 51
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	ea 81       	ldd	r30, Y+2	; 0x02
    1c36:	fb 81       	ldd	r31, Y+3	; 0x03
    1c38:	80 83       	st	Z, r24
    1c3a:	06 c0       	rjmp	.+12     	; 0x1c48 <MDIO_ReadPortValue+0x90>
			break;
		case MDIO_PORTD:
			*P_u8PortReading = PIND;
    1c3c:	e0 e3       	ldi	r30, 0x30	; 48
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	ea 81       	ldd	r30, Y+2	; 0x02
    1c44:	fb 81       	ldd	r31, Y+3	; 0x03
    1c46:	80 83       	st	Z, r24
	}
	else
	{
		//Invalid address
	}
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <MDIO_ReadPinValue>:

void MDIO_ReadPinValue(u8 Copy_u8PinNumber, u8 Copy_u8PortNumber, u8 * P_u8PinReading)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <MDIO_ReadPinValue+0x6>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <MDIO_ReadPinValue+0x8>
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <MDIO_ReadPinValue+0xa>
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	6a 83       	std	Y+2, r22	; 0x02
    1c6a:	5c 83       	std	Y+4, r21	; 0x04
    1c6c:	4b 83       	std	Y+3, r20	; 0x03
	if(P_u8PinReading != NULL)
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <MDIO_ReadPinValue+0x20>
    1c76:	74 c0       	rjmp	.+232    	; 0x1d60 <MDIO_ReadPinValue+0x108>
	{
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	88 30       	cpi	r24, 0x08	; 8
    1c7c:	08 f0       	brcs	.+2      	; 0x1c80 <MDIO_ReadPinValue+0x28>
    1c7e:	70 c0       	rjmp	.+224    	; 0x1d60 <MDIO_ReadPinValue+0x108>
		{
			switch(Copy_u8PortNumber)
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	3e 83       	std	Y+6, r19	; 0x06
    1c88:	2d 83       	std	Y+5, r18	; 0x05
    1c8a:	4d 81       	ldd	r20, Y+5	; 0x05
    1c8c:	5e 81       	ldd	r21, Y+6	; 0x06
    1c8e:	41 30       	cpi	r20, 0x01	; 1
    1c90:	51 05       	cpc	r21, r1
    1c92:	59 f1       	breq	.+86     	; 0x1cea <MDIO_ReadPinValue+0x92>
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	82 30       	cpi	r24, 0x02	; 2
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	34 f4       	brge	.+12     	; 0x1caa <MDIO_ReadPinValue+0x52>
    1c9e:	2d 81       	ldd	r18, Y+5	; 0x05
    1ca0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ca2:	21 15       	cp	r18, r1
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	69 f0       	breq	.+26     	; 0x1cc2 <MDIO_ReadPinValue+0x6a>
    1ca8:	5b c0       	rjmp	.+182    	; 0x1d60 <MDIO_ReadPinValue+0x108>
    1caa:	4d 81       	ldd	r20, Y+5	; 0x05
    1cac:	5e 81       	ldd	r21, Y+6	; 0x06
    1cae:	42 30       	cpi	r20, 0x02	; 2
    1cb0:	51 05       	cpc	r21, r1
    1cb2:	79 f1       	breq	.+94     	; 0x1d12 <MDIO_ReadPinValue+0xba>
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	83 30       	cpi	r24, 0x03	; 3
    1cba:	91 05       	cpc	r25, r1
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <MDIO_ReadPinValue+0x68>
    1cbe:	3d c0       	rjmp	.+122    	; 0x1d3a <MDIO_ReadPinValue+0xe2>
    1cc0:	4f c0       	rjmp	.+158    	; 0x1d60 <MDIO_ReadPinValue+0x108>
			{
			case MDIO_PORTA :
				*P_u8PinReading = GET_BIT(PINA,Copy_u8PinNumber);
    1cc2:	e9 e3       	ldi	r30, 0x39	; 57
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a9 01       	movw	r20, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <MDIO_ReadPinValue+0x82>
    1cd6:	55 95       	asr	r21
    1cd8:	47 95       	ror	r20
    1cda:	8a 95       	dec	r24
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <MDIO_ReadPinValue+0x7e>
    1cde:	ca 01       	movw	r24, r20
    1ce0:	81 70       	andi	r24, 0x01	; 1
    1ce2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce6:	80 83       	st	Z, r24
    1ce8:	3b c0       	rjmp	.+118    	; 0x1d60 <MDIO_ReadPinValue+0x108>
				break;
			case MDIO_PORTB :
				*P_u8PinReading = GET_BIT(PINB,Copy_u8PinNumber);
    1cea:	e6 e3       	ldi	r30, 0x36	; 54
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a9 01       	movw	r20, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <MDIO_ReadPinValue+0xaa>
    1cfe:	55 95       	asr	r21
    1d00:	47 95       	ror	r20
    1d02:	8a 95       	dec	r24
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <MDIO_ReadPinValue+0xa6>
    1d06:	ca 01       	movw	r24, r20
    1d08:	81 70       	andi	r24, 0x01	; 1
    1d0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d0e:	80 83       	st	Z, r24
    1d10:	27 c0       	rjmp	.+78     	; 0x1d60 <MDIO_ReadPinValue+0x108>
				break;
			case MDIO_PORTC :
				*P_u8PinReading = GET_BIT(PINC,Copy_u8PinNumber);
    1d12:	e3 e3       	ldi	r30, 0x33	; 51
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	88 2f       	mov	r24, r24
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	a9 01       	movw	r20, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <MDIO_ReadPinValue+0xd2>
    1d26:	55 95       	asr	r21
    1d28:	47 95       	ror	r20
    1d2a:	8a 95       	dec	r24
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <MDIO_ReadPinValue+0xce>
    1d2e:	ca 01       	movw	r24, r20
    1d30:	81 70       	andi	r24, 0x01	; 1
    1d32:	eb 81       	ldd	r30, Y+3	; 0x03
    1d34:	fc 81       	ldd	r31, Y+4	; 0x04
    1d36:	80 83       	st	Z, r24
    1d38:	13 c0       	rjmp	.+38     	; 0x1d60 <MDIO_ReadPinValue+0x108>
				break;
			case MDIO_PORTD :
				*P_u8PinReading = GET_BIT(PIND,Copy_u8PinNumber);
    1d3a:	e0 e3       	ldi	r30, 0x30	; 48
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a9 01       	movw	r20, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <MDIO_ReadPinValue+0xfa>
    1d4e:	55 95       	asr	r21
    1d50:	47 95       	ror	r20
    1d52:	8a 95       	dec	r24
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <MDIO_ReadPinValue+0xf6>
    1d56:	ca 01       	movw	r24, r20
    1d58:	81 70       	andi	r24, 0x01	; 1
    1d5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d5e:	80 83       	st	Z, r24
	}
	else
	{
		//Invalid Address
	}
}
    1d60:	26 96       	adiw	r28, 0x06	; 6
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <MDIO_TogglePin>:

void MDIO_TogglePin(u8 Copy_u8PinNumber, u8 Copy_u8PortNumber)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <MDIO_TogglePin+0x6>
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <MDIO_TogglePin+0x8>
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	88 30       	cpi	r24, 0x08	; 8
    1d86:	08 f0       	brcs	.+2      	; 0x1d8a <MDIO_TogglePin+0x18>
    1d88:	6e c0       	rjmp	.+220    	; 0x1e66 <MDIO_TogglePin+0xf4>
	{
		switch(Copy_u8PortNumber)
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	3c 83       	std	Y+4, r19	; 0x04
    1d92:	2b 83       	std	Y+3, r18	; 0x03
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	9c 81       	ldd	r25, Y+4	; 0x04
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	49 f1       	breq	.+82     	; 0x1df0 <MDIO_TogglePin+0x7e>
    1d9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1da0:	3c 81       	ldd	r19, Y+4	; 0x04
    1da2:	22 30       	cpi	r18, 0x02	; 2
    1da4:	31 05       	cpc	r19, r1
    1da6:	2c f4       	brge	.+10     	; 0x1db2 <MDIO_TogglePin+0x40>
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	61 f0       	breq	.+24     	; 0x1dc8 <MDIO_TogglePin+0x56>
    1db0:	5a c0       	rjmp	.+180    	; 0x1e66 <MDIO_TogglePin+0xf4>
    1db2:	2b 81       	ldd	r18, Y+3	; 0x03
    1db4:	3c 81       	ldd	r19, Y+4	; 0x04
    1db6:	22 30       	cpi	r18, 0x02	; 2
    1db8:	31 05       	cpc	r19, r1
    1dba:	71 f1       	breq	.+92     	; 0x1e18 <MDIO_TogglePin+0xa6>
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	83 30       	cpi	r24, 0x03	; 3
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	e9 f1       	breq	.+122    	; 0x1e40 <MDIO_TogglePin+0xce>
    1dc6:	4f c0       	rjmp	.+158    	; 0x1e66 <MDIO_TogglePin+0xf4>
		{
		case MDIO_PORTA :
			TOGGLE_BIT(PORTA,Copy_u8PinNumber);
    1dc8:	ab e3       	ldi	r26, 0x3B	; 59
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	eb e3       	ldi	r30, 0x3B	; 59
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 2e       	mov	r0, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <MDIO_TogglePin+0x74>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <MDIO_TogglePin+0x70>
    1dea:	84 27       	eor	r24, r20
    1dec:	8c 93       	st	X, r24
    1dee:	3b c0       	rjmp	.+118    	; 0x1e66 <MDIO_TogglePin+0xf4>
			break;
		case MDIO_PORTB :
			TOGGLE_BIT(PORTB,Copy_u8PinNumber);
    1df0:	a8 e3       	ldi	r26, 0x38	; 56
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e8 e3       	ldi	r30, 0x38	; 56
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <MDIO_TogglePin+0x9c>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <MDIO_TogglePin+0x98>
    1e12:	84 27       	eor	r24, r20
    1e14:	8c 93       	st	X, r24
    1e16:	27 c0       	rjmp	.+78     	; 0x1e66 <MDIO_TogglePin+0xf4>
			break;
		case MDIO_PORTC :
			TOGGLE_BIT(PORTC,Copy_u8PinNumber);
    1e18:	a5 e3       	ldi	r26, 0x35	; 53
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e3       	ldi	r30, 0x35	; 53
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	48 2f       	mov	r20, r24
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 2e       	mov	r0, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <MDIO_TogglePin+0xc4>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0a 94       	dec	r0
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <MDIO_TogglePin+0xc0>
    1e3a:	84 27       	eor	r24, r20
    1e3c:	8c 93       	st	X, r24
    1e3e:	13 c0       	rjmp	.+38     	; 0x1e66 <MDIO_TogglePin+0xf4>
			break;
		case MDIO_PORTD :
			TOGGLE_BIT(PORTD,Copy_u8PinNumber);
    1e40:	a2 e3       	ldi	r26, 0x32	; 50
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e2 e3       	ldi	r30, 0x32	; 50
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	48 2f       	mov	r20, r24
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 2e       	mov	r0, r18
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <MDIO_TogglePin+0xec>
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	0a 94       	dec	r0
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <MDIO_TogglePin+0xe8>
    1e62:	84 27       	eor	r24, r20
    1e64:	8c 93       	st	X, r24
	}
	else
	{
		//Invalid pin number
	}
}
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <MDIO_SetNibbleValue>:

void MDIO_SetNibbleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <MDIO_SetNibbleValue+0x6>
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <MDIO_SetNibbleValue+0x8>
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <MDIO_SetNibbleValue+0xa>
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	8a 83       	std	Y+2, r24	; 0x02
    1e84:	6b 83       	std	Y+3, r22	; 0x03
    1e86:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Value = 0;
    1e88:	19 82       	std	Y+1, r1	; 0x01
	Loc_u8Value = Copy_u8Value;
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	89 83       	std	Y+1, r24	; 0x01

	//handling the value
	Loc_u8Value = ((Loc_u8Value & (0x0F)) << Copy_u8PinStart);
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9c 01       	movw	r18, r24
    1e96:	2f 70       	andi	r18, 0x0F	; 15
    1e98:	30 70       	andi	r19, 0x00	; 0
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a9 01       	movw	r20, r18
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <MDIO_SetNibbleValue+0x34>
    1ea4:	44 0f       	add	r20, r20
    1ea6:	55 1f       	adc	r21, r21
    1ea8:	8a 95       	dec	r24
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <MDIO_SetNibbleValue+0x30>
    1eac:	ca 01       	movw	r24, r20
    1eae:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PinStart <= 4)&&(Copy_u8PinStart >0))
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	85 30       	cpi	r24, 0x05	; 5
    1eb4:	08 f0       	brcs	.+2      	; 0x1eb8 <MDIO_SetNibbleValue+0x44>
    1eb6:	99 c0       	rjmp	.+306    	; 0x1fea <MDIO_SetNibbleValue+0x176>
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	88 23       	and	r24, r24
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <MDIO_SetNibbleValue+0x4c>
    1ebe:	95 c0       	rjmp	.+298    	; 0x1fea <MDIO_SetNibbleValue+0x176>
	{
		switch(Copy_u8PortNumber)
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	3e 83       	std	Y+6, r19	; 0x06
    1ec8:	2d 83       	std	Y+5, r18	; 0x05
    1eca:	4d 81       	ldd	r20, Y+5	; 0x05
    1ecc:	5e 81       	ldd	r21, Y+6	; 0x06
    1ece:	41 30       	cpi	r20, 0x01	; 1
    1ed0:	51 05       	cpc	r21, r1
    1ed2:	a9 f1       	breq	.+106    	; 0x1f3e <MDIO_SetNibbleValue+0xca>
    1ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed8:	82 30       	cpi	r24, 0x02	; 2
    1eda:	91 05       	cpc	r25, r1
    1edc:	34 f4       	brge	.+12     	; 0x1eea <MDIO_SetNibbleValue+0x76>
    1ede:	2d 81       	ldd	r18, Y+5	; 0x05
    1ee0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ee2:	21 15       	cp	r18, r1
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	71 f0       	breq	.+28     	; 0x1f04 <MDIO_SetNibbleValue+0x90>
    1ee8:	80 c0       	rjmp	.+256    	; 0x1fea <MDIO_SetNibbleValue+0x176>
    1eea:	4d 81       	ldd	r20, Y+5	; 0x05
    1eec:	5e 81       	ldd	r21, Y+6	; 0x06
    1eee:	42 30       	cpi	r20, 0x02	; 2
    1ef0:	51 05       	cpc	r21, r1
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <MDIO_SetNibbleValue+0x82>
    1ef4:	41 c0       	rjmp	.+130    	; 0x1f78 <MDIO_SetNibbleValue+0x104>
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    1efa:	83 30       	cpi	r24, 0x03	; 3
    1efc:	91 05       	cpc	r25, r1
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <MDIO_SetNibbleValue+0x8e>
    1f00:	58 c0       	rjmp	.+176    	; 0x1fb2 <MDIO_SetNibbleValue+0x13e>
    1f02:	73 c0       	rjmp	.+230    	; 0x1fea <MDIO_SetNibbleValue+0x176>
		{
		case MDIO_PORTA:
			//Mask PORT A
			PORTA &= (~((0x0F)<<Copy_u8PinStart));
    1f04:	ab e3       	ldi	r26, 0x3B	; 59
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	eb e3       	ldi	r30, 0x3B	; 59
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	48 2f       	mov	r20, r24
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	8f e0       	ldi	r24, 0x0F	; 15
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	02 2e       	mov	r0, r18
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <MDIO_SetNibbleValue+0xae>
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	0a 94       	dec	r0
    1f24:	e2 f7       	brpl	.-8      	; 0x1f1e <MDIO_SetNibbleValue+0xaa>
    1f26:	80 95       	com	r24
    1f28:	84 23       	and	r24, r20
    1f2a:	8c 93       	st	X, r24
			PORTA |= Loc_u8Value;
    1f2c:	ab e3       	ldi	r26, 0x3B	; 59
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	eb e3       	ldi	r30, 0x3B	; 59
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	90 81       	ld	r25, Z
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	89 2b       	or	r24, r25
    1f3a:	8c 93       	st	X, r24
    1f3c:	56 c0       	rjmp	.+172    	; 0x1fea <MDIO_SetNibbleValue+0x176>
			break;

		case MDIO_PORTB:
			PORTB &= (~((0x0F)<<Copy_u8PinStart));
    1f3e:	a8 e3       	ldi	r26, 0x38	; 56
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e8 e3       	ldi	r30, 0x38	; 56
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	48 2f       	mov	r20, r24
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	8f e0       	ldi	r24, 0x0F	; 15
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	02 2e       	mov	r0, r18
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <MDIO_SetNibbleValue+0xe8>
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	0a 94       	dec	r0
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <MDIO_SetNibbleValue+0xe4>
    1f60:	80 95       	com	r24
    1f62:	84 23       	and	r24, r20
    1f64:	8c 93       	st	X, r24
			PORTB |= Loc_u8Value;
    1f66:	a8 e3       	ldi	r26, 0x38	; 56
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e8 e3       	ldi	r30, 0x38	; 56
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	90 81       	ld	r25, Z
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	89 2b       	or	r24, r25
    1f74:	8c 93       	st	X, r24
    1f76:	39 c0       	rjmp	.+114    	; 0x1fea <MDIO_SetNibbleValue+0x176>
			break;

		case MDIO_PORTC:
			PORTC &= (~((0x0F)<<Copy_u8PinStart));
    1f78:	a5 e3       	ldi	r26, 0x35	; 53
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e5 e3       	ldi	r30, 0x35	; 53
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	48 2f       	mov	r20, r24
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	8f e0       	ldi	r24, 0x0F	; 15
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	02 2e       	mov	r0, r18
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <MDIO_SetNibbleValue+0x122>
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	0a 94       	dec	r0
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <MDIO_SetNibbleValue+0x11e>
    1f9a:	80 95       	com	r24
    1f9c:	84 23       	and	r24, r20
    1f9e:	8c 93       	st	X, r24
			PORTC |= Loc_u8Value;
    1fa0:	a5 e3       	ldi	r26, 0x35	; 53
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e5 e3       	ldi	r30, 0x35	; 53
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	90 81       	ld	r25, Z
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	89 2b       	or	r24, r25
    1fae:	8c 93       	st	X, r24
    1fb0:	1c c0       	rjmp	.+56     	; 0x1fea <MDIO_SetNibbleValue+0x176>
			break;

		case MDIO_PORTD:
			PORTD &= (~((0x0F)<<Copy_u8PinStart));
    1fb2:	a2 e3       	ldi	r26, 0x32	; 50
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e2 e3       	ldi	r30, 0x32	; 50
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	48 2f       	mov	r20, r24
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	8f e0       	ldi	r24, 0x0F	; 15
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	02 2e       	mov	r0, r18
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <MDIO_SetNibbleValue+0x15c>
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	0a 94       	dec	r0
    1fd2:	e2 f7       	brpl	.-8      	; 0x1fcc <MDIO_SetNibbleValue+0x158>
    1fd4:	80 95       	com	r24
    1fd6:	84 23       	and	r24, r20
    1fd8:	8c 93       	st	X, r24
			PORTD |= Loc_u8Value;
    1fda:	a2 e3       	ldi	r26, 0x32	; 50
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e2 e3       	ldi	r30, 0x32	; 50
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	90 81       	ld	r25, Z
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	89 2b       	or	r24, r25
    1fe8:	8c 93       	st	X, r24
	}
	else
	{

	}
}
    1fea:	26 96       	adiw	r28, 0x06	; 6
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <MADC_Init>:
 * 3-Poll on ADIF
 * 4-Return ADC value
 */

void MADC_Init(void)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	//Set Vreference
#if MADC_SET_VREF == VREF_AREF_PIN
	CLR_BIT(ADMUX,6);
	CLR_BIT(ADMUX,7);
#elif MADC_SET_VREF == VREF_AVCC_PIN
	SET_BIT(ADMUX,6);
    2004:	a7 e2       	ldi	r26, 0x27	; 39
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e7 e2       	ldi	r30, 0x27	; 39
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	80 64       	ori	r24, 0x40	; 64
    2010:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    2012:	a7 e2       	ldi	r26, 0x27	; 39
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e7 e2       	ldi	r30, 0x27	; 39
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	8f 77       	andi	r24, 0x7F	; 127
    201e:	8c 93       	st	X, r24
#elif MADC_SET_PRESCALAR==PRESCALER_DIVIDE_BY_8
	SET_BIT(ADCSRA,0);
	SET_BIT(ADCSRA,1);
	CLR_BIT(ADCSRA,2);
#elif MADC_SET_PRESCALAR==PRESCALER_DIVIDE_BY_16
	CLR_BIT(ADCSRA,0);
    2020:	a6 e2       	ldi	r26, 0x26	; 38
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e6 e2       	ldi	r30, 0x26	; 38
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	8e 7f       	andi	r24, 0xFE	; 254
    202c:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,1);
    202e:	a6 e2       	ldi	r26, 0x26	; 38
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e6 e2       	ldi	r30, 0x26	; 38
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	8d 7f       	andi	r24, 0xFD	; 253
    203a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
    203c:	a6 e2       	ldi	r26, 0x26	; 38
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e6 e2       	ldi	r30, 0x26	; 38
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	84 60       	ori	r24, 0x04	; 4
    2048:	8c 93       	st	X, r24
	#error"Wrong prescalar Chosen"
#endif

//Level/Adjust
#if MADC_SET_ADJUST_LEVEL==MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    204a:	a7 e2       	ldi	r26, 0x27	; 39
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e7 e2       	ldi	r30, 0x27	; 39
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	8f 7d       	andi	r24, 0xDF	; 223
    2056:	8c 93       	st	X, r24
#elif MADC_SET_ADJUST_LEVEL==MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#endif

/*Enable ADC*/
SET_BIT(ADCSRA,7);
    2058:	a6 e2       	ldi	r26, 0x26	; 38
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e6 e2       	ldi	r30, 0x26	; 38
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	80 68       	ori	r24, 0x80	; 128
    2064:	8c 93       	st	X, r24
}
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <MADC_StartConversion>:

u16 MADC_StartConversion(u8 Copy_u8ADC_Channel)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <MADC_StartConversion+0x6>
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	8a 83       	std	Y+2, r24	; 0x02
	//Set Channel
	u8 Loc_u8ADC_Channel =Copy_u8ADC_Channel&MADC_CHANNEL_INPUT_MASK;
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	8f 71       	andi	r24, 0x1F	; 31
    207c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_ADMUX_REG_MASK;
    207e:	a7 e2       	ldi	r26, 0x27	; 39
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e7 e2       	ldi	r30, 0x27	; 39
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	80 7e       	andi	r24, 0xE0	; 224
    208a:	8c 93       	st	X, r24
	ADMUX|=Loc_u8ADC_Channel;
    208c:	a7 e2       	ldi	r26, 0x27	; 39
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e7 e2       	ldi	r30, 0x27	; 39
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	90 81       	ld	r25, Z
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	89 2b       	or	r24, r25
    209a:	8c 93       	st	X, r24

	//Start Conversion
	SET_BIT(ADCSRA,6);
    209c:	a6 e2       	ldi	r26, 0x26	; 38
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e6 e2       	ldi	r30, 0x26	; 38
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 64       	ori	r24, 0x40	; 64
    20a8:	8c 93       	st	X, r24

	//Poll on the Flag
	while(GET_BIT(ADCSRA,4)==0);
    20aa:	e6 e2       	ldi	r30, 0x26	; 38
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	82 95       	swap	r24
    20b2:	8f 70       	andi	r24, 0x0F	; 15
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	81 70       	andi	r24, 0x01	; 1
    20ba:	90 70       	andi	r25, 0x00	; 0
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	a9 f3       	breq	.-22     	; 0x20aa <MADC_StartConversion+0x3e>

	//Conversion finished
	return ADC;
    20c0:	e4 e2       	ldi	r30, 0x24	; 36
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
}
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <US_EXTI_RECEIVE>:
//static u8 GLOB_TCNT_NUM = 0;
u16 GLOB_On_Time = 0; 
u16 GLOB_DIS = 0;
	
void US_EXTI_RECEIVE()
{	
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	68 97       	sbiw	r28, 0x18	; 24
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
	if (GLOB_Rising_Detect == 1)
    20e6:	80 91 75 00 	lds	r24, 0x0075
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	79 f4       	brne	.+30     	; 0x210c <US_EXTI_RECEIVE+0x3a>
	{
		MDIO_SetPinValue(PIN2, MDIO_PORTC, PIN_HIGH);
    20ee:	82 e0       	ldi	r24, 0x02	; 2
    20f0:	62 e0       	ldi	r22, 0x02	; 2
    20f2:	41 e0       	ldi	r20, 0x01	; 1
    20f4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
		MTIMER0_SetPreload(0);
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	0e 94 ed 08 	call	0x11da	; 0x11da <MTIMER0_SetPreload>
		MTIMER0_Init();
    20fe:	0e 94 c3 08 	call	0x1186	; 0x1186 <MTIMER0_Init>
		GLOB_Overflow_Counter = 0;
    2102:	10 92 96 00 	sts	0x0096, r1
		GLOB_Rising_Detect = 0;
    2106:	10 92 75 00 	sts	0x0075, r1
    210a:	eb c0       	rjmp	.+470    	; 0x22e2 <US_EXTI_RECEIVE+0x210>
	}
	else if(GLOB_Rising_Detect == 0)
    210c:	80 91 75 00 	lds	r24, 0x0075
    2110:	88 23       	and	r24, r24
    2112:	09 f0       	breq	.+2      	; 0x2116 <US_EXTI_RECEIVE+0x44>
    2114:	e6 c0       	rjmp	.+460    	; 0x22e2 <US_EXTI_RECEIVE+0x210>
	{
		MTIMER0_STOP();
    2116:	0e 94 73 09 	call	0x12e6	; 0x12e6 <MTIMER0_STOP>
		GLOB_On_Time = (u16)TCNT0 + (256*((u16)GLOB_Overflow_Counter));
    211a:	e2 e5       	ldi	r30, 0x52	; 82
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	80 91 96 00 	lds	r24, 0x0096
    2128:	88 2f       	mov	r24, r24
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	98 2f       	mov	r25, r24
    212e:	88 27       	eor	r24, r24
    2130:	82 0f       	add	r24, r18
    2132:	93 1f       	adc	r25, r19
    2134:	90 93 98 00 	sts	0x0098, r25
    2138:	80 93 97 00 	sts	0x0097, r24
		MDIO_SetPinValue(PIN2, MDIO_PORTC, PIN_LOW);
    213c:	82 e0       	ldi	r24, 0x02	; 2
    213e:	62 e0       	ldi	r22, 0x02	; 2
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
		GLOB_Rising_Detect = 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	80 93 75 00 	sts	0x0075, r24
		TCNT0=0;
    214c:	e2 e5       	ldi	r30, 0x52	; 82
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	10 82       	st	Z, r1
		MDIO_SetPinValue(PIN_TRIG,PORT_US,PIN_HIGH);
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	63 e0       	ldi	r22, 0x03	; 3
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a0 e7       	ldi	r26, 0x70	; 112
    2162:	b1 e4       	ldi	r27, 0x41	; 65
    2164:	8d 8b       	std	Y+21, r24	; 0x15
    2166:	9e 8b       	std	Y+22, r25	; 0x16
    2168:	af 8b       	std	Y+23, r26	; 0x17
    216a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    216c:	6d 89       	ldd	r22, Y+21	; 0x15
    216e:	7e 89       	ldd	r23, Y+22	; 0x16
    2170:	8f 89       	ldd	r24, Y+23	; 0x17
    2172:	98 8d       	ldd	r25, Y+24	; 0x18
    2174:	2b ea       	ldi	r18, 0xAB	; 171
    2176:	3a ea       	ldi	r19, 0xAA	; 170
    2178:	4a ea       	ldi	r20, 0xAA	; 170
    217a:	50 e4       	ldi	r21, 0x40	; 64
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	89 8b       	std	Y+17, r24	; 0x11
    2186:	9a 8b       	std	Y+18, r25	; 0x12
    2188:	ab 8b       	std	Y+19, r26	; 0x13
    218a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    218c:	69 89       	ldd	r22, Y+17	; 0x11
    218e:	7a 89       	ldd	r23, Y+18	; 0x12
    2190:	8b 89       	ldd	r24, Y+19	; 0x13
    2192:	9c 89       	ldd	r25, Y+20	; 0x14
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e8       	ldi	r20, 0x80	; 128
    219a:	5f e3       	ldi	r21, 0x3F	; 63
    219c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a0:	88 23       	and	r24, r24
    21a2:	1c f4       	brge	.+6      	; 0x21aa <US_EXTI_RECEIVE+0xd8>
		__ticks = 1;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	88 8b       	std	Y+16, r24	; 0x10
    21a8:	91 c0       	rjmp	.+290    	; 0x22cc <US_EXTI_RECEIVE+0x1fa>
	else if (__tmp > 255)
    21aa:	69 89       	ldd	r22, Y+17	; 0x11
    21ac:	7a 89       	ldd	r23, Y+18	; 0x12
    21ae:	8b 89       	ldd	r24, Y+19	; 0x13
    21b0:	9c 89       	ldd	r25, Y+20	; 0x14
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	4f e7       	ldi	r20, 0x7F	; 127
    21b8:	53 e4       	ldi	r21, 0x43	; 67
    21ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21be:	18 16       	cp	r1, r24
    21c0:	0c f0       	brlt	.+2      	; 0x21c4 <US_EXTI_RECEIVE+0xf2>
    21c2:	7b c0       	rjmp	.+246    	; 0x22ba <US_EXTI_RECEIVE+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    21c4:	6d 89       	ldd	r22, Y+21	; 0x15
    21c6:	7e 89       	ldd	r23, Y+22	; 0x16
    21c8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ca:	98 8d       	ldd	r25, Y+24	; 0x18
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	4a e7       	ldi	r20, 0x7A	; 122
    21d2:	54 e4       	ldi	r21, 0x44	; 68
    21d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	8c 87       	std	Y+12, r24	; 0x0c
    21de:	9d 87       	std	Y+13, r25	; 0x0d
    21e0:	ae 87       	std	Y+14, r26	; 0x0e
    21e2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    21e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    21e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    21ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a e7       	ldi	r20, 0x7A	; 122
    21f2:	55 e4       	ldi	r21, 0x45	; 69
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	88 87       	std	Y+8, r24	; 0x08
    21fe:	99 87       	std	Y+9, r25	; 0x09
    2200:	aa 87       	std	Y+10, r26	; 0x0a
    2202:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2204:	68 85       	ldd	r22, Y+8	; 0x08
    2206:	79 85       	ldd	r23, Y+9	; 0x09
    2208:	8a 85       	ldd	r24, Y+10	; 0x0a
    220a:	9b 85       	ldd	r25, Y+11	; 0x0b
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	2c f4       	brge	.+10     	; 0x2226 <US_EXTI_RECEIVE+0x154>
		__ticks = 1;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9f 83       	std	Y+7, r25	; 0x07
    2222:	8e 83       	std	Y+6, r24	; 0x06
    2224:	3f c0       	rjmp	.+126    	; 0x22a4 <US_EXTI_RECEIVE+0x1d2>
	else if (__tmp > 65535)
    2226:	68 85       	ldd	r22, Y+8	; 0x08
    2228:	79 85       	ldd	r23, Y+9	; 0x09
    222a:	8a 85       	ldd	r24, Y+10	; 0x0a
    222c:	9b 85       	ldd	r25, Y+11	; 0x0b
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	3f ef       	ldi	r19, 0xFF	; 255
    2232:	4f e7       	ldi	r20, 0x7F	; 127
    2234:	57 e4       	ldi	r21, 0x47	; 71
    2236:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    223a:	18 16       	cp	r1, r24
    223c:	4c f5       	brge	.+82     	; 0x2290 <US_EXTI_RECEIVE+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2240:	7d 85       	ldd	r23, Y+13	; 0x0d
    2242:	8e 85       	ldd	r24, Y+14	; 0x0e
    2244:	9f 85       	ldd	r25, Y+15	; 0x0f
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e2       	ldi	r20, 0x20	; 32
    224c:	51 e4       	ldi	r21, 0x41	; 65
    224e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9f 83       	std	Y+7, r25	; 0x07
    2264:	8e 83       	std	Y+6, r24	; 0x06
    2266:	0f c0       	rjmp	.+30     	; 0x2286 <US_EXTI_RECEIVE+0x1b4>
    2268:	80 e9       	ldi	r24, 0x90	; 144
    226a:	91 e0       	ldi	r25, 0x01	; 1
    226c:	9d 83       	std	Y+5, r25	; 0x05
    226e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2270:	8c 81       	ldd	r24, Y+4	; 0x04
    2272:	9d 81       	ldd	r25, Y+5	; 0x05
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <US_EXTI_RECEIVE+0x1a2>
    2278:	9d 83       	std	Y+5, r25	; 0x05
    227a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227c:	8e 81       	ldd	r24, Y+6	; 0x06
    227e:	9f 81       	ldd	r25, Y+7	; 0x07
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	9f 83       	std	Y+7, r25	; 0x07
    2284:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2286:	8e 81       	ldd	r24, Y+6	; 0x06
    2288:	9f 81       	ldd	r25, Y+7	; 0x07
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	69 f7       	brne	.-38     	; 0x2268 <US_EXTI_RECEIVE+0x196>
    228e:	24 c0       	rjmp	.+72     	; 0x22d8 <US_EXTI_RECEIVE+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2290:	68 85       	ldd	r22, Y+8	; 0x08
    2292:	79 85       	ldd	r23, Y+9	; 0x09
    2294:	8a 85       	ldd	r24, Y+10	; 0x0a
    2296:	9b 85       	ldd	r25, Y+11	; 0x0b
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9f 83       	std	Y+7, r25	; 0x07
    22a2:	8e 83       	std	Y+6, r24	; 0x06
    22a4:	8e 81       	ldd	r24, Y+6	; 0x06
    22a6:	9f 81       	ldd	r25, Y+7	; 0x07
    22a8:	9b 83       	std	Y+3, r25	; 0x03
    22aa:	8a 83       	std	Y+2, r24	; 0x02
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	9b 81       	ldd	r25, Y+3	; 0x03
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <US_EXTI_RECEIVE+0x1de>
    22b4:	9b 83       	std	Y+3, r25	; 0x03
    22b6:	8a 83       	std	Y+2, r24	; 0x02
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <US_EXTI_RECEIVE+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22ba:	69 89       	ldd	r22, Y+17	; 0x11
    22bc:	7a 89       	ldd	r23, Y+18	; 0x12
    22be:	8b 89       	ldd	r24, Y+19	; 0x13
    22c0:	9c 89       	ldd	r25, Y+20	; 0x14
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	88 8b       	std	Y+16, r24	; 0x10
    22cc:	88 89       	ldd	r24, Y+16	; 0x10
    22ce:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	8a 95       	dec	r24
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <US_EXTI_RECEIVE+0x200>
    22d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(15);
		MDIO_SetPinValue(PIN_TRIG,PORT_US,PIN_LOW);
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	63 e0       	ldi	r22, 0x03	; 3
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>


	}
}
    22e2:	68 96       	adiw	r28, 0x18	; 24
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <US_OverFlow_Counter>:

void US_OverFlow_Counter()
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
	GLOB_Overflow_Counter++;
    22fc:	80 91 96 00 	lds	r24, 0x0096
    2300:	8f 5f       	subi	r24, 0xFF	; 255
    2302:	80 93 96 00 	sts	0x0096, r24
}
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <US_INIT>:


void US_INIT()
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	a6 97       	sbiw	r28, 0x26	; 38
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
	MDIO_SetPinDirection(PIN2, MDIO_PORTC, PIN_OUTPUT);
    2320:	82 e0       	ldi	r24, 0x02	; 2
    2322:	62 e0       	ldi	r22, 0x02	; 2
    2324:	41 e0       	ldi	r20, 0x01	; 1
    2326:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN_TRIG,PORT_US,PIN_OUTPUT);
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	63 e0       	ldi	r22, 0x03	; 3
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN_ECHO,PORT_US,PIN_INPUT);
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	63 e0       	ldi	r22, 0x03	; 3
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a8 e4       	ldi	r26, 0x48	; 72
    2344:	b2 e4       	ldi	r27, 0x42	; 66
    2346:	8b a3       	std	Y+35, r24	; 0x23
    2348:	9c a3       	std	Y+36, r25	; 0x24
    234a:	ad a3       	std	Y+37, r26	; 0x25
    234c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234e:	6b a1       	ldd	r22, Y+35	; 0x23
    2350:	7c a1       	ldd	r23, Y+36	; 0x24
    2352:	8d a1       	ldd	r24, Y+37	; 0x25
    2354:	9e a1       	ldd	r25, Y+38	; 0x26
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	4a e7       	ldi	r20, 0x7A	; 122
    235c:	55 e4       	ldi	r21, 0x45	; 69
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	8f 8f       	std	Y+31, r24	; 0x1f
    2368:	98 a3       	std	Y+32, r25	; 0x20
    236a:	a9 a3       	std	Y+33, r26	; 0x21
    236c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    236e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2370:	78 a1       	ldd	r23, Y+32	; 0x20
    2372:	89 a1       	ldd	r24, Y+33	; 0x21
    2374:	9a a1       	ldd	r25, Y+34	; 0x22
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e8       	ldi	r20, 0x80	; 128
    237c:	5f e3       	ldi	r21, 0x3F	; 63
    237e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2382:	88 23       	and	r24, r24
    2384:	2c f4       	brge	.+10     	; 0x2390 <US_INIT+0x84>
		__ticks = 1;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9e 8f       	std	Y+30, r25	; 0x1e
    238c:	8d 8f       	std	Y+29, r24	; 0x1d
    238e:	3f c0       	rjmp	.+126    	; 0x240e <US_INIT+0x102>
	else if (__tmp > 65535)
    2390:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2392:	78 a1       	ldd	r23, Y+32	; 0x20
    2394:	89 a1       	ldd	r24, Y+33	; 0x21
    2396:	9a a1       	ldd	r25, Y+34	; 0x22
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	3f ef       	ldi	r19, 0xFF	; 255
    239c:	4f e7       	ldi	r20, 0x7F	; 127
    239e:	57 e4       	ldi	r21, 0x47	; 71
    23a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a4:	18 16       	cp	r1, r24
    23a6:	4c f5       	brge	.+82     	; 0x23fa <US_INIT+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a8:	6b a1       	ldd	r22, Y+35	; 0x23
    23aa:	7c a1       	ldd	r23, Y+36	; 0x24
    23ac:	8d a1       	ldd	r24, Y+37	; 0x25
    23ae:	9e a1       	ldd	r25, Y+38	; 0x26
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e2       	ldi	r20, 0x20	; 32
    23b6:	51 e4       	ldi	r21, 0x41	; 65
    23b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9e 8f       	std	Y+30, r25	; 0x1e
    23ce:	8d 8f       	std	Y+29, r24	; 0x1d
    23d0:	0f c0       	rjmp	.+30     	; 0x23f0 <US_INIT+0xe4>
    23d2:	80 e9       	ldi	r24, 0x90	; 144
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	9c 8f       	std	Y+28, r25	; 0x1c
    23d8:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <US_INIT+0xd2>
    23e2:	9c 8f       	std	Y+28, r25	; 0x1c
    23e4:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	9e 8f       	std	Y+30, r25	; 0x1e
    23ee:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	69 f7       	brne	.-38     	; 0x23d2 <US_INIT+0xc6>
    23f8:	14 c0       	rjmp	.+40     	; 0x2422 <US_INIT+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23fc:	78 a1       	ldd	r23, Y+32	; 0x20
    23fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2400:	9a a1       	ldd	r25, Y+34	; 0x22
    2402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	9e 8f       	std	Y+30, r25	; 0x1e
    240c:	8d 8f       	std	Y+29, r24	; 0x1d
    240e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2410:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2412:	9a 8f       	std	Y+26, r25	; 0x1a
    2414:	89 8f       	std	Y+25, r24	; 0x19
    2416:	89 8d       	ldd	r24, Y+25	; 0x19
    2418:	9a 8d       	ldd	r25, Y+26	; 0x1a
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <US_INIT+0x10e>
    241e:	9a 8f       	std	Y+26, r25	; 0x1a
    2420:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(50);
	
	MEXTII0_Init();
    2422:	0e 94 97 0a 	call	0x152e	; 0x152e <MEXTII0_Init>
	
	MDIO_SetPinValue(PIN_TRIG,PORT_US,PIN_HIGH);
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	63 e0       	ldi	r22, 0x03	; 3
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	a0 e7       	ldi	r26, 0x70	; 112
    2436:	b1 e4       	ldi	r27, 0x41	; 65
    2438:	8d 8b       	std	Y+21, r24	; 0x15
    243a:	9e 8b       	std	Y+22, r25	; 0x16
    243c:	af 8b       	std	Y+23, r26	; 0x17
    243e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2440:	6d 89       	ldd	r22, Y+21	; 0x15
    2442:	7e 89       	ldd	r23, Y+22	; 0x16
    2444:	8f 89       	ldd	r24, Y+23	; 0x17
    2446:	98 8d       	ldd	r25, Y+24	; 0x18
    2448:	2b ea       	ldi	r18, 0xAB	; 171
    244a:	3a ea       	ldi	r19, 0xAA	; 170
    244c:	4a ea       	ldi	r20, 0xAA	; 170
    244e:	50 e4       	ldi	r21, 0x40	; 64
    2450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	89 8b       	std	Y+17, r24	; 0x11
    245a:	9a 8b       	std	Y+18, r25	; 0x12
    245c:	ab 8b       	std	Y+19, r26	; 0x13
    245e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2460:	69 89       	ldd	r22, Y+17	; 0x11
    2462:	7a 89       	ldd	r23, Y+18	; 0x12
    2464:	8b 89       	ldd	r24, Y+19	; 0x13
    2466:	9c 89       	ldd	r25, Y+20	; 0x14
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2474:	88 23       	and	r24, r24
    2476:	1c f4       	brge	.+6      	; 0x247e <US_INIT+0x172>
		__ticks = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	88 8b       	std	Y+16, r24	; 0x10
    247c:	91 c0       	rjmp	.+290    	; 0x25a0 <US_INIT+0x294>
	else if (__tmp > 255)
    247e:	69 89       	ldd	r22, Y+17	; 0x11
    2480:	7a 89       	ldd	r23, Y+18	; 0x12
    2482:	8b 89       	ldd	r24, Y+19	; 0x13
    2484:	9c 89       	ldd	r25, Y+20	; 0x14
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	4f e7       	ldi	r20, 0x7F	; 127
    248c:	53 e4       	ldi	r21, 0x43	; 67
    248e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2492:	18 16       	cp	r1, r24
    2494:	0c f0       	brlt	.+2      	; 0x2498 <US_INIT+0x18c>
    2496:	7b c0       	rjmp	.+246    	; 0x258e <US_INIT+0x282>
	{
		_delay_ms(__us / 1000.0);
    2498:	6d 89       	ldd	r22, Y+21	; 0x15
    249a:	7e 89       	ldd	r23, Y+22	; 0x16
    249c:	8f 89       	ldd	r24, Y+23	; 0x17
    249e:	98 8d       	ldd	r25, Y+24	; 0x18
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	4a e7       	ldi	r20, 0x7A	; 122
    24a6:	54 e4       	ldi	r21, 0x44	; 68
    24a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	8c 87       	std	Y+12, r24	; 0x0c
    24b2:	9d 87       	std	Y+13, r25	; 0x0d
    24b4:	ae 87       	std	Y+14, r26	; 0x0e
    24b6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    24ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    24bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    24be:	9f 85       	ldd	r25, Y+15	; 0x0f
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a e7       	ldi	r20, 0x7A	; 122
    24c6:	55 e4       	ldi	r21, 0x45	; 69
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	88 87       	std	Y+8, r24	; 0x08
    24d2:	99 87       	std	Y+9, r25	; 0x09
    24d4:	aa 87       	std	Y+10, r26	; 0x0a
    24d6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24d8:	68 85       	ldd	r22, Y+8	; 0x08
    24da:	79 85       	ldd	r23, Y+9	; 0x09
    24dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    24de:	9b 85       	ldd	r25, Y+11	; 0x0b
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	5f e3       	ldi	r21, 0x3F	; 63
    24e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	2c f4       	brge	.+10     	; 0x24fa <US_INIT+0x1ee>
		__ticks = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9f 83       	std	Y+7, r25	; 0x07
    24f6:	8e 83       	std	Y+6, r24	; 0x06
    24f8:	3f c0       	rjmp	.+126    	; 0x2578 <US_INIT+0x26c>
	else if (__tmp > 65535)
    24fa:	68 85       	ldd	r22, Y+8	; 0x08
    24fc:	79 85       	ldd	r23, Y+9	; 0x09
    24fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2500:	9b 85       	ldd	r25, Y+11	; 0x0b
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	3f ef       	ldi	r19, 0xFF	; 255
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	57 e4       	ldi	r21, 0x47	; 71
    250a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	4c f5       	brge	.+82     	; 0x2564 <US_INIT+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2512:	6c 85       	ldd	r22, Y+12	; 0x0c
    2514:	7d 85       	ldd	r23, Y+13	; 0x0d
    2516:	8e 85       	ldd	r24, Y+14	; 0x0e
    2518:	9f 85       	ldd	r25, Y+15	; 0x0f
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9f 83       	std	Y+7, r25	; 0x07
    2538:	8e 83       	std	Y+6, r24	; 0x06
    253a:	0f c0       	rjmp	.+30     	; 0x255a <US_INIT+0x24e>
    253c:	80 e9       	ldi	r24, 0x90	; 144
    253e:	91 e0       	ldi	r25, 0x01	; 1
    2540:	9d 83       	std	Y+5, r25	; 0x05
    2542:	8c 83       	std	Y+4, r24	; 0x04
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	9d 81       	ldd	r25, Y+5	; 0x05
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <US_INIT+0x23c>
    254c:	9d 83       	std	Y+5, r25	; 0x05
    254e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2550:	8e 81       	ldd	r24, Y+6	; 0x06
    2552:	9f 81       	ldd	r25, Y+7	; 0x07
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	9f 83       	std	Y+7, r25	; 0x07
    2558:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	8e 81       	ldd	r24, Y+6	; 0x06
    255c:	9f 81       	ldd	r25, Y+7	; 0x07
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	69 f7       	brne	.-38     	; 0x253c <US_INIT+0x230>
    2562:	24 c0       	rjmp	.+72     	; 0x25ac <US_INIT+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2564:	68 85       	ldd	r22, Y+8	; 0x08
    2566:	79 85       	ldd	r23, Y+9	; 0x09
    2568:	8a 85       	ldd	r24, Y+10	; 0x0a
    256a:	9b 85       	ldd	r25, Y+11	; 0x0b
    256c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9f 83       	std	Y+7, r25	; 0x07
    2576:	8e 83       	std	Y+6, r24	; 0x06
    2578:	8e 81       	ldd	r24, Y+6	; 0x06
    257a:	9f 81       	ldd	r25, Y+7	; 0x07
    257c:	9b 83       	std	Y+3, r25	; 0x03
    257e:	8a 83       	std	Y+2, r24	; 0x02
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
    2582:	9b 81       	ldd	r25, Y+3	; 0x03
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <US_INIT+0x278>
    2588:	9b 83       	std	Y+3, r25	; 0x03
    258a:	8a 83       	std	Y+2, r24	; 0x02
    258c:	0f c0       	rjmp	.+30     	; 0x25ac <US_INIT+0x2a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    258e:	69 89       	ldd	r22, Y+17	; 0x11
    2590:	7a 89       	ldd	r23, Y+18	; 0x12
    2592:	8b 89       	ldd	r24, Y+19	; 0x13
    2594:	9c 89       	ldd	r25, Y+20	; 0x14
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	88 8b       	std	Y+16, r24	; 0x10
    25a0:	88 89       	ldd	r24, Y+16	; 0x10
    25a2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	8a 95       	dec	r24
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <US_INIT+0x29a>
    25aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(15);
	MDIO_SetPinValue(PIN_TRIG,PORT_US,PIN_LOW);
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	63 e0       	ldi	r22, 0x03	; 3
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	
	
	MEXTI_Callback1(US_EXTI_RECEIVE);
    25b6:	89 e6       	ldi	r24, 0x69	; 105
    25b8:	90 e1       	ldi	r25, 0x10	; 16
    25ba:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <MEXTI_Callback1>
	MTIMER0_OVERFLOW_CALLBACK(US_OverFlow_Counter);
    25be:	8a e7       	ldi	r24, 0x7A	; 122
    25c0:	91 e1       	ldi	r25, 0x11	; 17
    25c2:	0e 94 09 09 	call	0x1212	; 0x1212 <MTIMER0_OVERFLOW_CALLBACK>
}
    25c6:	a6 96       	adiw	r28, 0x26	; 38
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <HSEVEN_SEG_Init>:
#include "../../LIB/STD_TYPES.H"
#include "../../MCAL/MDIO/MDIO_Interface.h"
#include "HSEVEN_SEG_Interface.h"

void HSEVEN_SEG_Init(SevenSeg_t* Ptr_SevenSegObj)
{
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	00 d0       	rcall	.+0      	; 0x25de <HSEVEN_SEG_Init+0x6>
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01
	//Set Pins output
	MDIO_SetPinDirection(Ptr_SevenSegObj->PinEn,Ptr_SevenSegObj->PinEnPort,PIN_OUTPUT);
    25e6:	e9 81       	ldd	r30, Y+1	; 0x01
    25e8:	fa 81       	ldd	r31, Y+2	; 0x02
    25ea:	81 81       	ldd	r24, Z+1	; 0x01
    25ec:	e9 81       	ldd	r30, Y+1	; 0x01
    25ee:	fa 81       	ldd	r31, Y+2	; 0x02
    25f0:	90 81       	ld	r25, Z
    25f2:	69 2f       	mov	r22, r25
    25f4:	41 e0       	ldi	r20, 0x01	; 1
    25f6:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(Ptr_SevenSegObj->PinA,Ptr_SevenSegObj->PinAPort,PIN_OUTPUT);
    25fa:	e9 81       	ldd	r30, Y+1	; 0x01
    25fc:	fa 81       	ldd	r31, Y+2	; 0x02
    25fe:	83 81       	ldd	r24, Z+3	; 0x03
    2600:	e9 81       	ldd	r30, Y+1	; 0x01
    2602:	fa 81       	ldd	r31, Y+2	; 0x02
    2604:	92 81       	ldd	r25, Z+2	; 0x02
    2606:	69 2f       	mov	r22, r25
    2608:	41 e0       	ldi	r20, 0x01	; 1
    260a:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(Ptr_SevenSegObj->PinB,Ptr_SevenSegObj->PinBPort,PIN_OUTPUT);
    260e:	e9 81       	ldd	r30, Y+1	; 0x01
    2610:	fa 81       	ldd	r31, Y+2	; 0x02
    2612:	85 81       	ldd	r24, Z+5	; 0x05
    2614:	e9 81       	ldd	r30, Y+1	; 0x01
    2616:	fa 81       	ldd	r31, Y+2	; 0x02
    2618:	94 81       	ldd	r25, Z+4	; 0x04
    261a:	69 2f       	mov	r22, r25
    261c:	41 e0       	ldi	r20, 0x01	; 1
    261e:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(Ptr_SevenSegObj->PinC,Ptr_SevenSegObj->PinCPort,PIN_OUTPUT);
    2622:	e9 81       	ldd	r30, Y+1	; 0x01
    2624:	fa 81       	ldd	r31, Y+2	; 0x02
    2626:	87 81       	ldd	r24, Z+7	; 0x07
    2628:	e9 81       	ldd	r30, Y+1	; 0x01
    262a:	fa 81       	ldd	r31, Y+2	; 0x02
    262c:	96 81       	ldd	r25, Z+6	; 0x06
    262e:	69 2f       	mov	r22, r25
    2630:	41 e0       	ldi	r20, 0x01	; 1
    2632:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(Ptr_SevenSegObj->PinD,Ptr_SevenSegObj->PinDPort,PIN_OUTPUT);
    2636:	e9 81       	ldd	r30, Y+1	; 0x01
    2638:	fa 81       	ldd	r31, Y+2	; 0x02
    263a:	81 85       	ldd	r24, Z+9	; 0x09
    263c:	e9 81       	ldd	r30, Y+1	; 0x01
    263e:	fa 81       	ldd	r31, Y+2	; 0x02
    2640:	90 85       	ldd	r25, Z+8	; 0x08
    2642:	69 2f       	mov	r22, r25
    2644:	41 e0       	ldi	r20, 0x01	; 1
    2646:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <HSEVEN_SEG_SetMode>:

void HSEVEN_SEG_SetMode(SevenSeg_t* Ptr_SevenSegObj,u8 Copy_u8SevenSegMode)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	00 d0       	rcall	.+0      	; 0x265a <HSEVEN_SEG_SetMode+0x6>
    265a:	0f 92       	push	r0
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	9a 83       	std	Y+2, r25	; 0x02
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_u8SevenSegMode == SEVEN_SEG_ON)
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	81 30       	cpi	r24, 0x01	; 1
    266a:	59 f4       	brne	.+22     	; 0x2682 <HSEVEN_SEG_SetMode+0x2e>
	{
		MDIO_SetPinValue(Ptr_SevenSegObj->PinEn,Ptr_SevenSegObj->PinEnPort,PIN_HIGH);
    266c:	e9 81       	ldd	r30, Y+1	; 0x01
    266e:	fa 81       	ldd	r31, Y+2	; 0x02
    2670:	81 81       	ldd	r24, Z+1	; 0x01
    2672:	e9 81       	ldd	r30, Y+1	; 0x01
    2674:	fa 81       	ldd	r31, Y+2	; 0x02
    2676:	90 81       	ld	r25, Z
    2678:	69 2f       	mov	r22, r25
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    2680:	0d c0       	rjmp	.+26     	; 0x269c <HSEVEN_SEG_SetMode+0x48>
	}
	else if(Copy_u8SevenSegMode == SEVEN_SEG_OFF)
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	88 23       	and	r24, r24
    2686:	51 f4       	brne	.+20     	; 0x269c <HSEVEN_SEG_SetMode+0x48>
	{
		MDIO_SetPinValue(Ptr_SevenSegObj->PinEn,Ptr_SevenSegObj->PinEnPort,PIN_LOW);
    2688:	e9 81       	ldd	r30, Y+1	; 0x01
    268a:	fa 81       	ldd	r31, Y+2	; 0x02
    268c:	81 81       	ldd	r24, Z+1	; 0x01
    268e:	e9 81       	ldd	r30, Y+1	; 0x01
    2690:	fa 81       	ldd	r31, Y+2	; 0x02
    2692:	90 81       	ld	r25, Z
    2694:	69 2f       	mov	r22, r25
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	}
	else
	{
		//wrong mode ordered
	}
}
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <HSEVEN_SEG_Display>:

void HSEVEN_SEG_Display(SevenSeg_t* Ptr_SevenSegObj,u8 Copy_u8SevenSegValue)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <HSEVEN_SEG_Display+0x6>
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <HSEVEN_SEG_Display+0x8>
    26b0:	0f 92       	push	r0
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	9a 83       	std	Y+2, r25	; 0x02
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	6b 83       	std	Y+3, r22	; 0x03
	if((Copy_u8SevenSegValue >= 0)&&(Copy_u8SevenSegValue<10))
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	8a 30       	cpi	r24, 0x0A	; 10
    26c0:	08 f0       	brcs	.+2      	; 0x26c4 <HSEVEN_SEG_Display+0x1c>
    26c2:	eb c1       	rjmp	.+982    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
	{
		switch(Copy_u8SevenSegValue)
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	3d 83       	std	Y+5, r19	; 0x05
    26cc:	2c 83       	std	Y+4, r18	; 0x04
    26ce:	8c 81       	ldd	r24, Y+4	; 0x04
    26d0:	9d 81       	ldd	r25, Y+5	; 0x05
    26d2:	84 30       	cpi	r24, 0x04	; 4
    26d4:	91 05       	cpc	r25, r1
    26d6:	09 f4       	brne	.+2      	; 0x26da <HSEVEN_SEG_Display+0x32>
    26d8:	eb c0       	rjmp	.+470    	; 0x28b0 <HSEVEN_SEG_Display+0x208>
    26da:	2c 81       	ldd	r18, Y+4	; 0x04
    26dc:	3d 81       	ldd	r19, Y+5	; 0x05
    26de:	25 30       	cpi	r18, 0x05	; 5
    26e0:	31 05       	cpc	r19, r1
    26e2:	ec f4       	brge	.+58     	; 0x271e <HSEVEN_SEG_Display+0x76>
    26e4:	8c 81       	ldd	r24, Y+4	; 0x04
    26e6:	9d 81       	ldd	r25, Y+5	; 0x05
    26e8:	81 30       	cpi	r24, 0x01	; 1
    26ea:	91 05       	cpc	r25, r1
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <HSEVEN_SEG_Display+0x48>
    26ee:	65 c0       	rjmp	.+202    	; 0x27ba <HSEVEN_SEG_Display+0x112>
    26f0:	2c 81       	ldd	r18, Y+4	; 0x04
    26f2:	3d 81       	ldd	r19, Y+5	; 0x05
    26f4:	22 30       	cpi	r18, 0x02	; 2
    26f6:	31 05       	cpc	r19, r1
    26f8:	2c f4       	brge	.+10     	; 0x2704 <HSEVEN_SEG_Display+0x5c>
    26fa:	8c 81       	ldd	r24, Y+4	; 0x04
    26fc:	9d 81       	ldd	r25, Y+5	; 0x05
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	99 f1       	breq	.+102    	; 0x2768 <HSEVEN_SEG_Display+0xc0>
    2702:	cb c1       	rjmp	.+918    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
    2704:	2c 81       	ldd	r18, Y+4	; 0x04
    2706:	3d 81       	ldd	r19, Y+5	; 0x05
    2708:	22 30       	cpi	r18, 0x02	; 2
    270a:	31 05       	cpc	r19, r1
    270c:	09 f4       	brne	.+2      	; 0x2710 <HSEVEN_SEG_Display+0x68>
    270e:	7e c0       	rjmp	.+252    	; 0x280c <HSEVEN_SEG_Display+0x164>
    2710:	8c 81       	ldd	r24, Y+4	; 0x04
    2712:	9d 81       	ldd	r25, Y+5	; 0x05
    2714:	83 30       	cpi	r24, 0x03	; 3
    2716:	91 05       	cpc	r25, r1
    2718:	09 f4       	brne	.+2      	; 0x271c <HSEVEN_SEG_Display+0x74>
    271a:	a1 c0       	rjmp	.+322    	; 0x285e <HSEVEN_SEG_Display+0x1b6>
    271c:	be c1       	rjmp	.+892    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
    271e:	2c 81       	ldd	r18, Y+4	; 0x04
    2720:	3d 81       	ldd	r19, Y+5	; 0x05
    2722:	27 30       	cpi	r18, 0x07	; 7
    2724:	31 05       	cpc	r19, r1
    2726:	09 f4       	brne	.+2      	; 0x272a <HSEVEN_SEG_Display+0x82>
    2728:	3e c1       	rjmp	.+636    	; 0x29a6 <HSEVEN_SEG_Display+0x2fe>
    272a:	8c 81       	ldd	r24, Y+4	; 0x04
    272c:	9d 81       	ldd	r25, Y+5	; 0x05
    272e:	88 30       	cpi	r24, 0x08	; 8
    2730:	91 05       	cpc	r25, r1
    2732:	6c f4       	brge	.+26     	; 0x274e <HSEVEN_SEG_Display+0xa6>
    2734:	2c 81       	ldd	r18, Y+4	; 0x04
    2736:	3d 81       	ldd	r19, Y+5	; 0x05
    2738:	25 30       	cpi	r18, 0x05	; 5
    273a:	31 05       	cpc	r19, r1
    273c:	09 f4       	brne	.+2      	; 0x2740 <HSEVEN_SEG_Display+0x98>
    273e:	e1 c0       	rjmp	.+450    	; 0x2902 <HSEVEN_SEG_Display+0x25a>
    2740:	8c 81       	ldd	r24, Y+4	; 0x04
    2742:	9d 81       	ldd	r25, Y+5	; 0x05
    2744:	86 30       	cpi	r24, 0x06	; 6
    2746:	91 05       	cpc	r25, r1
    2748:	09 f4       	brne	.+2      	; 0x274c <HSEVEN_SEG_Display+0xa4>
    274a:	04 c1       	rjmp	.+520    	; 0x2954 <HSEVEN_SEG_Display+0x2ac>
    274c:	a6 c1       	rjmp	.+844    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
    274e:	2c 81       	ldd	r18, Y+4	; 0x04
    2750:	3d 81       	ldd	r19, Y+5	; 0x05
    2752:	28 30       	cpi	r18, 0x08	; 8
    2754:	31 05       	cpc	r19, r1
    2756:	09 f4       	brne	.+2      	; 0x275a <HSEVEN_SEG_Display+0xb2>
    2758:	4f c1       	rjmp	.+670    	; 0x29f8 <HSEVEN_SEG_Display+0x350>
    275a:	8c 81       	ldd	r24, Y+4	; 0x04
    275c:	9d 81       	ldd	r25, Y+5	; 0x05
    275e:	89 30       	cpi	r24, 0x09	; 9
    2760:	91 05       	cpc	r25, r1
    2762:	09 f4       	brne	.+2      	; 0x2766 <HSEVEN_SEG_Display+0xbe>
    2764:	72 c1       	rjmp	.+740    	; 0x2a4a <HSEVEN_SEG_Display+0x3a2>
    2766:	99 c1       	rjmp	.+818    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
		{
		case 0:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA,Ptr_SevenSegObj->PinAPort,PIN_LOW);
    2768:	e9 81       	ldd	r30, Y+1	; 0x01
    276a:	fa 81       	ldd	r31, Y+2	; 0x02
    276c:	83 81       	ldd	r24, Z+3	; 0x03
    276e:	e9 81       	ldd	r30, Y+1	; 0x01
    2770:	fa 81       	ldd	r31, Y+2	; 0x02
    2772:	92 81       	ldd	r25, Z+2	; 0x02
    2774:	69 2f       	mov	r22, r25
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB,Ptr_SevenSegObj->PinBPort,PIN_LOW);
    277c:	e9 81       	ldd	r30, Y+1	; 0x01
    277e:	fa 81       	ldd	r31, Y+2	; 0x02
    2780:	85 81       	ldd	r24, Z+5	; 0x05
    2782:	e9 81       	ldd	r30, Y+1	; 0x01
    2784:	fa 81       	ldd	r31, Y+2	; 0x02
    2786:	94 81       	ldd	r25, Z+4	; 0x04
    2788:	69 2f       	mov	r22, r25
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC,Ptr_SevenSegObj->PinCPort,PIN_LOW);
    2790:	e9 81       	ldd	r30, Y+1	; 0x01
    2792:	fa 81       	ldd	r31, Y+2	; 0x02
    2794:	87 81       	ldd	r24, Z+7	; 0x07
    2796:	e9 81       	ldd	r30, Y+1	; 0x01
    2798:	fa 81       	ldd	r31, Y+2	; 0x02
    279a:	96 81       	ldd	r25, Z+6	; 0x06
    279c:	69 2f       	mov	r22, r25
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD,Ptr_SevenSegObj->PinDPort,PIN_LOW);
    27a4:	e9 81       	ldd	r30, Y+1	; 0x01
    27a6:	fa 81       	ldd	r31, Y+2	; 0x02
    27a8:	81 85       	ldd	r24, Z+9	; 0x09
    27aa:	e9 81       	ldd	r30, Y+1	; 0x01
    27ac:	fa 81       	ldd	r31, Y+2	; 0x02
    27ae:	90 85       	ldd	r25, Z+8	; 0x08
    27b0:	69 2f       	mov	r22, r25
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    27b8:	70 c1       	rjmp	.+736    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
			break;
		case 1:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA,Ptr_SevenSegObj->PinAPort,PIN_HIGH);
    27ba:	e9 81       	ldd	r30, Y+1	; 0x01
    27bc:	fa 81       	ldd	r31, Y+2	; 0x02
    27be:	83 81       	ldd	r24, Z+3	; 0x03
    27c0:	e9 81       	ldd	r30, Y+1	; 0x01
    27c2:	fa 81       	ldd	r31, Y+2	; 0x02
    27c4:	92 81       	ldd	r25, Z+2	; 0x02
    27c6:	69 2f       	mov	r22, r25
    27c8:	41 e0       	ldi	r20, 0x01	; 1
    27ca:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB,Ptr_SevenSegObj->PinBPort,PIN_LOW);
    27ce:	e9 81       	ldd	r30, Y+1	; 0x01
    27d0:	fa 81       	ldd	r31, Y+2	; 0x02
    27d2:	85 81       	ldd	r24, Z+5	; 0x05
    27d4:	e9 81       	ldd	r30, Y+1	; 0x01
    27d6:	fa 81       	ldd	r31, Y+2	; 0x02
    27d8:	94 81       	ldd	r25, Z+4	; 0x04
    27da:	69 2f       	mov	r22, r25
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC,Ptr_SevenSegObj->PinCPort,PIN_LOW);
    27e2:	e9 81       	ldd	r30, Y+1	; 0x01
    27e4:	fa 81       	ldd	r31, Y+2	; 0x02
    27e6:	87 81       	ldd	r24, Z+7	; 0x07
    27e8:	e9 81       	ldd	r30, Y+1	; 0x01
    27ea:	fa 81       	ldd	r31, Y+2	; 0x02
    27ec:	96 81       	ldd	r25, Z+6	; 0x06
    27ee:	69 2f       	mov	r22, r25
    27f0:	40 e0       	ldi	r20, 0x00	; 0
    27f2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD,Ptr_SevenSegObj->PinDPort,PIN_LOW);
    27f6:	e9 81       	ldd	r30, Y+1	; 0x01
    27f8:	fa 81       	ldd	r31, Y+2	; 0x02
    27fa:	81 85       	ldd	r24, Z+9	; 0x09
    27fc:	e9 81       	ldd	r30, Y+1	; 0x01
    27fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2800:	90 85       	ldd	r25, Z+8	; 0x08
    2802:	69 2f       	mov	r22, r25
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    280a:	47 c1       	rjmp	.+654    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
			break;
		case 2:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA,Ptr_SevenSegObj->PinAPort,PIN_LOW);
    280c:	e9 81       	ldd	r30, Y+1	; 0x01
    280e:	fa 81       	ldd	r31, Y+2	; 0x02
    2810:	83 81       	ldd	r24, Z+3	; 0x03
    2812:	e9 81       	ldd	r30, Y+1	; 0x01
    2814:	fa 81       	ldd	r31, Y+2	; 0x02
    2816:	92 81       	ldd	r25, Z+2	; 0x02
    2818:	69 2f       	mov	r22, r25
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB,Ptr_SevenSegObj->PinBPort,PIN_HIGH);
    2820:	e9 81       	ldd	r30, Y+1	; 0x01
    2822:	fa 81       	ldd	r31, Y+2	; 0x02
    2824:	85 81       	ldd	r24, Z+5	; 0x05
    2826:	e9 81       	ldd	r30, Y+1	; 0x01
    2828:	fa 81       	ldd	r31, Y+2	; 0x02
    282a:	94 81       	ldd	r25, Z+4	; 0x04
    282c:	69 2f       	mov	r22, r25
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC,Ptr_SevenSegObj->PinCPort,PIN_LOW);
    2834:	e9 81       	ldd	r30, Y+1	; 0x01
    2836:	fa 81       	ldd	r31, Y+2	; 0x02
    2838:	87 81       	ldd	r24, Z+7	; 0x07
    283a:	e9 81       	ldd	r30, Y+1	; 0x01
    283c:	fa 81       	ldd	r31, Y+2	; 0x02
    283e:	96 81       	ldd	r25, Z+6	; 0x06
    2840:	69 2f       	mov	r22, r25
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD,Ptr_SevenSegObj->PinDPort,PIN_LOW);
    2848:	e9 81       	ldd	r30, Y+1	; 0x01
    284a:	fa 81       	ldd	r31, Y+2	; 0x02
    284c:	81 85       	ldd	r24, Z+9	; 0x09
    284e:	e9 81       	ldd	r30, Y+1	; 0x01
    2850:	fa 81       	ldd	r31, Y+2	; 0x02
    2852:	90 85       	ldd	r25, Z+8	; 0x08
    2854:	69 2f       	mov	r22, r25
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    285c:	1e c1       	rjmp	.+572    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
			break;
		case 3:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA,Ptr_SevenSegObj->PinAPort,PIN_HIGH);
    285e:	e9 81       	ldd	r30, Y+1	; 0x01
    2860:	fa 81       	ldd	r31, Y+2	; 0x02
    2862:	83 81       	ldd	r24, Z+3	; 0x03
    2864:	e9 81       	ldd	r30, Y+1	; 0x01
    2866:	fa 81       	ldd	r31, Y+2	; 0x02
    2868:	92 81       	ldd	r25, Z+2	; 0x02
    286a:	69 2f       	mov	r22, r25
    286c:	41 e0       	ldi	r20, 0x01	; 1
    286e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB,Ptr_SevenSegObj->PinBPort,PIN_HIGH);
    2872:	e9 81       	ldd	r30, Y+1	; 0x01
    2874:	fa 81       	ldd	r31, Y+2	; 0x02
    2876:	85 81       	ldd	r24, Z+5	; 0x05
    2878:	e9 81       	ldd	r30, Y+1	; 0x01
    287a:	fa 81       	ldd	r31, Y+2	; 0x02
    287c:	94 81       	ldd	r25, Z+4	; 0x04
    287e:	69 2f       	mov	r22, r25
    2880:	41 e0       	ldi	r20, 0x01	; 1
    2882:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC,Ptr_SevenSegObj->PinCPort,PIN_LOW);
    2886:	e9 81       	ldd	r30, Y+1	; 0x01
    2888:	fa 81       	ldd	r31, Y+2	; 0x02
    288a:	87 81       	ldd	r24, Z+7	; 0x07
    288c:	e9 81       	ldd	r30, Y+1	; 0x01
    288e:	fa 81       	ldd	r31, Y+2	; 0x02
    2890:	96 81       	ldd	r25, Z+6	; 0x06
    2892:	69 2f       	mov	r22, r25
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD,Ptr_SevenSegObj->PinDPort,PIN_LOW);
    289a:	e9 81       	ldd	r30, Y+1	; 0x01
    289c:	fa 81       	ldd	r31, Y+2	; 0x02
    289e:	81 85       	ldd	r24, Z+9	; 0x09
    28a0:	e9 81       	ldd	r30, Y+1	; 0x01
    28a2:	fa 81       	ldd	r31, Y+2	; 0x02
    28a4:	90 85       	ldd	r25, Z+8	; 0x08
    28a6:	69 2f       	mov	r22, r25
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    28ae:	f5 c0       	rjmp	.+490    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
			break;
		case 4:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA,Ptr_SevenSegObj->PinAPort,PIN_LOW);
    28b0:	e9 81       	ldd	r30, Y+1	; 0x01
    28b2:	fa 81       	ldd	r31, Y+2	; 0x02
    28b4:	83 81       	ldd	r24, Z+3	; 0x03
    28b6:	e9 81       	ldd	r30, Y+1	; 0x01
    28b8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ba:	92 81       	ldd	r25, Z+2	; 0x02
    28bc:	69 2f       	mov	r22, r25
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB,Ptr_SevenSegObj->PinBPort,PIN_LOW);
    28c4:	e9 81       	ldd	r30, Y+1	; 0x01
    28c6:	fa 81       	ldd	r31, Y+2	; 0x02
    28c8:	85 81       	ldd	r24, Z+5	; 0x05
    28ca:	e9 81       	ldd	r30, Y+1	; 0x01
    28cc:	fa 81       	ldd	r31, Y+2	; 0x02
    28ce:	94 81       	ldd	r25, Z+4	; 0x04
    28d0:	69 2f       	mov	r22, r25
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC,Ptr_SevenSegObj->PinCPort,PIN_HIGH);
    28d8:	e9 81       	ldd	r30, Y+1	; 0x01
    28da:	fa 81       	ldd	r31, Y+2	; 0x02
    28dc:	87 81       	ldd	r24, Z+7	; 0x07
    28de:	e9 81       	ldd	r30, Y+1	; 0x01
    28e0:	fa 81       	ldd	r31, Y+2	; 0x02
    28e2:	96 81       	ldd	r25, Z+6	; 0x06
    28e4:	69 2f       	mov	r22, r25
    28e6:	41 e0       	ldi	r20, 0x01	; 1
    28e8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD,Ptr_SevenSegObj->PinDPort,PIN_LOW);
    28ec:	e9 81       	ldd	r30, Y+1	; 0x01
    28ee:	fa 81       	ldd	r31, Y+2	; 0x02
    28f0:	81 85       	ldd	r24, Z+9	; 0x09
    28f2:	e9 81       	ldd	r30, Y+1	; 0x01
    28f4:	fa 81       	ldd	r31, Y+2	; 0x02
    28f6:	90 85       	ldd	r25, Z+8	; 0x08
    28f8:	69 2f       	mov	r22, r25
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    2900:	cc c0       	rjmp	.+408    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
			break;
		case 5:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA,Ptr_SevenSegObj->PinAPort,PIN_HIGH);
    2902:	e9 81       	ldd	r30, Y+1	; 0x01
    2904:	fa 81       	ldd	r31, Y+2	; 0x02
    2906:	83 81       	ldd	r24, Z+3	; 0x03
    2908:	e9 81       	ldd	r30, Y+1	; 0x01
    290a:	fa 81       	ldd	r31, Y+2	; 0x02
    290c:	92 81       	ldd	r25, Z+2	; 0x02
    290e:	69 2f       	mov	r22, r25
    2910:	41 e0       	ldi	r20, 0x01	; 1
    2912:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB,Ptr_SevenSegObj->PinBPort,PIN_LOW);
    2916:	e9 81       	ldd	r30, Y+1	; 0x01
    2918:	fa 81       	ldd	r31, Y+2	; 0x02
    291a:	85 81       	ldd	r24, Z+5	; 0x05
    291c:	e9 81       	ldd	r30, Y+1	; 0x01
    291e:	fa 81       	ldd	r31, Y+2	; 0x02
    2920:	94 81       	ldd	r25, Z+4	; 0x04
    2922:	69 2f       	mov	r22, r25
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC,Ptr_SevenSegObj->PinCPort,PIN_HIGH);
    292a:	e9 81       	ldd	r30, Y+1	; 0x01
    292c:	fa 81       	ldd	r31, Y+2	; 0x02
    292e:	87 81       	ldd	r24, Z+7	; 0x07
    2930:	e9 81       	ldd	r30, Y+1	; 0x01
    2932:	fa 81       	ldd	r31, Y+2	; 0x02
    2934:	96 81       	ldd	r25, Z+6	; 0x06
    2936:	69 2f       	mov	r22, r25
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD,Ptr_SevenSegObj->PinDPort,PIN_LOW);
    293e:	e9 81       	ldd	r30, Y+1	; 0x01
    2940:	fa 81       	ldd	r31, Y+2	; 0x02
    2942:	81 85       	ldd	r24, Z+9	; 0x09
    2944:	e9 81       	ldd	r30, Y+1	; 0x01
    2946:	fa 81       	ldd	r31, Y+2	; 0x02
    2948:	90 85       	ldd	r25, Z+8	; 0x08
    294a:	69 2f       	mov	r22, r25
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    2952:	a3 c0       	rjmp	.+326    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
			break;
		case 6:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA,Ptr_SevenSegObj->PinAPort,PIN_LOW);
    2954:	e9 81       	ldd	r30, Y+1	; 0x01
    2956:	fa 81       	ldd	r31, Y+2	; 0x02
    2958:	83 81       	ldd	r24, Z+3	; 0x03
    295a:	e9 81       	ldd	r30, Y+1	; 0x01
    295c:	fa 81       	ldd	r31, Y+2	; 0x02
    295e:	92 81       	ldd	r25, Z+2	; 0x02
    2960:	69 2f       	mov	r22, r25
    2962:	40 e0       	ldi	r20, 0x00	; 0
    2964:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB,Ptr_SevenSegObj->PinBPort,PIN_HIGH);
    2968:	e9 81       	ldd	r30, Y+1	; 0x01
    296a:	fa 81       	ldd	r31, Y+2	; 0x02
    296c:	85 81       	ldd	r24, Z+5	; 0x05
    296e:	e9 81       	ldd	r30, Y+1	; 0x01
    2970:	fa 81       	ldd	r31, Y+2	; 0x02
    2972:	94 81       	ldd	r25, Z+4	; 0x04
    2974:	69 2f       	mov	r22, r25
    2976:	41 e0       	ldi	r20, 0x01	; 1
    2978:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC,Ptr_SevenSegObj->PinCPort,PIN_HIGH);
    297c:	e9 81       	ldd	r30, Y+1	; 0x01
    297e:	fa 81       	ldd	r31, Y+2	; 0x02
    2980:	87 81       	ldd	r24, Z+7	; 0x07
    2982:	e9 81       	ldd	r30, Y+1	; 0x01
    2984:	fa 81       	ldd	r31, Y+2	; 0x02
    2986:	96 81       	ldd	r25, Z+6	; 0x06
    2988:	69 2f       	mov	r22, r25
    298a:	41 e0       	ldi	r20, 0x01	; 1
    298c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD,Ptr_SevenSegObj->PinDPort,PIN_LOW);
    2990:	e9 81       	ldd	r30, Y+1	; 0x01
    2992:	fa 81       	ldd	r31, Y+2	; 0x02
    2994:	81 85       	ldd	r24, Z+9	; 0x09
    2996:	e9 81       	ldd	r30, Y+1	; 0x01
    2998:	fa 81       	ldd	r31, Y+2	; 0x02
    299a:	90 85       	ldd	r25, Z+8	; 0x08
    299c:	69 2f       	mov	r22, r25
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    29a4:	7a c0       	rjmp	.+244    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
			break;
		case 7:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA,Ptr_SevenSegObj->PinAPort,PIN_HIGH);
    29a6:	e9 81       	ldd	r30, Y+1	; 0x01
    29a8:	fa 81       	ldd	r31, Y+2	; 0x02
    29aa:	83 81       	ldd	r24, Z+3	; 0x03
    29ac:	e9 81       	ldd	r30, Y+1	; 0x01
    29ae:	fa 81       	ldd	r31, Y+2	; 0x02
    29b0:	92 81       	ldd	r25, Z+2	; 0x02
    29b2:	69 2f       	mov	r22, r25
    29b4:	41 e0       	ldi	r20, 0x01	; 1
    29b6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB,Ptr_SevenSegObj->PinBPort,PIN_HIGH);
    29ba:	e9 81       	ldd	r30, Y+1	; 0x01
    29bc:	fa 81       	ldd	r31, Y+2	; 0x02
    29be:	85 81       	ldd	r24, Z+5	; 0x05
    29c0:	e9 81       	ldd	r30, Y+1	; 0x01
    29c2:	fa 81       	ldd	r31, Y+2	; 0x02
    29c4:	94 81       	ldd	r25, Z+4	; 0x04
    29c6:	69 2f       	mov	r22, r25
    29c8:	41 e0       	ldi	r20, 0x01	; 1
    29ca:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC,Ptr_SevenSegObj->PinCPort,PIN_HIGH);
    29ce:	e9 81       	ldd	r30, Y+1	; 0x01
    29d0:	fa 81       	ldd	r31, Y+2	; 0x02
    29d2:	87 81       	ldd	r24, Z+7	; 0x07
    29d4:	e9 81       	ldd	r30, Y+1	; 0x01
    29d6:	fa 81       	ldd	r31, Y+2	; 0x02
    29d8:	96 81       	ldd	r25, Z+6	; 0x06
    29da:	69 2f       	mov	r22, r25
    29dc:	41 e0       	ldi	r20, 0x01	; 1
    29de:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD,Ptr_SevenSegObj->PinDPort,PIN_LOW);
    29e2:	e9 81       	ldd	r30, Y+1	; 0x01
    29e4:	fa 81       	ldd	r31, Y+2	; 0x02
    29e6:	81 85       	ldd	r24, Z+9	; 0x09
    29e8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ea:	fa 81       	ldd	r31, Y+2	; 0x02
    29ec:	90 85       	ldd	r25, Z+8	; 0x08
    29ee:	69 2f       	mov	r22, r25
    29f0:	40 e0       	ldi	r20, 0x00	; 0
    29f2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    29f6:	51 c0       	rjmp	.+162    	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
			break;
		case 8:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA,Ptr_SevenSegObj->PinAPort,PIN_LOW);
    29f8:	e9 81       	ldd	r30, Y+1	; 0x01
    29fa:	fa 81       	ldd	r31, Y+2	; 0x02
    29fc:	83 81       	ldd	r24, Z+3	; 0x03
    29fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2a00:	fa 81       	ldd	r31, Y+2	; 0x02
    2a02:	92 81       	ldd	r25, Z+2	; 0x02
    2a04:	69 2f       	mov	r22, r25
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB,Ptr_SevenSegObj->PinBPort,PIN_LOW);
    2a0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a10:	85 81       	ldd	r24, Z+5	; 0x05
    2a12:	e9 81       	ldd	r30, Y+1	; 0x01
    2a14:	fa 81       	ldd	r31, Y+2	; 0x02
    2a16:	94 81       	ldd	r25, Z+4	; 0x04
    2a18:	69 2f       	mov	r22, r25
    2a1a:	40 e0       	ldi	r20, 0x00	; 0
    2a1c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC,Ptr_SevenSegObj->PinCPort,PIN_LOW);
    2a20:	e9 81       	ldd	r30, Y+1	; 0x01
    2a22:	fa 81       	ldd	r31, Y+2	; 0x02
    2a24:	87 81       	ldd	r24, Z+7	; 0x07
    2a26:	e9 81       	ldd	r30, Y+1	; 0x01
    2a28:	fa 81       	ldd	r31, Y+2	; 0x02
    2a2a:	96 81       	ldd	r25, Z+6	; 0x06
    2a2c:	69 2f       	mov	r22, r25
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD,Ptr_SevenSegObj->PinDPort,PIN_HIGH);
    2a34:	e9 81       	ldd	r30, Y+1	; 0x01
    2a36:	fa 81       	ldd	r31, Y+2	; 0x02
    2a38:	81 85       	ldd	r24, Z+9	; 0x09
    2a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3e:	90 85       	ldd	r25, Z+8	; 0x08
    2a40:	69 2f       	mov	r22, r25
    2a42:	41 e0       	ldi	r20, 0x01	; 1
    2a44:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    2a48:	28 c0       	rjmp	.+80     	; 0x2a9a <HSEVEN_SEG_Display+0x3f2>
			break;
		case 9:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA,Ptr_SevenSegObj->PinAPort,PIN_HIGH);
    2a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4e:	83 81       	ldd	r24, Z+3	; 0x03
    2a50:	e9 81       	ldd	r30, Y+1	; 0x01
    2a52:	fa 81       	ldd	r31, Y+2	; 0x02
    2a54:	92 81       	ldd	r25, Z+2	; 0x02
    2a56:	69 2f       	mov	r22, r25
    2a58:	41 e0       	ldi	r20, 0x01	; 1
    2a5a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB,Ptr_SevenSegObj->PinBPort,PIN_LOW);
    2a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a60:	fa 81       	ldd	r31, Y+2	; 0x02
    2a62:	85 81       	ldd	r24, Z+5	; 0x05
    2a64:	e9 81       	ldd	r30, Y+1	; 0x01
    2a66:	fa 81       	ldd	r31, Y+2	; 0x02
    2a68:	94 81       	ldd	r25, Z+4	; 0x04
    2a6a:	69 2f       	mov	r22, r25
    2a6c:	40 e0       	ldi	r20, 0x00	; 0
    2a6e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC,Ptr_SevenSegObj->PinCPort,PIN_LOW);
    2a72:	e9 81       	ldd	r30, Y+1	; 0x01
    2a74:	fa 81       	ldd	r31, Y+2	; 0x02
    2a76:	87 81       	ldd	r24, Z+7	; 0x07
    2a78:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a7c:	96 81       	ldd	r25, Z+6	; 0x06
    2a7e:	69 2f       	mov	r22, r25
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD,Ptr_SevenSegObj->PinDPort,PIN_HIGH);
    2a86:	e9 81       	ldd	r30, Y+1	; 0x01
    2a88:	fa 81       	ldd	r31, Y+2	; 0x02
    2a8a:	81 85       	ldd	r24, Z+9	; 0x09
    2a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a90:	90 85       	ldd	r25, Z+8	; 0x08
    2a92:	69 2f       	mov	r22, r25
    2a94:	41 e0       	ldi	r20, 0x01	; 1
    2a96:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	}
	else
	{
		//Wrong seven segment value
	}
}
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <TIMER1_VidInit>:

#include "HSERVO_Interface.h"
#include "HSERVO_Private.h"

void TIMER1_VidInit(void)
{
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
	/*Set Fast pwm mode with top-->ICR1*/
	CLR_BIT(TCCR1A,0);
    2ab2:	af e4       	ldi	r26, 0x4F	; 79
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	ef e4       	ldi	r30, 0x4F	; 79
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	8e 7f       	andi	r24, 0xFE	; 254
    2abe:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    2ac0:	af e4       	ldi	r26, 0x4F	; 79
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	ef e4       	ldi	r30, 0x4F	; 79
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	82 60       	ori	r24, 0x02	; 2
    2acc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    2ace:	ae e4       	ldi	r26, 0x4E	; 78
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	ee e4       	ldi	r30, 0x4E	; 78
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	80 61       	ori	r24, 0x10	; 16
    2ada:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    2adc:	ae e4       	ldi	r26, 0x4E	; 78
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	ee e4       	ldi	r30, 0x4E	; 78
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	88 60       	ori	r24, 0x08	; 8
    2ae8:	8c 93       	st	X, r24

	/*Set non-inverting Fast pwm channel A*/
	SET_BIT(TCCR1A,7);
    2aea:	af e4       	ldi	r26, 0x4F	; 79
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	ef e4       	ldi	r30, 0x4F	; 79
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	80 68       	ori	r24, 0x80	; 128
    2af6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,6);
    2af8:	af e4       	ldi	r26, 0x4F	; 79
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	ef e4       	ldi	r30, 0x4F	; 79
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	8f 7b       	andi	r24, 0xBF	; 191
    2b04:	8c 93       	st	X, r24

	/*Set Prescaler-->>64 Prescaler*/
	SET_BIT(TCCR1B,0);
    2b06:	ae e4       	ldi	r26, 0x4E	; 78
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	ee e4       	ldi	r30, 0x4E	; 78
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	81 60       	ori	r24, 0x01	; 1
    2b12:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    2b14:	ae e4       	ldi	r26, 0x4E	; 78
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	ee e4       	ldi	r30, 0x4E	; 78
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	82 60       	ori	r24, 0x02	; 2
    2b20:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    2b22:	ae e4       	ldi	r26, 0x4E	; 78
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	ee e4       	ldi	r30, 0x4E	; 78
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	8b 7f       	andi	r24, 0xFB	; 251
    2b2e:	8c 93       	st	X, r24
}
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <TIMER1_SetTopValue>:


void TIMER1_SetTopValue(u16 Copy_u16TopValue)
{
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	00 d0       	rcall	.+0      	; 0x2b3c <TIMER1_SetTopValue+0x6>
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	9a 83       	std	Y+2, r25	; 0x02
    2b42:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16TopValue;
    2b44:	e6 e4       	ldi	r30, 0x46	; 70
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4c:	91 83       	std	Z+1, r25	; 0x01
    2b4e:	80 83       	st	Z, r24
}
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <TIMER1_Set_OCR1A_Value>:

void TIMER1_Set_OCR1A_Value(u16 Copy_u16CTCValue)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	00 d0       	rcall	.+0      	; 0x2b60 <TIMER1_Set_OCR1A_Value+0x6>
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	9a 83       	std	Y+2, r25	; 0x02
    2b66:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16CTCValue;
    2b68:	ea e4       	ldi	r30, 0x4A	; 74
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
}
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <HSERVO_Init>:

void HSERVO_Init(void)
{
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
	TIMER1_SetTopValue(5000);
    2b86:	88 e8       	ldi	r24, 0x88	; 136
    2b88:	93 e1       	ldi	r25, 0x13	; 19
    2b8a:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <TIMER1_SetTopValue>
	TIMER1_VidInit();
    2b8e:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <TIMER1_VidInit>
	MDIO_SetPinDirection(PIN5,MDIO_PORTD,PIN_OUTPUT);
    2b92:	85 e0       	ldi	r24, 0x05	; 5
    2b94:	63 e0       	ldi	r22, 0x03	; 3
    2b96:	41 e0       	ldi	r20, 0x01	; 1
    2b98:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
}
    2b9c:	cf 91       	pop	r28
    2b9e:	df 91       	pop	r29
    2ba0:	08 95       	ret

00002ba2 <HSERVO_Rotate>:



void HSERVO_Rotate(void)
{
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	e8 97       	sbiw	r28, 0x38	; 56
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
	TIMER1_Set_OCR1A_Value(135); // RIGHT
    2bb6:	87 e8       	ldi	r24, 0x87	; 135
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <TIMER1_Set_OCR1A_Value>
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	aa e7       	ldi	r26, 0x7A	; 122
    2bc4:	b4 e4       	ldi	r27, 0x44	; 68
    2bc6:	8d ab       	std	Y+53, r24	; 0x35
    2bc8:	9e ab       	std	Y+54, r25	; 0x36
    2bca:	af ab       	std	Y+55, r26	; 0x37
    2bcc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bce:	6d a9       	ldd	r22, Y+53	; 0x35
    2bd0:	7e a9       	ldd	r23, Y+54	; 0x36
    2bd2:	8f a9       	ldd	r24, Y+55	; 0x37
    2bd4:	98 ad       	ldd	r25, Y+56	; 0x38
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	4a e7       	ldi	r20, 0x7A	; 122
    2bdc:	55 e4       	ldi	r21, 0x45	; 69
    2bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	89 ab       	std	Y+49, r24	; 0x31
    2be8:	9a ab       	std	Y+50, r25	; 0x32
    2bea:	ab ab       	std	Y+51, r26	; 0x33
    2bec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bee:	69 a9       	ldd	r22, Y+49	; 0x31
    2bf0:	7a a9       	ldd	r23, Y+50	; 0x32
    2bf2:	8b a9       	ldd	r24, Y+51	; 0x33
    2bf4:	9c a9       	ldd	r25, Y+52	; 0x34
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e8       	ldi	r20, 0x80	; 128
    2bfc:	5f e3       	ldi	r21, 0x3F	; 63
    2bfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c02:	88 23       	and	r24, r24
    2c04:	2c f4       	brge	.+10     	; 0x2c10 <HSERVO_Rotate+0x6e>
		__ticks = 1;
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	98 ab       	std	Y+48, r25	; 0x30
    2c0c:	8f a7       	std	Y+47, r24	; 0x2f
    2c0e:	3f c0       	rjmp	.+126    	; 0x2c8e <HSERVO_Rotate+0xec>
	else if (__tmp > 65535)
    2c10:	69 a9       	ldd	r22, Y+49	; 0x31
    2c12:	7a a9       	ldd	r23, Y+50	; 0x32
    2c14:	8b a9       	ldd	r24, Y+51	; 0x33
    2c16:	9c a9       	ldd	r25, Y+52	; 0x34
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	3f ef       	ldi	r19, 0xFF	; 255
    2c1c:	4f e7       	ldi	r20, 0x7F	; 127
    2c1e:	57 e4       	ldi	r21, 0x47	; 71
    2c20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c24:	18 16       	cp	r1, r24
    2c26:	4c f5       	brge	.+82     	; 0x2c7a <HSERVO_Rotate+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c28:	6d a9       	ldd	r22, Y+53	; 0x35
    2c2a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c2c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c2e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e2       	ldi	r20, 0x20	; 32
    2c36:	51 e4       	ldi	r21, 0x41	; 65
    2c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	bc 01       	movw	r22, r24
    2c42:	cd 01       	movw	r24, r26
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	98 ab       	std	Y+48, r25	; 0x30
    2c4e:	8f a7       	std	Y+47, r24	; 0x2f
    2c50:	0f c0       	rjmp	.+30     	; 0x2c70 <HSERVO_Rotate+0xce>
    2c52:	80 e9       	ldi	r24, 0x90	; 144
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	9e a7       	std	Y+46, r25	; 0x2e
    2c58:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c5a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c5c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	f1 f7       	brne	.-4      	; 0x2c5e <HSERVO_Rotate+0xbc>
    2c62:	9e a7       	std	Y+46, r25	; 0x2e
    2c64:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c66:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c68:	98 a9       	ldd	r25, Y+48	; 0x30
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	98 ab       	std	Y+48, r25	; 0x30
    2c6e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c70:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c72:	98 a9       	ldd	r25, Y+48	; 0x30
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	69 f7       	brne	.-38     	; 0x2c52 <HSERVO_Rotate+0xb0>
    2c78:	14 c0       	rjmp	.+40     	; 0x2ca2 <HSERVO_Rotate+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c7c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c80:	9c a9       	ldd	r25, Y+52	; 0x34
    2c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	98 ab       	std	Y+48, r25	; 0x30
    2c8c:	8f a7       	std	Y+47, r24	; 0x2f
    2c8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c90:	98 a9       	ldd	r25, Y+48	; 0x30
    2c92:	9c a7       	std	Y+44, r25	; 0x2c
    2c94:	8b a7       	std	Y+43, r24	; 0x2b
    2c96:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c98:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	f1 f7       	brne	.-4      	; 0x2c9a <HSERVO_Rotate+0xf8>
    2c9e:	9c a7       	std	Y+44, r25	; 0x2c
    2ca0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	TIMER1_Set_OCR1A_Value(385); //MIDDLE
    2ca2:	81 e8       	ldi	r24, 0x81	; 129
    2ca4:	91 e0       	ldi	r25, 0x01	; 1
    2ca6:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <TIMER1_Set_OCR1A_Value>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	aa e7       	ldi	r26, 0x7A	; 122
    2cb0:	b4 e4       	ldi	r27, 0x44	; 68
    2cb2:	8f a3       	std	Y+39, r24	; 0x27
    2cb4:	98 a7       	std	Y+40, r25	; 0x28
    2cb6:	a9 a7       	std	Y+41, r26	; 0x29
    2cb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cba:	6f a1       	ldd	r22, Y+39	; 0x27
    2cbc:	78 a5       	ldd	r23, Y+40	; 0x28
    2cbe:	89 a5       	ldd	r24, Y+41	; 0x29
    2cc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	4a e7       	ldi	r20, 0x7A	; 122
    2cc8:	55 e4       	ldi	r21, 0x45	; 69
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8b a3       	std	Y+35, r24	; 0x23
    2cd4:	9c a3       	std	Y+36, r25	; 0x24
    2cd6:	ad a3       	std	Y+37, r26	; 0x25
    2cd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cda:	6b a1       	ldd	r22, Y+35	; 0x23
    2cdc:	7c a1       	ldd	r23, Y+36	; 0x24
    2cde:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e8       	ldi	r20, 0x80	; 128
    2ce8:	5f e3       	ldi	r21, 0x3F	; 63
    2cea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cee:	88 23       	and	r24, r24
    2cf0:	2c f4       	brge	.+10     	; 0x2cfc <HSERVO_Rotate+0x15a>
		__ticks = 1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	9a a3       	std	Y+34, r25	; 0x22
    2cf8:	89 a3       	std	Y+33, r24	; 0x21
    2cfa:	3f c0       	rjmp	.+126    	; 0x2d7a <HSERVO_Rotate+0x1d8>
	else if (__tmp > 65535)
    2cfc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cfe:	7c a1       	ldd	r23, Y+36	; 0x24
    2d00:	8d a1       	ldd	r24, Y+37	; 0x25
    2d02:	9e a1       	ldd	r25, Y+38	; 0x26
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	3f ef       	ldi	r19, 0xFF	; 255
    2d08:	4f e7       	ldi	r20, 0x7F	; 127
    2d0a:	57 e4       	ldi	r21, 0x47	; 71
    2d0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d10:	18 16       	cp	r1, r24
    2d12:	4c f5       	brge	.+82     	; 0x2d66 <HSERVO_Rotate+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d14:	6f a1       	ldd	r22, Y+39	; 0x27
    2d16:	78 a5       	ldd	r23, Y+40	; 0x28
    2d18:	89 a5       	ldd	r24, Y+41	; 0x29
    2d1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e2       	ldi	r20, 0x20	; 32
    2d22:	51 e4       	ldi	r21, 0x41	; 65
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	9a a3       	std	Y+34, r25	; 0x22
    2d3a:	89 a3       	std	Y+33, r24	; 0x21
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <HSERVO_Rotate+0x1ba>
    2d3e:	80 e9       	ldi	r24, 0x90	; 144
    2d40:	91 e0       	ldi	r25, 0x01	; 1
    2d42:	98 a3       	std	Y+32, r25	; 0x20
    2d44:	8f 8f       	std	Y+31, r24	; 0x1f
    2d46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d48:	98 a1       	ldd	r25, Y+32	; 0x20
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <HSERVO_Rotate+0x1a8>
    2d4e:	98 a3       	std	Y+32, r25	; 0x20
    2d50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d52:	89 a1       	ldd	r24, Y+33	; 0x21
    2d54:	9a a1       	ldd	r25, Y+34	; 0x22
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	9a a3       	std	Y+34, r25	; 0x22
    2d5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	69 f7       	brne	.-38     	; 0x2d3e <HSERVO_Rotate+0x19c>
    2d64:	14 c0       	rjmp	.+40     	; 0x2d8e <HSERVO_Rotate+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d66:	6b a1       	ldd	r22, Y+35	; 0x23
    2d68:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	9a a3       	std	Y+34, r25	; 0x22
    2d78:	89 a3       	std	Y+33, r24	; 0x21
    2d7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d80:	8d 8f       	std	Y+29, r24	; 0x1d
    2d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <HSERVO_Rotate+0x1e4>
    2d8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d8c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	TIMER1_Set_OCR1A_Value(635); // LEFT
    2d8e:	8b e7       	ldi	r24, 0x7B	; 123
    2d90:	92 e0       	ldi	r25, 0x02	; 2
    2d92:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <TIMER1_Set_OCR1A_Value>
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	aa e7       	ldi	r26, 0x7A	; 122
    2d9c:	b4 e4       	ldi	r27, 0x44	; 68
    2d9e:	89 8f       	std	Y+25, r24	; 0x19
    2da0:	9a 8f       	std	Y+26, r25	; 0x1a
    2da2:	ab 8f       	std	Y+27, r26	; 0x1b
    2da4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da6:	69 8d       	ldd	r22, Y+25	; 0x19
    2da8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2daa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	4a e7       	ldi	r20, 0x7A	; 122
    2db4:	55 e4       	ldi	r21, 0x45	; 69
    2db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	8d 8b       	std	Y+21, r24	; 0x15
    2dc0:	9e 8b       	std	Y+22, r25	; 0x16
    2dc2:	af 8b       	std	Y+23, r26	; 0x17
    2dc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dca:	8f 89       	ldd	r24, Y+23	; 0x17
    2dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e8       	ldi	r20, 0x80	; 128
    2dd4:	5f e3       	ldi	r21, 0x3F	; 63
    2dd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dda:	88 23       	and	r24, r24
    2ddc:	2c f4       	brge	.+10     	; 0x2de8 <HSERVO_Rotate+0x246>
		__ticks = 1;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9c 8b       	std	Y+20, r25	; 0x14
    2de4:	8b 8b       	std	Y+19, r24	; 0x13
    2de6:	3f c0       	rjmp	.+126    	; 0x2e66 <HSERVO_Rotate+0x2c4>
	else if (__tmp > 65535)
    2de8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dea:	7e 89       	ldd	r23, Y+22	; 0x16
    2dec:	8f 89       	ldd	r24, Y+23	; 0x17
    2dee:	98 8d       	ldd	r25, Y+24	; 0x18
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	3f ef       	ldi	r19, 0xFF	; 255
    2df4:	4f e7       	ldi	r20, 0x7F	; 127
    2df6:	57 e4       	ldi	r21, 0x47	; 71
    2df8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dfc:	18 16       	cp	r1, r24
    2dfe:	4c f5       	brge	.+82     	; 0x2e52 <HSERVO_Rotate+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e00:	69 8d       	ldd	r22, Y+25	; 0x19
    2e02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e2       	ldi	r20, 0x20	; 32
    2e0e:	51 e4       	ldi	r21, 0x41	; 65
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	bc 01       	movw	r22, r24
    2e1a:	cd 01       	movw	r24, r26
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9c 8b       	std	Y+20, r25	; 0x14
    2e26:	8b 8b       	std	Y+19, r24	; 0x13
    2e28:	0f c0       	rjmp	.+30     	; 0x2e48 <HSERVO_Rotate+0x2a6>
    2e2a:	80 e9       	ldi	r24, 0x90	; 144
    2e2c:	91 e0       	ldi	r25, 0x01	; 1
    2e2e:	9a 8b       	std	Y+18, r25	; 0x12
    2e30:	89 8b       	std	Y+17, r24	; 0x11
    2e32:	89 89       	ldd	r24, Y+17	; 0x11
    2e34:	9a 89       	ldd	r25, Y+18	; 0x12
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <HSERVO_Rotate+0x294>
    2e3a:	9a 8b       	std	Y+18, r25	; 0x12
    2e3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e40:	9c 89       	ldd	r25, Y+20	; 0x14
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	9c 8b       	std	Y+20, r25	; 0x14
    2e46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e48:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	69 f7       	brne	.-38     	; 0x2e2a <HSERVO_Rotate+0x288>
    2e50:	14 c0       	rjmp	.+40     	; 0x2e7a <HSERVO_Rotate+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e52:	6d 89       	ldd	r22, Y+21	; 0x15
    2e54:	7e 89       	ldd	r23, Y+22	; 0x16
    2e56:	8f 89       	ldd	r24, Y+23	; 0x17
    2e58:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	9c 8b       	std	Y+20, r25	; 0x14
    2e64:	8b 8b       	std	Y+19, r24	; 0x13
    2e66:	8b 89       	ldd	r24, Y+19	; 0x13
    2e68:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6a:	98 8b       	std	Y+16, r25	; 0x10
    2e6c:	8f 87       	std	Y+15, r24	; 0x0f
    2e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e70:	98 89       	ldd	r25, Y+16	; 0x10
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <HSERVO_Rotate+0x2d0>
    2e76:	98 8b       	std	Y+16, r25	; 0x10
    2e78:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	TIMER1_Set_OCR1A_Value(385); // MIDDLE
    2e7a:	81 e8       	ldi	r24, 0x81	; 129
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <TIMER1_Set_OCR1A_Value>
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	aa e7       	ldi	r26, 0x7A	; 122
    2e88:	b4 e4       	ldi	r27, 0x44	; 68
    2e8a:	8b 87       	std	Y+11, r24	; 0x0b
    2e8c:	9c 87       	std	Y+12, r25	; 0x0c
    2e8e:	ad 87       	std	Y+13, r26	; 0x0d
    2e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	4a e7       	ldi	r20, 0x7A	; 122
    2ea0:	55 e4       	ldi	r21, 0x45	; 69
    2ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	8f 83       	std	Y+7, r24	; 0x07
    2eac:	98 87       	std	Y+8, r25	; 0x08
    2eae:	a9 87       	std	Y+9, r26	; 0x09
    2eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb4:	78 85       	ldd	r23, Y+8	; 0x08
    2eb6:	89 85       	ldd	r24, Y+9	; 0x09
    2eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e8       	ldi	r20, 0x80	; 128
    2ec0:	5f e3       	ldi	r21, 0x3F	; 63
    2ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ec6:	88 23       	and	r24, r24
    2ec8:	2c f4       	brge	.+10     	; 0x2ed4 <HSERVO_Rotate+0x332>
		__ticks = 1;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	9e 83       	std	Y+6, r25	; 0x06
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
    2ed2:	3f c0       	rjmp	.+126    	; 0x2f52 <HSERVO_Rotate+0x3b0>
	else if (__tmp > 65535)
    2ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed6:	78 85       	ldd	r23, Y+8	; 0x08
    2ed8:	89 85       	ldd	r24, Y+9	; 0x09
    2eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	3f ef       	ldi	r19, 0xFF	; 255
    2ee0:	4f e7       	ldi	r20, 0x7F	; 127
    2ee2:	57 e4       	ldi	r21, 0x47	; 71
    2ee4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee8:	18 16       	cp	r1, r24
    2eea:	4c f5       	brge	.+82     	; 0x2f3e <HSERVO_Rotate+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e2       	ldi	r20, 0x20	; 32
    2efa:	51 e4       	ldi	r21, 0x41	; 65
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	bc 01       	movw	r22, r24
    2f06:	cd 01       	movw	r24, r26
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	0f c0       	rjmp	.+30     	; 0x2f34 <HSERVO_Rotate+0x392>
    2f16:	80 e9       	ldi	r24, 0x90	; 144
    2f18:	91 e0       	ldi	r25, 0x01	; 1
    2f1a:	9c 83       	std	Y+4, r25	; 0x04
    2f1c:	8b 83       	std	Y+3, r24	; 0x03
    2f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f20:	9c 81       	ldd	r25, Y+4	; 0x04
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <HSERVO_Rotate+0x380>
    2f26:	9c 83       	std	Y+4, r25	; 0x04
    2f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f34:	8d 81       	ldd	r24, Y+5	; 0x05
    2f36:	9e 81       	ldd	r25, Y+6	; 0x06
    2f38:	00 97       	sbiw	r24, 0x00	; 0
    2f3a:	69 f7       	brne	.-38     	; 0x2f16 <HSERVO_Rotate+0x374>
    2f3c:	14 c0       	rjmp	.+40     	; 0x2f66 <HSERVO_Rotate+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f40:	78 85       	ldd	r23, Y+8	; 0x08
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	9e 83       	std	Y+6, r25	; 0x06
    2f50:	8d 83       	std	Y+5, r24	; 0x05
    2f52:	8d 81       	ldd	r24, Y+5	; 0x05
    2f54:	9e 81       	ldd	r25, Y+6	; 0x06
    2f56:	9a 83       	std	Y+2, r25	; 0x02
    2f58:	89 83       	std	Y+1, r24	; 0x01
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	f1 f7       	brne	.-4      	; 0x2f5e <HSERVO_Rotate+0x3bc>
    2f62:	9a 83       	std	Y+2, r25	; 0x02
    2f64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    2f66:	e8 96       	adiw	r28, 0x38	; 56
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <HSERVO_Rotate_Middle>:

void HSERVO_Rotate_Middle(void)
{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
	TIMER1_Set_OCR1A_Value(385);
    2f80:	81 e8       	ldi	r24, 0x81	; 129
    2f82:	91 e0       	ldi	r25, 0x01	; 1
    2f84:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <TIMER1_Set_OCR1A_Value>
}
    2f88:	cf 91       	pop	r28
    2f8a:	df 91       	pop	r29
    2f8c:	08 95       	ret

00002f8e <HSERVO_Rotate_Right>:

void HSERVO_Rotate_Right(void)
{
    2f8e:	df 93       	push	r29
    2f90:	cf 93       	push	r28
    2f92:	cd b7       	in	r28, 0x3d	; 61
    2f94:	de b7       	in	r29, 0x3e	; 62
	TIMER1_Set_OCR1A_Value(135);
    2f96:	87 e8       	ldi	r24, 0x87	; 135
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <TIMER1_Set_OCR1A_Value>
}
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	08 95       	ret

00002fa4 <HSERVO_Rotate_Left>:

void HSERVO_Rotate_Left(void)
{
    2fa4:	df 93       	push	r29
    2fa6:	cf 93       	push	r28
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
	TIMER1_Set_OCR1A_Value(635);
    2fac:	8b e7       	ldi	r24, 0x7B	; 123
    2fae:	92 e0       	ldi	r25, 0x02	; 2
    2fb0:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <TIMER1_Set_OCR1A_Value>
}
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	08 95       	ret

00002fba <HKPD_Init>:
#include "util/delay.h"

u8 CursorPosition = 0;

void HKPD_Init()
{
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
	//Set column pins direction output
	MDIO_SetPinDirection(PIN0,HKPD_COLUMN_PORT,PIN_OUTPUT);
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	63 e0       	ldi	r22, 0x03	; 3
    2fc6:	41 e0       	ldi	r20, 0x01	; 1
    2fc8:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN1,HKPD_COLUMN_PORT,PIN_OUTPUT);
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	63 e0       	ldi	r22, 0x03	; 3
    2fd0:	41 e0       	ldi	r20, 0x01	; 1
    2fd2:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN4,HKPD_COLUMN_PORT,PIN_OUTPUT);
    2fd6:	84 e0       	ldi	r24, 0x04	; 4
    2fd8:	63 e0       	ldi	r22, 0x03	; 3
    2fda:	41 e0       	ldi	r20, 0x01	; 1
    2fdc:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN5,HKPD_COLUMN_PORT,PIN_OUTPUT);
    2fe0:	85 e0       	ldi	r24, 0x05	; 5
    2fe2:	63 e0       	ldi	r22, 0x03	; 3
    2fe4:	41 e0       	ldi	r20, 0x01	; 1
    2fe6:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>

	//Set row pins direction input
	MDIO_SetPinDirection(PIN3,HKPD_ROW_PORT,PIN_INPUT);
    2fea:	83 e0       	ldi	r24, 0x03	; 3
    2fec:	62 e0       	ldi	r22, 0x02	; 2
    2fee:	40 e0       	ldi	r20, 0x00	; 0
    2ff0:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN4,HKPD_ROW_PORT,PIN_INPUT);
    2ff4:	84 e0       	ldi	r24, 0x04	; 4
    2ff6:	62 e0       	ldi	r22, 0x02	; 2
    2ff8:	40 e0       	ldi	r20, 0x00	; 0
    2ffa:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN5,HKPD_ROW_PORT,PIN_INPUT);
    2ffe:	85 e0       	ldi	r24, 0x05	; 5
    3000:	62 e0       	ldi	r22, 0x02	; 2
    3002:	40 e0       	ldi	r20, 0x00	; 0
    3004:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN6,HKPD_ROW_PORT,PIN_INPUT);
    3008:	86 e0       	ldi	r24, 0x06	; 6
    300a:	62 e0       	ldi	r22, 0x02	; 2
    300c:	40 e0       	ldi	r20, 0x00	; 0
    300e:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>

	//Activate pull up resistor
	MDIO_SetPinValue(PIN3,HKPD_ROW_PORT,PIN_HIGH);
    3012:	83 e0       	ldi	r24, 0x03	; 3
    3014:	62 e0       	ldi	r22, 0x02	; 2
    3016:	41 e0       	ldi	r20, 0x01	; 1
    3018:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(PIN4,HKPD_ROW_PORT,PIN_HIGH);
    301c:	84 e0       	ldi	r24, 0x04	; 4
    301e:	62 e0       	ldi	r22, 0x02	; 2
    3020:	41 e0       	ldi	r20, 0x01	; 1
    3022:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(PIN5,HKPD_ROW_PORT,PIN_HIGH);
    3026:	85 e0       	ldi	r24, 0x05	; 5
    3028:	62 e0       	ldi	r22, 0x02	; 2
    302a:	41 e0       	ldi	r20, 0x01	; 1
    302c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(PIN6,HKPD_ROW_PORT,PIN_HIGH);
    3030:	86 e0       	ldi	r24, 0x06	; 6
    3032:	62 e0       	ldi	r22, 0x02	; 2
    3034:	41 e0       	ldi	r20, 0x01	; 1
    3036:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>

	//Deactivate Columns
	MDIO_SetPinValue(PIN0,HKPD_COLUMN_PORT,PIN_HIGH);
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	63 e0       	ldi	r22, 0x03	; 3
    303e:	41 e0       	ldi	r20, 0x01	; 1
    3040:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(PIN1,HKPD_COLUMN_PORT,PIN_HIGH);
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	63 e0       	ldi	r22, 0x03	; 3
    3048:	41 e0       	ldi	r20, 0x01	; 1
    304a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(PIN4,HKPD_COLUMN_PORT,PIN_HIGH);
    304e:	84 e0       	ldi	r24, 0x04	; 4
    3050:	63 e0       	ldi	r22, 0x03	; 3
    3052:	41 e0       	ldi	r20, 0x01	; 1
    3054:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(PIN5,HKPD_COLUMN_PORT,PIN_HIGH);
    3058:	85 e0       	ldi	r24, 0x05	; 5
    305a:	63 e0       	ldi	r22, 0x03	; 3
    305c:	41 e0       	ldi	r20, 0x01	; 1
    305e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
}
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <HKPD_GetPressedButton>:


u8 HKPD_GetPressedButton()
{
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	6f 97       	sbiw	r28, 0x1f	; 31
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	f8 94       	cli
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8ColumnCounter = 0;
    307c:	19 8a       	std	Y+17, r1	; 0x11
	u8 Loc_u8RowCounter = 0;
    307e:	18 8a       	std	Y+16, r1	; 0x10
	u8 Loc_u8ReturnValue = HKPD_NOT_PRESSED;
    3080:	8f ef       	ldi	r24, 0xFF	; 255
    3082:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Loc_u8PinState = 0;
    3084:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Loc_u8PinArray[8] = {PIN0,PIN1,PIN4,PIN5,PIN3,PIN4,PIN5,PIN6};
    3086:	ce 01       	movw	r24, r28
    3088:	43 96       	adiw	r24, 0x13	; 19
    308a:	9c 8f       	std	Y+28, r25	; 0x1c
    308c:	8b 8f       	std	Y+27, r24	; 0x1b
    308e:	e6 e8       	ldi	r30, 0x86	; 134
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	fe 8f       	std	Y+30, r31	; 0x1e
    3094:	ed 8f       	std	Y+29, r30	; 0x1d
    3096:	f8 e0       	ldi	r31, 0x08	; 8
    3098:	ff 8f       	std	Y+31, r31	; 0x1f
    309a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    309c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    309e:	00 80       	ld	r0, Z
    30a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30a4:	01 96       	adiw	r24, 0x01	; 1
    30a6:	9e 8f       	std	Y+30, r25	; 0x1e
    30a8:	8d 8f       	std	Y+29, r24	; 0x1d
    30aa:	eb 8d       	ldd	r30, Y+27	; 0x1b
    30ac:	fc 8d       	ldd	r31, Y+28	; 0x1c
    30ae:	00 82       	st	Z, r0
    30b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b4:	01 96       	adiw	r24, 0x01	; 1
    30b6:	9c 8f       	std	Y+28, r25	; 0x1c
    30b8:	8b 8f       	std	Y+27, r24	; 0x1b
    30ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30bc:	91 50       	subi	r25, 0x01	; 1
    30be:	9f 8f       	std	Y+31, r25	; 0x1f
    30c0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    30c2:	ee 23       	and	r30, r30
    30c4:	51 f7       	brne	.-44     	; 0x309a <HKPD_GetPressedButton+0x32>

	if(CursorPosition == 16)
    30c6:	80 91 9b 00 	lds	r24, 0x009B
    30ca:	80 31       	cpi	r24, 0x10	; 16
    30cc:	21 f4       	brne	.+8      	; 0x30d6 <HKPD_GetPressedButton+0x6e>
	{
		HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	60 e0       	ldi	r22, 0x00	; 0
    30d2:	0e 94 3d 21 	call	0x427a	; 0x427a <HCLCD_SetCursorPosition>
	}
	for(Loc_u8ColumnCounter = HKPD_COL_START;Loc_u8ColumnCounter<HKPD_COL_END;Loc_u8ColumnCounter++)
    30d6:	19 8a       	std	Y+17, r1	; 0x11
    30d8:	db c0       	rjmp	.+438    	; 0x3290 <HKPD_GetPressedButton+0x228>
	{
		MDIO_SetPinValue(Loc_u8PinArray[Loc_u8ColumnCounter],HKPD_COLUMN_PORT,PIN_LOW);
    30da:	89 89       	ldd	r24, Y+17	; 0x11
    30dc:	28 2f       	mov	r18, r24
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	ce 01       	movw	r24, r28
    30e2:	43 96       	adiw	r24, 0x13	; 19
    30e4:	fc 01       	movw	r30, r24
    30e6:	e2 0f       	add	r30, r18
    30e8:	f3 1f       	adc	r31, r19
    30ea:	80 81       	ld	r24, Z
    30ec:	63 e0       	ldi	r22, 0x03	; 3
    30ee:	40 e0       	ldi	r20, 0x00	; 0
    30f0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>

		for(Loc_u8RowCounter = HKPD_ROW_START;Loc_u8RowCounter<HKPD_ROW_END;Loc_u8RowCounter++)
    30f4:	84 e0       	ldi	r24, 0x04	; 4
    30f6:	88 8b       	std	Y+16, r24	; 0x10
    30f8:	b7 c0       	rjmp	.+366    	; 0x3268 <HKPD_GetPressedButton+0x200>
		{
			MDIO_ReadPinValue(Loc_u8PinArray[Loc_u8RowCounter],HKPD_ROW_PORT,&Loc_u8PinState);
    30fa:	88 89       	ldd	r24, Y+16	; 0x10
    30fc:	28 2f       	mov	r18, r24
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	ce 01       	movw	r24, r28
    3102:	43 96       	adiw	r24, 0x13	; 19
    3104:	fc 01       	movw	r30, r24
    3106:	e2 0f       	add	r30, r18
    3108:	f3 1f       	adc	r31, r19
    310a:	80 81       	ld	r24, Z
    310c:	9e 01       	movw	r18, r28
    310e:	2e 5e       	subi	r18, 0xEE	; 238
    3110:	3f 4f       	sbci	r19, 0xFF	; 255
    3112:	62 e0       	ldi	r22, 0x02	; 2
    3114:	a9 01       	movw	r20, r18
    3116:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <MDIO_ReadPinValue>

			if(Loc_u8PinState == 0)
    311a:	8a 89       	ldd	r24, Y+18	; 0x12
    311c:	88 23       	and	r24, r24
    311e:	09 f0       	breq	.+2      	; 0x3122 <HKPD_GetPressedButton+0xba>
    3120:	a0 c0       	rjmp	.+320    	; 0x3262 <HKPD_GetPressedButton+0x1fa>
			{
				Loc_u8ReturnValue = HKPD_SwitchValues[Loc_u8ColumnCounter-HKPD_COL_START][Loc_u8RowCounter-HKPD_ROW_START];
    3122:	89 89       	ldd	r24, Y+17	; 0x11
    3124:	48 2f       	mov	r20, r24
    3126:	50 e0       	ldi	r21, 0x00	; 0
    3128:	88 89       	ldd	r24, Y+16	; 0x10
    312a:	88 2f       	mov	r24, r24
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	9c 01       	movw	r18, r24
    3130:	24 50       	subi	r18, 0x04	; 4
    3132:	30 40       	sbci	r19, 0x00	; 0
    3134:	ca 01       	movw	r24, r20
    3136:	88 0f       	add	r24, r24
    3138:	99 1f       	adc	r25, r25
    313a:	88 0f       	add	r24, r24
    313c:	99 1f       	adc	r25, r25
    313e:	82 0f       	add	r24, r18
    3140:	93 1f       	adc	r25, r19
    3142:	fc 01       	movw	r30, r24
    3144:	ea 58       	subi	r30, 0x8A	; 138
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	80 81       	ld	r24, Z
    314a:	8f 87       	std	Y+15, r24	; 0x0f
				CursorPosition++;
    314c:	80 91 9b 00 	lds	r24, 0x009B
    3150:	8f 5f       	subi	r24, 0xFF	; 255
    3152:	80 93 9b 00 	sts	0x009B, r24
    3156:	10 c0       	rjmp	.+32     	; 0x3178 <HKPD_GetPressedButton+0x110>
				while(Loc_u8PinState == 0)
				{
					MDIO_ReadPinValue(Loc_u8PinArray[Loc_u8RowCounter],HKPD_ROW_PORT,&Loc_u8PinState);
    3158:	88 89       	ldd	r24, Y+16	; 0x10
    315a:	28 2f       	mov	r18, r24
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	ce 01       	movw	r24, r28
    3160:	43 96       	adiw	r24, 0x13	; 19
    3162:	fc 01       	movw	r30, r24
    3164:	e2 0f       	add	r30, r18
    3166:	f3 1f       	adc	r31, r19
    3168:	80 81       	ld	r24, Z
    316a:	9e 01       	movw	r18, r28
    316c:	2e 5e       	subi	r18, 0xEE	; 238
    316e:	3f 4f       	sbci	r19, 0xFF	; 255
    3170:	62 e0       	ldi	r22, 0x02	; 2
    3172:	a9 01       	movw	r20, r18
    3174:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <MDIO_ReadPinValue>

			if(Loc_u8PinState == 0)
			{
				Loc_u8ReturnValue = HKPD_SwitchValues[Loc_u8ColumnCounter-HKPD_COL_START][Loc_u8RowCounter-HKPD_ROW_START];
				CursorPosition++;
				while(Loc_u8PinState == 0)
    3178:	8a 89       	ldd	r24, Y+18	; 0x12
    317a:	88 23       	and	r24, r24
    317c:	69 f3       	breq	.-38     	; 0x3158 <HKPD_GetPressedButton+0xf0>
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	a0 e2       	ldi	r26, 0x20	; 32
    3184:	b1 e4       	ldi	r27, 0x41	; 65
    3186:	8b 87       	std	Y+11, r24	; 0x0b
    3188:	9c 87       	std	Y+12, r25	; 0x0c
    318a:	ad 87       	std	Y+13, r26	; 0x0d
    318c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    318e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3190:	7c 85       	ldd	r23, Y+12	; 0x0c
    3192:	8d 85       	ldd	r24, Y+13	; 0x0d
    3194:	9e 85       	ldd	r25, Y+14	; 0x0e
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	4a e7       	ldi	r20, 0x7A	; 122
    319c:	55 e4       	ldi	r21, 0x45	; 69
    319e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	8f 83       	std	Y+7, r24	; 0x07
    31a8:	98 87       	std	Y+8, r25	; 0x08
    31aa:	a9 87       	std	Y+9, r26	; 0x09
    31ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ae:	6f 81       	ldd	r22, Y+7	; 0x07
    31b0:	78 85       	ldd	r23, Y+8	; 0x08
    31b2:	89 85       	ldd	r24, Y+9	; 0x09
    31b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e8       	ldi	r20, 0x80	; 128
    31bc:	5f e3       	ldi	r21, 0x3F	; 63
    31be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31c2:	88 23       	and	r24, r24
    31c4:	2c f4       	brge	.+10     	; 0x31d0 <HKPD_GetPressedButton+0x168>
		__ticks = 1;
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	9e 83       	std	Y+6, r25	; 0x06
    31cc:	8d 83       	std	Y+5, r24	; 0x05
    31ce:	3f c0       	rjmp	.+126    	; 0x324e <HKPD_GetPressedButton+0x1e6>
	else if (__tmp > 65535)
    31d0:	6f 81       	ldd	r22, Y+7	; 0x07
    31d2:	78 85       	ldd	r23, Y+8	; 0x08
    31d4:	89 85       	ldd	r24, Y+9	; 0x09
    31d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	3f ef       	ldi	r19, 0xFF	; 255
    31dc:	4f e7       	ldi	r20, 0x7F	; 127
    31de:	57 e4       	ldi	r21, 0x47	; 71
    31e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31e4:	18 16       	cp	r1, r24
    31e6:	4c f5       	brge	.+82     	; 0x323a <HKPD_GetPressedButton+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	40 e2       	ldi	r20, 0x20	; 32
    31f6:	51 e4       	ldi	r21, 0x41	; 65
    31f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	bc 01       	movw	r22, r24
    3202:	cd 01       	movw	r24, r26
    3204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	9e 83       	std	Y+6, r25	; 0x06
    320e:	8d 83       	std	Y+5, r24	; 0x05
    3210:	0f c0       	rjmp	.+30     	; 0x3230 <HKPD_GetPressedButton+0x1c8>
    3212:	80 e9       	ldi	r24, 0x90	; 144
    3214:	91 e0       	ldi	r25, 0x01	; 1
    3216:	9c 83       	std	Y+4, r25	; 0x04
    3218:	8b 83       	std	Y+3, r24	; 0x03
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	9c 81       	ldd	r25, Y+4	; 0x04
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <HKPD_GetPressedButton+0x1b6>
    3222:	9c 83       	std	Y+4, r25	; 0x04
    3224:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3226:	8d 81       	ldd	r24, Y+5	; 0x05
    3228:	9e 81       	ldd	r25, Y+6	; 0x06
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	9e 83       	std	Y+6, r25	; 0x06
    322e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3230:	8d 81       	ldd	r24, Y+5	; 0x05
    3232:	9e 81       	ldd	r25, Y+6	; 0x06
    3234:	00 97       	sbiw	r24, 0x00	; 0
    3236:	69 f7       	brne	.-38     	; 0x3212 <HKPD_GetPressedButton+0x1aa>
    3238:	14 c0       	rjmp	.+40     	; 0x3262 <HKPD_GetPressedButton+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323a:	6f 81       	ldd	r22, Y+7	; 0x07
    323c:	78 85       	ldd	r23, Y+8	; 0x08
    323e:	89 85       	ldd	r24, Y+9	; 0x09
    3240:	9a 85       	ldd	r25, Y+10	; 0x0a
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	9e 83       	std	Y+6, r25	; 0x06
    324c:	8d 83       	std	Y+5, r24	; 0x05
    324e:	8d 81       	ldd	r24, Y+5	; 0x05
    3250:	9e 81       	ldd	r25, Y+6	; 0x06
    3252:	9a 83       	std	Y+2, r25	; 0x02
    3254:	89 83       	std	Y+1, r24	; 0x01
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	9a 81       	ldd	r25, Y+2	; 0x02
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	f1 f7       	brne	.-4      	; 0x325a <HKPD_GetPressedButton+0x1f2>
    325e:	9a 83       	std	Y+2, r25	; 0x02
    3260:	89 83       	std	Y+1, r24	; 0x01
	}
	for(Loc_u8ColumnCounter = HKPD_COL_START;Loc_u8ColumnCounter<HKPD_COL_END;Loc_u8ColumnCounter++)
	{
		MDIO_SetPinValue(Loc_u8PinArray[Loc_u8ColumnCounter],HKPD_COLUMN_PORT,PIN_LOW);

		for(Loc_u8RowCounter = HKPD_ROW_START;Loc_u8RowCounter<HKPD_ROW_END;Loc_u8RowCounter++)
    3262:	88 89       	ldd	r24, Y+16	; 0x10
    3264:	8f 5f       	subi	r24, 0xFF	; 255
    3266:	88 8b       	std	Y+16, r24	; 0x10
    3268:	88 89       	ldd	r24, Y+16	; 0x10
    326a:	88 30       	cpi	r24, 0x08	; 8
    326c:	08 f4       	brcc	.+2      	; 0x3270 <HKPD_GetPressedButton+0x208>
    326e:	45 cf       	rjmp	.-374    	; 0x30fa <HKPD_GetPressedButton+0x92>
			else
			{

			}
		}
		MDIO_SetPinValue(Loc_u8PinArray[Loc_u8ColumnCounter],HKPD_COLUMN_PORT,PIN_HIGH);
    3270:	89 89       	ldd	r24, Y+17	; 0x11
    3272:	28 2f       	mov	r18, r24
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	ce 01       	movw	r24, r28
    3278:	43 96       	adiw	r24, 0x13	; 19
    327a:	fc 01       	movw	r30, r24
    327c:	e2 0f       	add	r30, r18
    327e:	f3 1f       	adc	r31, r19
    3280:	80 81       	ld	r24, Z
    3282:	63 e0       	ldi	r22, 0x03	; 3
    3284:	41 e0       	ldi	r20, 0x01	; 1
    3286:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>

	if(CursorPosition == 16)
	{
		HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
	}
	for(Loc_u8ColumnCounter = HKPD_COL_START;Loc_u8ColumnCounter<HKPD_COL_END;Loc_u8ColumnCounter++)
    328a:	89 89       	ldd	r24, Y+17	; 0x11
    328c:	8f 5f       	subi	r24, 0xFF	; 255
    328e:	89 8b       	std	Y+17, r24	; 0x11
    3290:	89 89       	ldd	r24, Y+17	; 0x11
    3292:	84 30       	cpi	r24, 0x04	; 4
    3294:	08 f4       	brcc	.+2      	; 0x3298 <HKPD_GetPressedButton+0x230>
    3296:	21 cf       	rjmp	.-446    	; 0x30da <HKPD_GetPressedButton+0x72>

			}
		}
		MDIO_SetPinValue(Loc_u8PinArray[Loc_u8ColumnCounter],HKPD_COLUMN_PORT,PIN_HIGH);
	}
	return Loc_u8ReturnValue;
    3298:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    329a:	6f 96       	adiw	r28, 0x1f	; 31
    329c:	0f b6       	in	r0, 0x3f	; 63
    329e:	f8 94       	cli
    32a0:	de bf       	out	0x3e, r29	; 62
    32a2:	0f be       	out	0x3f, r0	; 63
    32a4:	cd bf       	out	0x3d, r28	; 61
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <HDCM_Init>:
 */ 
#include "HDCM_Interface.h"
#include "util/delay.h"

void HDCM_Init(void)
{
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
	MDIO_SetPinDirection(EN_1,DCmotor_EN,PIN_OUTPUT);
    32b4:	84 e0       	ldi	r24, 0x04	; 4
    32b6:	63 e0       	ldi	r22, 0x03	; 3
    32b8:	41 e0       	ldi	r20, 0x01	; 1
    32ba:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(EN_2,DCmotor_EN,PIN_OUTPUT);
    32be:	85 e0       	ldi	r24, 0x05	; 5
    32c0:	63 e0       	ldi	r22, 0x03	; 3
    32c2:	41 e0       	ldi	r20, 0x01	; 1
    32c4:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(A_1,DCmotor_PINs,PIN_OUTPUT);
    32c8:	83 e0       	ldi	r24, 0x03	; 3
    32ca:	62 e0       	ldi	r22, 0x02	; 2
    32cc:	41 e0       	ldi	r20, 0x01	; 1
    32ce:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(A_2,DCmotor_PINs,PIN_OUTPUT);
    32d2:	84 e0       	ldi	r24, 0x04	; 4
    32d4:	62 e0       	ldi	r22, 0x02	; 2
    32d6:	41 e0       	ldi	r20, 0x01	; 1
    32d8:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(A_3,DCmotor_PINs,PIN_OUTPUT);
    32dc:	85 e0       	ldi	r24, 0x05	; 5
    32de:	62 e0       	ldi	r22, 0x02	; 2
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(A_4,DCmotor_PINs,PIN_OUTPUT);
    32e6:	86 e0       	ldi	r24, 0x06	; 6
    32e8:	62 e0       	ldi	r22, 0x02	; 2
    32ea:	41 e0       	ldi	r20, 0x01	; 1
    32ec:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	
	MDIO_SetPinValue(EN_1,DCmotor_EN,PIN_HIGH);
    32f0:	84 e0       	ldi	r24, 0x04	; 4
    32f2:	63 e0       	ldi	r22, 0x03	; 3
    32f4:	41 e0       	ldi	r20, 0x01	; 1
    32f6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(EN_2,DCmotor_EN,PIN_HIGH);
    32fa:	85 e0       	ldi	r24, 0x05	; 5
    32fc:	63 e0       	ldi	r22, 0x03	; 3
    32fe:	41 e0       	ldi	r20, 0x01	; 1
    3300:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	
}
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <HDCM_Forward_M_Left>:

void HDCM_Forward_M_Left(void)
{
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
	MDIO_SetPinValue(A_1,DCmotor_PINs,PIN_LOW);
    3312:	83 e0       	ldi	r24, 0x03	; 3
    3314:	62 e0       	ldi	r22, 0x02	; 2
    3316:	40 e0       	ldi	r20, 0x00	; 0
    3318:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(A_2,DCmotor_PINs,PIN_HIGH);
    331c:	84 e0       	ldi	r24, 0x04	; 4
    331e:	62 e0       	ldi	r22, 0x02	; 2
    3320:	41 e0       	ldi	r20, 0x01	; 1
    3322:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
}
    3326:	cf 91       	pop	r28
    3328:	df 91       	pop	r29
    332a:	08 95       	ret

0000332c <HDCM_Backward_M_Left>:
void HDCM_Backward_M_Left(void)
{
    332c:	df 93       	push	r29
    332e:	cf 93       	push	r28
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
	MDIO_SetPinValue(A_1,DCmotor_PINs,PIN_LOW);
    3334:	83 e0       	ldi	r24, 0x03	; 3
    3336:	62 e0       	ldi	r22, 0x02	; 2
    3338:	40 e0       	ldi	r20, 0x00	; 0
    333a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(A_2,DCmotor_PINs,PIN_HIGH);
    333e:	84 e0       	ldi	r24, 0x04	; 4
    3340:	62 e0       	ldi	r22, 0x02	; 2
    3342:	41 e0       	ldi	r20, 0x01	; 1
    3344:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
}
    3348:	cf 91       	pop	r28
    334a:	df 91       	pop	r29
    334c:	08 95       	ret

0000334e <HDCM_Forward_M_Right>:
void HDCM_Forward_M_Right(void)
{
    334e:	df 93       	push	r29
    3350:	cf 93       	push	r28
    3352:	cd b7       	in	r28, 0x3d	; 61
    3354:	de b7       	in	r29, 0x3e	; 62
	MDIO_SetPinValue(A_3,DCmotor_PINs,PIN_HIGH);
    3356:	85 e0       	ldi	r24, 0x05	; 5
    3358:	62 e0       	ldi	r22, 0x02	; 2
    335a:	41 e0       	ldi	r20, 0x01	; 1
    335c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(A_4,DCmotor_PINs,PIN_LOW);
    3360:	86 e0       	ldi	r24, 0x06	; 6
    3362:	62 e0       	ldi	r22, 0x02	; 2
    3364:	40 e0       	ldi	r20, 0x00	; 0
    3366:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
}
    336a:	cf 91       	pop	r28
    336c:	df 91       	pop	r29
    336e:	08 95       	ret

00003370 <HDCM_Backward_M_Right>:
void HDCM_Backward_M_Right(void)
{
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
	MDIO_SetPinValue(A_3,DCmotor_PINs,PIN_HIGH);
    3378:	85 e0       	ldi	r24, 0x05	; 5
    337a:	62 e0       	ldi	r22, 0x02	; 2
    337c:	41 e0       	ldi	r20, 0x01	; 1
    337e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(A_4,DCmotor_PINs,PIN_LOW);
    3382:	86 e0       	ldi	r24, 0x06	; 6
    3384:	62 e0       	ldi	r22, 0x02	; 2
    3386:	40 e0       	ldi	r20, 0x00	; 0
    3388:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
}
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <HDCM_Stop>:

void HDCM_Stop(void)
{
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
	MDIO_SetPinValue(A_1,DCmotor_PINs,PIN_LOW);
    339a:	83 e0       	ldi	r24, 0x03	; 3
    339c:	62 e0       	ldi	r22, 0x02	; 2
    339e:	40 e0       	ldi	r20, 0x00	; 0
    33a0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(A_2,DCmotor_PINs,PIN_LOW);
    33a4:	84 e0       	ldi	r24, 0x04	; 4
    33a6:	62 e0       	ldi	r22, 0x02	; 2
    33a8:	40 e0       	ldi	r20, 0x00	; 0
    33aa:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(A_3,DCmotor_PINs,PIN_LOW);
    33ae:	85 e0       	ldi	r24, 0x05	; 5
    33b0:	62 e0       	ldi	r22, 0x02	; 2
    33b2:	40 e0       	ldi	r20, 0x00	; 0
    33b4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	MDIO_SetPinValue(A_4,DCmotor_PINs,PIN_LOW);
    33b8:	86 e0       	ldi	r24, 0x06	; 6
    33ba:	62 e0       	ldi	r22, 0x02	; 2
    33bc:	40 e0       	ldi	r20, 0x00	; 0
    33be:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
}
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	08 95       	ret

000033c8 <HDCM_Forward>:

void HDCM_Forward(void)
{
    33c8:	df 93       	push	r29
    33ca:	cf 93       	push	r28
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62
	//HDCM_Stop();
	//_delay_ms(100);
	HDCM_Forward_M_Left();
    33d0:	0e 94 85 19 	call	0x330a	; 0x330a <HDCM_Forward_M_Left>
	HDCM_Forward_M_Right();
    33d4:	0e 94 a7 19 	call	0x334e	; 0x334e <HDCM_Forward_M_Right>
}
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	08 95       	ret

000033de <HDCM_Back>:

void HDCM_Back(void)
{
    33de:	df 93       	push	r29
    33e0:	cf 93       	push	r28
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
    33e6:	6c 97       	sbiw	r28, 0x1c	; 28
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	f8 94       	cli
    33ec:	de bf       	out	0x3e, r29	; 62
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	cd bf       	out	0x3d, r28	; 61
	HDCM_Stop();
    33f2:	0e 94 c9 19 	call	0x3392	; 0x3392 <HDCM_Stop>
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	a8 ec       	ldi	r26, 0xC8	; 200
    33fc:	b2 e4       	ldi	r27, 0x42	; 66
    33fe:	89 8f       	std	Y+25, r24	; 0x19
    3400:	9a 8f       	std	Y+26, r25	; 0x1a
    3402:	ab 8f       	std	Y+27, r26	; 0x1b
    3404:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3406:	69 8d       	ldd	r22, Y+25	; 0x19
    3408:	7a 8d       	ldd	r23, Y+26	; 0x1a
    340a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    340c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	4a e7       	ldi	r20, 0x7A	; 122
    3414:	55 e4       	ldi	r21, 0x45	; 69
    3416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	8d 8b       	std	Y+21, r24	; 0x15
    3420:	9e 8b       	std	Y+22, r25	; 0x16
    3422:	af 8b       	std	Y+23, r26	; 0x17
    3424:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3426:	6d 89       	ldd	r22, Y+21	; 0x15
    3428:	7e 89       	ldd	r23, Y+22	; 0x16
    342a:	8f 89       	ldd	r24, Y+23	; 0x17
    342c:	98 8d       	ldd	r25, Y+24	; 0x18
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e8       	ldi	r20, 0x80	; 128
    3434:	5f e3       	ldi	r21, 0x3F	; 63
    3436:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    343a:	88 23       	and	r24, r24
    343c:	2c f4       	brge	.+10     	; 0x3448 <HDCM_Back+0x6a>
		__ticks = 1;
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	9c 8b       	std	Y+20, r25	; 0x14
    3444:	8b 8b       	std	Y+19, r24	; 0x13
    3446:	3f c0       	rjmp	.+126    	; 0x34c6 <HDCM_Back+0xe8>
	else if (__tmp > 65535)
    3448:	6d 89       	ldd	r22, Y+21	; 0x15
    344a:	7e 89       	ldd	r23, Y+22	; 0x16
    344c:	8f 89       	ldd	r24, Y+23	; 0x17
    344e:	98 8d       	ldd	r25, Y+24	; 0x18
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	3f ef       	ldi	r19, 0xFF	; 255
    3454:	4f e7       	ldi	r20, 0x7F	; 127
    3456:	57 e4       	ldi	r21, 0x47	; 71
    3458:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    345c:	18 16       	cp	r1, r24
    345e:	4c f5       	brge	.+82     	; 0x34b2 <HDCM_Back+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3460:	69 8d       	ldd	r22, Y+25	; 0x19
    3462:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3464:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3466:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e2       	ldi	r20, 0x20	; 32
    346e:	51 e4       	ldi	r21, 0x41	; 65
    3470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	bc 01       	movw	r22, r24
    347a:	cd 01       	movw	r24, r26
    347c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	9c 8b       	std	Y+20, r25	; 0x14
    3486:	8b 8b       	std	Y+19, r24	; 0x13
    3488:	0f c0       	rjmp	.+30     	; 0x34a8 <HDCM_Back+0xca>
    348a:	80 e9       	ldi	r24, 0x90	; 144
    348c:	91 e0       	ldi	r25, 0x01	; 1
    348e:	9a 8b       	std	Y+18, r25	; 0x12
    3490:	89 8b       	std	Y+17, r24	; 0x11
    3492:	89 89       	ldd	r24, Y+17	; 0x11
    3494:	9a 89       	ldd	r25, Y+18	; 0x12
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	f1 f7       	brne	.-4      	; 0x3496 <HDCM_Back+0xb8>
    349a:	9a 8b       	std	Y+18, r25	; 0x12
    349c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349e:	8b 89       	ldd	r24, Y+19	; 0x13
    34a0:	9c 89       	ldd	r25, Y+20	; 0x14
    34a2:	01 97       	sbiw	r24, 0x01	; 1
    34a4:	9c 8b       	std	Y+20, r25	; 0x14
    34a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a8:	8b 89       	ldd	r24, Y+19	; 0x13
    34aa:	9c 89       	ldd	r25, Y+20	; 0x14
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	69 f7       	brne	.-38     	; 0x348a <HDCM_Back+0xac>
    34b0:	14 c0       	rjmp	.+40     	; 0x34da <HDCM_Back+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b2:	6d 89       	ldd	r22, Y+21	; 0x15
    34b4:	7e 89       	ldd	r23, Y+22	; 0x16
    34b6:	8f 89       	ldd	r24, Y+23	; 0x17
    34b8:	98 8d       	ldd	r25, Y+24	; 0x18
    34ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	9c 8b       	std	Y+20, r25	; 0x14
    34c4:	8b 8b       	std	Y+19, r24	; 0x13
    34c6:	8b 89       	ldd	r24, Y+19	; 0x13
    34c8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ca:	98 8b       	std	Y+16, r25	; 0x10
    34cc:	8f 87       	std	Y+15, r24	; 0x0f
    34ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    34d0:	98 89       	ldd	r25, Y+16	; 0x10
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	f1 f7       	brne	.-4      	; 0x34d2 <HDCM_Back+0xf4>
    34d6:	98 8b       	std	Y+16, r25	; 0x10
    34d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	HDCM_Backward_M_Left();
    34da:	0e 94 96 19 	call	0x332c	; 0x332c <HDCM_Backward_M_Left>
	HDCM_Backward_M_Right();
    34de:	0e 94 b8 19 	call	0x3370	; 0x3370 <HDCM_Backward_M_Right>
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	aa ef       	ldi	r26, 0xFA	; 250
    34e8:	b4 e4       	ldi	r27, 0x44	; 68
    34ea:	8b 87       	std	Y+11, r24	; 0x0b
    34ec:	9c 87       	std	Y+12, r25	; 0x0c
    34ee:	ad 87       	std	Y+13, r26	; 0x0d
    34f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	4a e7       	ldi	r20, 0x7A	; 122
    3500:	55 e4       	ldi	r21, 0x45	; 69
    3502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	8f 83       	std	Y+7, r24	; 0x07
    350c:	98 87       	std	Y+8, r25	; 0x08
    350e:	a9 87       	std	Y+9, r26	; 0x09
    3510:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3512:	6f 81       	ldd	r22, Y+7	; 0x07
    3514:	78 85       	ldd	r23, Y+8	; 0x08
    3516:	89 85       	ldd	r24, Y+9	; 0x09
    3518:	9a 85       	ldd	r25, Y+10	; 0x0a
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e8       	ldi	r20, 0x80	; 128
    3520:	5f e3       	ldi	r21, 0x3F	; 63
    3522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3526:	88 23       	and	r24, r24
    3528:	2c f4       	brge	.+10     	; 0x3534 <HDCM_Back+0x156>
		__ticks = 1;
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	9e 83       	std	Y+6, r25	; 0x06
    3530:	8d 83       	std	Y+5, r24	; 0x05
    3532:	3f c0       	rjmp	.+126    	; 0x35b2 <HDCM_Back+0x1d4>
	else if (__tmp > 65535)
    3534:	6f 81       	ldd	r22, Y+7	; 0x07
    3536:	78 85       	ldd	r23, Y+8	; 0x08
    3538:	89 85       	ldd	r24, Y+9	; 0x09
    353a:	9a 85       	ldd	r25, Y+10	; 0x0a
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	3f ef       	ldi	r19, 0xFF	; 255
    3540:	4f e7       	ldi	r20, 0x7F	; 127
    3542:	57 e4       	ldi	r21, 0x47	; 71
    3544:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3548:	18 16       	cp	r1, r24
    354a:	4c f5       	brge	.+82     	; 0x359e <HDCM_Back+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354c:	6b 85       	ldd	r22, Y+11	; 0x0b
    354e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3550:	8d 85       	ldd	r24, Y+13	; 0x0d
    3552:	9e 85       	ldd	r25, Y+14	; 0x0e
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	40 e2       	ldi	r20, 0x20	; 32
    355a:	51 e4       	ldi	r21, 0x41	; 65
    355c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	bc 01       	movw	r22, r24
    3566:	cd 01       	movw	r24, r26
    3568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	9e 83       	std	Y+6, r25	; 0x06
    3572:	8d 83       	std	Y+5, r24	; 0x05
    3574:	0f c0       	rjmp	.+30     	; 0x3594 <HDCM_Back+0x1b6>
    3576:	80 e9       	ldi	r24, 0x90	; 144
    3578:	91 e0       	ldi	r25, 0x01	; 1
    357a:	9c 83       	std	Y+4, r25	; 0x04
    357c:	8b 83       	std	Y+3, r24	; 0x03
    357e:	8b 81       	ldd	r24, Y+3	; 0x03
    3580:	9c 81       	ldd	r25, Y+4	; 0x04
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <HDCM_Back+0x1a4>
    3586:	9c 83       	std	Y+4, r25	; 0x04
    3588:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358a:	8d 81       	ldd	r24, Y+5	; 0x05
    358c:	9e 81       	ldd	r25, Y+6	; 0x06
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	9e 83       	std	Y+6, r25	; 0x06
    3592:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3594:	8d 81       	ldd	r24, Y+5	; 0x05
    3596:	9e 81       	ldd	r25, Y+6	; 0x06
    3598:	00 97       	sbiw	r24, 0x00	; 0
    359a:	69 f7       	brne	.-38     	; 0x3576 <HDCM_Back+0x198>
    359c:	14 c0       	rjmp	.+40     	; 0x35c6 <HDCM_Back+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359e:	6f 81       	ldd	r22, Y+7	; 0x07
    35a0:	78 85       	ldd	r23, Y+8	; 0x08
    35a2:	89 85       	ldd	r24, Y+9	; 0x09
    35a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	9e 83       	std	Y+6, r25	; 0x06
    35b0:	8d 83       	std	Y+5, r24	; 0x05
    35b2:	8d 81       	ldd	r24, Y+5	; 0x05
    35b4:	9e 81       	ldd	r25, Y+6	; 0x06
    35b6:	9a 83       	std	Y+2, r25	; 0x02
    35b8:	89 83       	std	Y+1, r24	; 0x01
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	9a 81       	ldd	r25, Y+2	; 0x02
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	f1 f7       	brne	.-4      	; 0x35be <HDCM_Back+0x1e0>
    35c2:	9a 83       	std	Y+2, r25	; 0x02
    35c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
}
    35c6:	6c 96       	adiw	r28, 0x1c	; 28
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	cf 91       	pop	r28
    35d4:	df 91       	pop	r29
    35d6:	08 95       	ret

000035d8 <HDCM_Right>:

void HDCM_Right(void)
{
    35d8:	df 93       	push	r29
    35da:	cf 93       	push	r28
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
    35e0:	6c 97       	sbiw	r28, 0x1c	; 28
    35e2:	0f b6       	in	r0, 0x3f	; 63
    35e4:	f8 94       	cli
    35e6:	de bf       	out	0x3e, r29	; 62
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	cd bf       	out	0x3d, r28	; 61
	HDCM_Stop();
    35ec:	0e 94 c9 19 	call	0x3392	; 0x3392 <HDCM_Stop>
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	a8 ec       	ldi	r26, 0xC8	; 200
    35f6:	b2 e4       	ldi	r27, 0x42	; 66
    35f8:	89 8f       	std	Y+25, r24	; 0x19
    35fa:	9a 8f       	std	Y+26, r25	; 0x1a
    35fc:	ab 8f       	std	Y+27, r26	; 0x1b
    35fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3600:	69 8d       	ldd	r22, Y+25	; 0x19
    3602:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3604:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3606:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	4a e7       	ldi	r20, 0x7A	; 122
    360e:	55 e4       	ldi	r21, 0x45	; 69
    3610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	8d 8b       	std	Y+21, r24	; 0x15
    361a:	9e 8b       	std	Y+22, r25	; 0x16
    361c:	af 8b       	std	Y+23, r26	; 0x17
    361e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3620:	6d 89       	ldd	r22, Y+21	; 0x15
    3622:	7e 89       	ldd	r23, Y+22	; 0x16
    3624:	8f 89       	ldd	r24, Y+23	; 0x17
    3626:	98 8d       	ldd	r25, Y+24	; 0x18
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e8       	ldi	r20, 0x80	; 128
    362e:	5f e3       	ldi	r21, 0x3F	; 63
    3630:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3634:	88 23       	and	r24, r24
    3636:	2c f4       	brge	.+10     	; 0x3642 <HDCM_Right+0x6a>
		__ticks = 1;
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	9c 8b       	std	Y+20, r25	; 0x14
    363e:	8b 8b       	std	Y+19, r24	; 0x13
    3640:	3f c0       	rjmp	.+126    	; 0x36c0 <HDCM_Right+0xe8>
	else if (__tmp > 65535)
    3642:	6d 89       	ldd	r22, Y+21	; 0x15
    3644:	7e 89       	ldd	r23, Y+22	; 0x16
    3646:	8f 89       	ldd	r24, Y+23	; 0x17
    3648:	98 8d       	ldd	r25, Y+24	; 0x18
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	3f ef       	ldi	r19, 0xFF	; 255
    364e:	4f e7       	ldi	r20, 0x7F	; 127
    3650:	57 e4       	ldi	r21, 0x47	; 71
    3652:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3656:	18 16       	cp	r1, r24
    3658:	4c f5       	brge	.+82     	; 0x36ac <HDCM_Right+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365a:	69 8d       	ldd	r22, Y+25	; 0x19
    365c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    365e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3660:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e2       	ldi	r20, 0x20	; 32
    3668:	51 e4       	ldi	r21, 0x41	; 65
    366a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	bc 01       	movw	r22, r24
    3674:	cd 01       	movw	r24, r26
    3676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	9c 8b       	std	Y+20, r25	; 0x14
    3680:	8b 8b       	std	Y+19, r24	; 0x13
    3682:	0f c0       	rjmp	.+30     	; 0x36a2 <HDCM_Right+0xca>
    3684:	80 e9       	ldi	r24, 0x90	; 144
    3686:	91 e0       	ldi	r25, 0x01	; 1
    3688:	9a 8b       	std	Y+18, r25	; 0x12
    368a:	89 8b       	std	Y+17, r24	; 0x11
    368c:	89 89       	ldd	r24, Y+17	; 0x11
    368e:	9a 89       	ldd	r25, Y+18	; 0x12
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	f1 f7       	brne	.-4      	; 0x3690 <HDCM_Right+0xb8>
    3694:	9a 8b       	std	Y+18, r25	; 0x12
    3696:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3698:	8b 89       	ldd	r24, Y+19	; 0x13
    369a:	9c 89       	ldd	r25, Y+20	; 0x14
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	9c 8b       	std	Y+20, r25	; 0x14
    36a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a2:	8b 89       	ldd	r24, Y+19	; 0x13
    36a4:	9c 89       	ldd	r25, Y+20	; 0x14
    36a6:	00 97       	sbiw	r24, 0x00	; 0
    36a8:	69 f7       	brne	.-38     	; 0x3684 <HDCM_Right+0xac>
    36aa:	14 c0       	rjmp	.+40     	; 0x36d4 <HDCM_Right+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ac:	6d 89       	ldd	r22, Y+21	; 0x15
    36ae:	7e 89       	ldd	r23, Y+22	; 0x16
    36b0:	8f 89       	ldd	r24, Y+23	; 0x17
    36b2:	98 8d       	ldd	r25, Y+24	; 0x18
    36b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	9c 8b       	std	Y+20, r25	; 0x14
    36be:	8b 8b       	std	Y+19, r24	; 0x13
    36c0:	8b 89       	ldd	r24, Y+19	; 0x13
    36c2:	9c 89       	ldd	r25, Y+20	; 0x14
    36c4:	98 8b       	std	Y+16, r25	; 0x10
    36c6:	8f 87       	std	Y+15, r24	; 0x0f
    36c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ca:	98 89       	ldd	r25, Y+16	; 0x10
    36cc:	01 97       	sbiw	r24, 0x01	; 1
    36ce:	f1 f7       	brne	.-4      	; 0x36cc <HDCM_Right+0xf4>
    36d0:	98 8b       	std	Y+16, r25	; 0x10
    36d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	HDCM_Forward_M_Left();
    36d4:	0e 94 85 19 	call	0x330a	; 0x330a <HDCM_Forward_M_Left>
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	aa e7       	ldi	r26, 0x7A	; 122
    36de:	b4 e4       	ldi	r27, 0x44	; 68
    36e0:	8b 87       	std	Y+11, r24	; 0x0b
    36e2:	9c 87       	std	Y+12, r25	; 0x0c
    36e4:	ad 87       	std	Y+13, r26	; 0x0d
    36e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    36ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	4a e7       	ldi	r20, 0x7A	; 122
    36f6:	55 e4       	ldi	r21, 0x45	; 69
    36f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	8f 83       	std	Y+7, r24	; 0x07
    3702:	98 87       	std	Y+8, r25	; 0x08
    3704:	a9 87       	std	Y+9, r26	; 0x09
    3706:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3708:	6f 81       	ldd	r22, Y+7	; 0x07
    370a:	78 85       	ldd	r23, Y+8	; 0x08
    370c:	89 85       	ldd	r24, Y+9	; 0x09
    370e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	40 e8       	ldi	r20, 0x80	; 128
    3716:	5f e3       	ldi	r21, 0x3F	; 63
    3718:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    371c:	88 23       	and	r24, r24
    371e:	2c f4       	brge	.+10     	; 0x372a <HDCM_Right+0x152>
		__ticks = 1;
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	9e 83       	std	Y+6, r25	; 0x06
    3726:	8d 83       	std	Y+5, r24	; 0x05
    3728:	3f c0       	rjmp	.+126    	; 0x37a8 <HDCM_Right+0x1d0>
	else if (__tmp > 65535)
    372a:	6f 81       	ldd	r22, Y+7	; 0x07
    372c:	78 85       	ldd	r23, Y+8	; 0x08
    372e:	89 85       	ldd	r24, Y+9	; 0x09
    3730:	9a 85       	ldd	r25, Y+10	; 0x0a
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	3f ef       	ldi	r19, 0xFF	; 255
    3736:	4f e7       	ldi	r20, 0x7F	; 127
    3738:	57 e4       	ldi	r21, 0x47	; 71
    373a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    373e:	18 16       	cp	r1, r24
    3740:	4c f5       	brge	.+82     	; 0x3794 <HDCM_Right+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3742:	6b 85       	ldd	r22, Y+11	; 0x0b
    3744:	7c 85       	ldd	r23, Y+12	; 0x0c
    3746:	8d 85       	ldd	r24, Y+13	; 0x0d
    3748:	9e 85       	ldd	r25, Y+14	; 0x0e
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	40 e2       	ldi	r20, 0x20	; 32
    3750:	51 e4       	ldi	r21, 0x41	; 65
    3752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	bc 01       	movw	r22, r24
    375c:	cd 01       	movw	r24, r26
    375e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	9e 83       	std	Y+6, r25	; 0x06
    3768:	8d 83       	std	Y+5, r24	; 0x05
    376a:	0f c0       	rjmp	.+30     	; 0x378a <HDCM_Right+0x1b2>
    376c:	80 e9       	ldi	r24, 0x90	; 144
    376e:	91 e0       	ldi	r25, 0x01	; 1
    3770:	9c 83       	std	Y+4, r25	; 0x04
    3772:	8b 83       	std	Y+3, r24	; 0x03
    3774:	8b 81       	ldd	r24, Y+3	; 0x03
    3776:	9c 81       	ldd	r25, Y+4	; 0x04
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	f1 f7       	brne	.-4      	; 0x3778 <HDCM_Right+0x1a0>
    377c:	9c 83       	std	Y+4, r25	; 0x04
    377e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3780:	8d 81       	ldd	r24, Y+5	; 0x05
    3782:	9e 81       	ldd	r25, Y+6	; 0x06
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	9e 83       	std	Y+6, r25	; 0x06
    3788:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    378a:	8d 81       	ldd	r24, Y+5	; 0x05
    378c:	9e 81       	ldd	r25, Y+6	; 0x06
    378e:	00 97       	sbiw	r24, 0x00	; 0
    3790:	69 f7       	brne	.-38     	; 0x376c <HDCM_Right+0x194>
    3792:	14 c0       	rjmp	.+40     	; 0x37bc <HDCM_Right+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3794:	6f 81       	ldd	r22, Y+7	; 0x07
    3796:	78 85       	ldd	r23, Y+8	; 0x08
    3798:	89 85       	ldd	r24, Y+9	; 0x09
    379a:	9a 85       	ldd	r25, Y+10	; 0x0a
    379c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	9e 83       	std	Y+6, r25	; 0x06
    37a6:	8d 83       	std	Y+5, r24	; 0x05
    37a8:	8d 81       	ldd	r24, Y+5	; 0x05
    37aa:	9e 81       	ldd	r25, Y+6	; 0x06
    37ac:	9a 83       	std	Y+2, r25	; 0x02
    37ae:	89 83       	std	Y+1, r24	; 0x01
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	9a 81       	ldd	r25, Y+2	; 0x02
    37b4:	01 97       	sbiw	r24, 0x01	; 1
    37b6:	f1 f7       	brne	.-4      	; 0x37b4 <HDCM_Right+0x1dc>
    37b8:	9a 83       	std	Y+2, r25	; 0x02
    37ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    37bc:	6c 96       	adiw	r28, 0x1c	; 28
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	f8 94       	cli
    37c2:	de bf       	out	0x3e, r29	; 62
    37c4:	0f be       	out	0x3f, r0	; 63
    37c6:	cd bf       	out	0x3d, r28	; 61
    37c8:	cf 91       	pop	r28
    37ca:	df 91       	pop	r29
    37cc:	08 95       	ret

000037ce <HDCM_Left>:

void HDCM_Left(void)
{
    37ce:	df 93       	push	r29
    37d0:	cf 93       	push	r28
    37d2:	cd b7       	in	r28, 0x3d	; 61
    37d4:	de b7       	in	r29, 0x3e	; 62
    37d6:	6c 97       	sbiw	r28, 0x1c	; 28
    37d8:	0f b6       	in	r0, 0x3f	; 63
    37da:	f8 94       	cli
    37dc:	de bf       	out	0x3e, r29	; 62
    37de:	0f be       	out	0x3f, r0	; 63
    37e0:	cd bf       	out	0x3d, r28	; 61
	HDCM_Stop();
    37e2:	0e 94 c9 19 	call	0x3392	; 0x3392 <HDCM_Stop>
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	a8 ec       	ldi	r26, 0xC8	; 200
    37ec:	b2 e4       	ldi	r27, 0x42	; 66
    37ee:	89 8f       	std	Y+25, r24	; 0x19
    37f0:	9a 8f       	std	Y+26, r25	; 0x1a
    37f2:	ab 8f       	std	Y+27, r26	; 0x1b
    37f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f6:	69 8d       	ldd	r22, Y+25	; 0x19
    37f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	4a e7       	ldi	r20, 0x7A	; 122
    3804:	55 e4       	ldi	r21, 0x45	; 69
    3806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	8d 8b       	std	Y+21, r24	; 0x15
    3810:	9e 8b       	std	Y+22, r25	; 0x16
    3812:	af 8b       	std	Y+23, r26	; 0x17
    3814:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3816:	6d 89       	ldd	r22, Y+21	; 0x15
    3818:	7e 89       	ldd	r23, Y+22	; 0x16
    381a:	8f 89       	ldd	r24, Y+23	; 0x17
    381c:	98 8d       	ldd	r25, Y+24	; 0x18
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	40 e8       	ldi	r20, 0x80	; 128
    3824:	5f e3       	ldi	r21, 0x3F	; 63
    3826:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    382a:	88 23       	and	r24, r24
    382c:	2c f4       	brge	.+10     	; 0x3838 <HDCM_Left+0x6a>
		__ticks = 1;
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	9c 8b       	std	Y+20, r25	; 0x14
    3834:	8b 8b       	std	Y+19, r24	; 0x13
    3836:	3f c0       	rjmp	.+126    	; 0x38b6 <HDCM_Left+0xe8>
	else if (__tmp > 65535)
    3838:	6d 89       	ldd	r22, Y+21	; 0x15
    383a:	7e 89       	ldd	r23, Y+22	; 0x16
    383c:	8f 89       	ldd	r24, Y+23	; 0x17
    383e:	98 8d       	ldd	r25, Y+24	; 0x18
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	3f ef       	ldi	r19, 0xFF	; 255
    3844:	4f e7       	ldi	r20, 0x7F	; 127
    3846:	57 e4       	ldi	r21, 0x47	; 71
    3848:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    384c:	18 16       	cp	r1, r24
    384e:	4c f5       	brge	.+82     	; 0x38a2 <HDCM_Left+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3850:	69 8d       	ldd	r22, Y+25	; 0x19
    3852:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3854:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3856:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e2       	ldi	r20, 0x20	; 32
    385e:	51 e4       	ldi	r21, 0x41	; 65
    3860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	bc 01       	movw	r22, r24
    386a:	cd 01       	movw	r24, r26
    386c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	9c 8b       	std	Y+20, r25	; 0x14
    3876:	8b 8b       	std	Y+19, r24	; 0x13
    3878:	0f c0       	rjmp	.+30     	; 0x3898 <HDCM_Left+0xca>
    387a:	80 e9       	ldi	r24, 0x90	; 144
    387c:	91 e0       	ldi	r25, 0x01	; 1
    387e:	9a 8b       	std	Y+18, r25	; 0x12
    3880:	89 8b       	std	Y+17, r24	; 0x11
    3882:	89 89       	ldd	r24, Y+17	; 0x11
    3884:	9a 89       	ldd	r25, Y+18	; 0x12
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <HDCM_Left+0xb8>
    388a:	9a 8b       	std	Y+18, r25	; 0x12
    388c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388e:	8b 89       	ldd	r24, Y+19	; 0x13
    3890:	9c 89       	ldd	r25, Y+20	; 0x14
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	9c 8b       	std	Y+20, r25	; 0x14
    3896:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3898:	8b 89       	ldd	r24, Y+19	; 0x13
    389a:	9c 89       	ldd	r25, Y+20	; 0x14
    389c:	00 97       	sbiw	r24, 0x00	; 0
    389e:	69 f7       	brne	.-38     	; 0x387a <HDCM_Left+0xac>
    38a0:	14 c0       	rjmp	.+40     	; 0x38ca <HDCM_Left+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a2:	6d 89       	ldd	r22, Y+21	; 0x15
    38a4:	7e 89       	ldd	r23, Y+22	; 0x16
    38a6:	8f 89       	ldd	r24, Y+23	; 0x17
    38a8:	98 8d       	ldd	r25, Y+24	; 0x18
    38aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	9c 8b       	std	Y+20, r25	; 0x14
    38b4:	8b 8b       	std	Y+19, r24	; 0x13
    38b6:	8b 89       	ldd	r24, Y+19	; 0x13
    38b8:	9c 89       	ldd	r25, Y+20	; 0x14
    38ba:	98 8b       	std	Y+16, r25	; 0x10
    38bc:	8f 87       	std	Y+15, r24	; 0x0f
    38be:	8f 85       	ldd	r24, Y+15	; 0x0f
    38c0:	98 89       	ldd	r25, Y+16	; 0x10
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	f1 f7       	brne	.-4      	; 0x38c2 <HDCM_Left+0xf4>
    38c6:	98 8b       	std	Y+16, r25	; 0x10
    38c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	HDCM_Forward_M_Right();
    38ca:	0e 94 a7 19 	call	0x334e	; 0x334e <HDCM_Forward_M_Right>
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	aa e7       	ldi	r26, 0x7A	; 122
    38d4:	b4 e4       	ldi	r27, 0x44	; 68
    38d6:	8b 87       	std	Y+11, r24	; 0x0b
    38d8:	9c 87       	std	Y+12, r25	; 0x0c
    38da:	ad 87       	std	Y+13, r26	; 0x0d
    38dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38de:	6b 85       	ldd	r22, Y+11	; 0x0b
    38e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	4a e7       	ldi	r20, 0x7A	; 122
    38ec:	55 e4       	ldi	r21, 0x45	; 69
    38ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	8f 83       	std	Y+7, r24	; 0x07
    38f8:	98 87       	std	Y+8, r25	; 0x08
    38fa:	a9 87       	std	Y+9, r26	; 0x09
    38fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3900:	78 85       	ldd	r23, Y+8	; 0x08
    3902:	89 85       	ldd	r24, Y+9	; 0x09
    3904:	9a 85       	ldd	r25, Y+10	; 0x0a
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e8       	ldi	r20, 0x80	; 128
    390c:	5f e3       	ldi	r21, 0x3F	; 63
    390e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3912:	88 23       	and	r24, r24
    3914:	2c f4       	brge	.+10     	; 0x3920 <HDCM_Left+0x152>
		__ticks = 1;
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	9e 83       	std	Y+6, r25	; 0x06
    391c:	8d 83       	std	Y+5, r24	; 0x05
    391e:	3f c0       	rjmp	.+126    	; 0x399e <HDCM_Left+0x1d0>
	else if (__tmp > 65535)
    3920:	6f 81       	ldd	r22, Y+7	; 0x07
    3922:	78 85       	ldd	r23, Y+8	; 0x08
    3924:	89 85       	ldd	r24, Y+9	; 0x09
    3926:	9a 85       	ldd	r25, Y+10	; 0x0a
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	3f ef       	ldi	r19, 0xFF	; 255
    392c:	4f e7       	ldi	r20, 0x7F	; 127
    392e:	57 e4       	ldi	r21, 0x47	; 71
    3930:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3934:	18 16       	cp	r1, r24
    3936:	4c f5       	brge	.+82     	; 0x398a <HDCM_Left+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3938:	6b 85       	ldd	r22, Y+11	; 0x0b
    393a:	7c 85       	ldd	r23, Y+12	; 0x0c
    393c:	8d 85       	ldd	r24, Y+13	; 0x0d
    393e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e2       	ldi	r20, 0x20	; 32
    3946:	51 e4       	ldi	r21, 0x41	; 65
    3948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	bc 01       	movw	r22, r24
    3952:	cd 01       	movw	r24, r26
    3954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	9e 83       	std	Y+6, r25	; 0x06
    395e:	8d 83       	std	Y+5, r24	; 0x05
    3960:	0f c0       	rjmp	.+30     	; 0x3980 <HDCM_Left+0x1b2>
    3962:	80 e9       	ldi	r24, 0x90	; 144
    3964:	91 e0       	ldi	r25, 0x01	; 1
    3966:	9c 83       	std	Y+4, r25	; 0x04
    3968:	8b 83       	std	Y+3, r24	; 0x03
    396a:	8b 81       	ldd	r24, Y+3	; 0x03
    396c:	9c 81       	ldd	r25, Y+4	; 0x04
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	f1 f7       	brne	.-4      	; 0x396e <HDCM_Left+0x1a0>
    3972:	9c 83       	std	Y+4, r25	; 0x04
    3974:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3976:	8d 81       	ldd	r24, Y+5	; 0x05
    3978:	9e 81       	ldd	r25, Y+6	; 0x06
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	9e 83       	std	Y+6, r25	; 0x06
    397e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3980:	8d 81       	ldd	r24, Y+5	; 0x05
    3982:	9e 81       	ldd	r25, Y+6	; 0x06
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	69 f7       	brne	.-38     	; 0x3962 <HDCM_Left+0x194>
    3988:	14 c0       	rjmp	.+40     	; 0x39b2 <HDCM_Left+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398a:	6f 81       	ldd	r22, Y+7	; 0x07
    398c:	78 85       	ldd	r23, Y+8	; 0x08
    398e:	89 85       	ldd	r24, Y+9	; 0x09
    3990:	9a 85       	ldd	r25, Y+10	; 0x0a
    3992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	9e 83       	std	Y+6, r25	; 0x06
    399c:	8d 83       	std	Y+5, r24	; 0x05
    399e:	8d 81       	ldd	r24, Y+5	; 0x05
    39a0:	9e 81       	ldd	r25, Y+6	; 0x06
    39a2:	9a 83       	std	Y+2, r25	; 0x02
    39a4:	89 83       	std	Y+1, r24	; 0x01
    39a6:	89 81       	ldd	r24, Y+1	; 0x01
    39a8:	9a 81       	ldd	r25, Y+2	; 0x02
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <HDCM_Left+0x1dc>
    39ae:	9a 83       	std	Y+2, r25	; 0x02
    39b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    39b2:	6c 96       	adiw	r28, 0x1c	; 28
    39b4:	0f b6       	in	r0, 0x3f	; 63
    39b6:	f8 94       	cli
    39b8:	de bf       	out	0x3e, r29	; 62
    39ba:	0f be       	out	0x3f, r0	; 63
    39bc:	cd bf       	out	0x3d, r28	; 61
    39be:	cf 91       	pop	r28
    39c0:	df 91       	pop	r29
    39c2:	08 95       	ret

000039c4 <HCLCD_WriteCommand4Bit>:
#include "../../LIB/STD_TYPES.H"
#include "../../MCAL/MDIO/MDIO_Interface.h"
#include "HCLCD_Config.h"

void HCLCD_WriteCommand4Bit(u8 Copy_u8Command)
{
    39c4:	df 93       	push	r29
    39c6:	cf 93       	push	r28
    39c8:	cd b7       	in	r28, 0x3d	; 61
    39ca:	de b7       	in	r29, 0x3e	; 62
    39cc:	6d 97       	sbiw	r28, 0x1d	; 29
    39ce:	0f b6       	in	r0, 0x3f	; 63
    39d0:	f8 94       	cli
    39d2:	de bf       	out	0x3e, r29	; 62
    39d4:	0f be       	out	0x3f, r0	; 63
    39d6:	cd bf       	out	0x3d, r28	; 61
    39d8:	8d 8f       	std	Y+29, r24	; 0x1d
	//Set RW to Zero
	MDIO_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    39da:	82 e0       	ldi	r24, 0x02	; 2
    39dc:	61 e0       	ldi	r22, 0x01	; 1
    39de:	40 e0       	ldi	r20, 0x00	; 0
    39e0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>

	//Set RS to zero
	MDIO_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	61 e0       	ldi	r22, 0x01	; 1
    39e8:	40 e0       	ldi	r20, 0x00	; 0
    39ea:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>

	//Set High Nibble Value of the command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT,Copy_u8Command>>4);
    39ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39f0:	98 2f       	mov	r25, r24
    39f2:	92 95       	swap	r25
    39f4:	9f 70       	andi	r25, 0x0F	; 15
    39f6:	84 e0       	ldi	r24, 0x04	; 4
    39f8:	60 e0       	ldi	r22, 0x00	; 0
    39fa:	49 2f       	mov	r20, r25
    39fc:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_SetNibbleValue>

	//Set E to 1 then wait for 2 ms then set it to 0(sending the falling edge)
	MDIO_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3a00:	83 e0       	ldi	r24, 0x03	; 3
    3a02:	61 e0       	ldi	r22, 0x01	; 1
    3a04:	41 e0       	ldi	r20, 0x01	; 1
    3a06:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	a0 e0       	ldi	r26, 0x00	; 0
    3a10:	b0 e4       	ldi	r27, 0x40	; 64
    3a12:	89 8f       	std	Y+25, r24	; 0x19
    3a14:	9a 8f       	std	Y+26, r25	; 0x1a
    3a16:	ab 8f       	std	Y+27, r26	; 0x1b
    3a18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a1a:	69 8d       	ldd	r22, Y+25	; 0x19
    3a1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	4a e7       	ldi	r20, 0x7A	; 122
    3a28:	55 e4       	ldi	r21, 0x45	; 69
    3a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2e:	dc 01       	movw	r26, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	8d 8b       	std	Y+21, r24	; 0x15
    3a34:	9e 8b       	std	Y+22, r25	; 0x16
    3a36:	af 8b       	std	Y+23, r26	; 0x17
    3a38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a40:	98 8d       	ldd	r25, Y+24	; 0x18
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 e8       	ldi	r20, 0x80	; 128
    3a48:	5f e3       	ldi	r21, 0x3F	; 63
    3a4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a4e:	88 23       	and	r24, r24
    3a50:	2c f4       	brge	.+10     	; 0x3a5c <HCLCD_WriteCommand4Bit+0x98>
		__ticks = 1;
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	9c 8b       	std	Y+20, r25	; 0x14
    3a58:	8b 8b       	std	Y+19, r24	; 0x13
    3a5a:	3f c0       	rjmp	.+126    	; 0x3ada <HCLCD_WriteCommand4Bit+0x116>
	else if (__tmp > 65535)
    3a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a60:	8f 89       	ldd	r24, Y+23	; 0x17
    3a62:	98 8d       	ldd	r25, Y+24	; 0x18
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	3f ef       	ldi	r19, 0xFF	; 255
    3a68:	4f e7       	ldi	r20, 0x7F	; 127
    3a6a:	57 e4       	ldi	r21, 0x47	; 71
    3a6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a70:	18 16       	cp	r1, r24
    3a72:	4c f5       	brge	.+82     	; 0x3ac6 <HCLCD_WriteCommand4Bit+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a74:	69 8d       	ldd	r22, Y+25	; 0x19
    3a76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	40 e2       	ldi	r20, 0x20	; 32
    3a82:	51 e4       	ldi	r21, 0x41	; 65
    3a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	cd 01       	movw	r24, r26
    3a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	9c 8b       	std	Y+20, r25	; 0x14
    3a9a:	8b 8b       	std	Y+19, r24	; 0x13
    3a9c:	0f c0       	rjmp	.+30     	; 0x3abc <HCLCD_WriteCommand4Bit+0xf8>
    3a9e:	80 e9       	ldi	r24, 0x90	; 144
    3aa0:	91 e0       	ldi	r25, 0x01	; 1
    3aa2:	9a 8b       	std	Y+18, r25	; 0x12
    3aa4:	89 8b       	std	Y+17, r24	; 0x11
    3aa6:	89 89       	ldd	r24, Y+17	; 0x11
    3aa8:	9a 89       	ldd	r25, Y+18	; 0x12
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	f1 f7       	brne	.-4      	; 0x3aaa <HCLCD_WriteCommand4Bit+0xe6>
    3aae:	9a 8b       	std	Y+18, r25	; 0x12
    3ab0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	9c 8b       	std	Y+20, r25	; 0x14
    3aba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3abc:	8b 89       	ldd	r24, Y+19	; 0x13
    3abe:	9c 89       	ldd	r25, Y+20	; 0x14
    3ac0:	00 97       	sbiw	r24, 0x00	; 0
    3ac2:	69 f7       	brne	.-38     	; 0x3a9e <HCLCD_WriteCommand4Bit+0xda>
    3ac4:	14 c0       	rjmp	.+40     	; 0x3aee <HCLCD_WriteCommand4Bit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    3aca:	8f 89       	ldd	r24, Y+23	; 0x17
    3acc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	9c 8b       	std	Y+20, r25	; 0x14
    3ad8:	8b 8b       	std	Y+19, r24	; 0x13
    3ada:	8b 89       	ldd	r24, Y+19	; 0x13
    3adc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ade:	98 8b       	std	Y+16, r25	; 0x10
    3ae0:	8f 87       	std	Y+15, r24	; 0x0f
    3ae2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ae4:	98 89       	ldd	r25, Y+16	; 0x10
    3ae6:	01 97       	sbiw	r24, 0x01	; 1
    3ae8:	f1 f7       	brne	.-4      	; 0x3ae6 <HCLCD_WriteCommand4Bit+0x122>
    3aea:	98 8b       	std	Y+16, r25	; 0x10
    3aec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3aee:	83 e0       	ldi	r24, 0x03	; 3
    3af0:	61 e0       	ldi	r22, 0x01	; 1
    3af2:	40 e0       	ldi	r20, 0x00	; 0
    3af4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>

	//Set Low Nibble Value of the command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT,Copy_u8Command);
    3af8:	84 e0       	ldi	r24, 0x04	; 4
    3afa:	60 e0       	ldi	r22, 0x00	; 0
    3afc:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3afe:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_SetNibbleValue>

	//Set E to 1 then wait for 2 ms then set it to 0(sending the falling edge)
		MDIO_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3b02:	83 e0       	ldi	r24, 0x03	; 3
    3b04:	61 e0       	ldi	r22, 0x01	; 1
    3b06:	41 e0       	ldi	r20, 0x01	; 1
    3b08:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	a0 e0       	ldi	r26, 0x00	; 0
    3b12:	b0 e4       	ldi	r27, 0x40	; 64
    3b14:	8b 87       	std	Y+11, r24	; 0x0b
    3b16:	9c 87       	std	Y+12, r25	; 0x0c
    3b18:	ad 87       	std	Y+13, r26	; 0x0d
    3b1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	4a e7       	ldi	r20, 0x7A	; 122
    3b2a:	55 e4       	ldi	r21, 0x45	; 69
    3b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	8f 83       	std	Y+7, r24	; 0x07
    3b36:	98 87       	std	Y+8, r25	; 0x08
    3b38:	a9 87       	std	Y+9, r26	; 0x09
    3b3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b3e:	78 85       	ldd	r23, Y+8	; 0x08
    3b40:	89 85       	ldd	r24, Y+9	; 0x09
    3b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	40 e8       	ldi	r20, 0x80	; 128
    3b4a:	5f e3       	ldi	r21, 0x3F	; 63
    3b4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b50:	88 23       	and	r24, r24
    3b52:	2c f4       	brge	.+10     	; 0x3b5e <HCLCD_WriteCommand4Bit+0x19a>
		__ticks = 1;
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	9e 83       	std	Y+6, r25	; 0x06
    3b5a:	8d 83       	std	Y+5, r24	; 0x05
    3b5c:	3f c0       	rjmp	.+126    	; 0x3bdc <HCLCD_WriteCommand4Bit+0x218>
	else if (__tmp > 65535)
    3b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b60:	78 85       	ldd	r23, Y+8	; 0x08
    3b62:	89 85       	ldd	r24, Y+9	; 0x09
    3b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	3f ef       	ldi	r19, 0xFF	; 255
    3b6a:	4f e7       	ldi	r20, 0x7F	; 127
    3b6c:	57 e4       	ldi	r21, 0x47	; 71
    3b6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b72:	18 16       	cp	r1, r24
    3b74:	4c f5       	brge	.+82     	; 0x3bc8 <HCLCD_WriteCommand4Bit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	40 e2       	ldi	r20, 0x20	; 32
    3b84:	51 e4       	ldi	r21, 0x41	; 65
    3b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	bc 01       	movw	r22, r24
    3b90:	cd 01       	movw	r24, r26
    3b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	9e 83       	std	Y+6, r25	; 0x06
    3b9c:	8d 83       	std	Y+5, r24	; 0x05
    3b9e:	0f c0       	rjmp	.+30     	; 0x3bbe <HCLCD_WriteCommand4Bit+0x1fa>
    3ba0:	80 e9       	ldi	r24, 0x90	; 144
    3ba2:	91 e0       	ldi	r25, 0x01	; 1
    3ba4:	9c 83       	std	Y+4, r25	; 0x04
    3ba6:	8b 83       	std	Y+3, r24	; 0x03
    3ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    3baa:	9c 81       	ldd	r25, Y+4	; 0x04
    3bac:	01 97       	sbiw	r24, 0x01	; 1
    3bae:	f1 f7       	brne	.-4      	; 0x3bac <HCLCD_WriteCommand4Bit+0x1e8>
    3bb0:	9c 83       	std	Y+4, r25	; 0x04
    3bb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb8:	01 97       	sbiw	r24, 0x01	; 1
    3bba:	9e 83       	std	Y+6, r25	; 0x06
    3bbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc2:	00 97       	sbiw	r24, 0x00	; 0
    3bc4:	69 f7       	brne	.-38     	; 0x3ba0 <HCLCD_WriteCommand4Bit+0x1dc>
    3bc6:	14 c0       	rjmp	.+40     	; 0x3bf0 <HCLCD_WriteCommand4Bit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bca:	78 85       	ldd	r23, Y+8	; 0x08
    3bcc:	89 85       	ldd	r24, Y+9	; 0x09
    3bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	9e 83       	std	Y+6, r25	; 0x06
    3bda:	8d 83       	std	Y+5, r24	; 0x05
    3bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bde:	9e 81       	ldd	r25, Y+6	; 0x06
    3be0:	9a 83       	std	Y+2, r25	; 0x02
    3be2:	89 83       	std	Y+1, r24	; 0x01
    3be4:	89 81       	ldd	r24, Y+1	; 0x01
    3be6:	9a 81       	ldd	r25, Y+2	; 0x02
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	f1 f7       	brne	.-4      	; 0x3be8 <HCLCD_WriteCommand4Bit+0x224>
    3bec:	9a 83       	std	Y+2, r25	; 0x02
    3bee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		MDIO_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3bf0:	83 e0       	ldi	r24, 0x03	; 3
    3bf2:	61 e0       	ldi	r22, 0x01	; 1
    3bf4:	40 e0       	ldi	r20, 0x00	; 0
    3bf6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
}
    3bfa:	6d 96       	adiw	r28, 0x1d	; 29
    3bfc:	0f b6       	in	r0, 0x3f	; 63
    3bfe:	f8 94       	cli
    3c00:	de bf       	out	0x3e, r29	; 62
    3c02:	0f be       	out	0x3f, r0	; 63
    3c04:	cd bf       	out	0x3d, r28	; 61
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	08 95       	ret

00003c0c <HCLCD_Init4Bit>:

void HCLCD_Init4Bit()
{
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
    3c14:	e9 97       	sbiw	r28, 0x39	; 57
    3c16:	0f b6       	in	r0, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	de bf       	out	0x3e, r29	; 62
    3c1c:	0f be       	out	0x3f, r0	; 63
    3c1e:	cd bf       	out	0x3d, r28	; 61
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	ac e0       	ldi	r26, 0x0C	; 12
    3c26:	b2 e4       	ldi	r27, 0x42	; 66
    3c28:	8d ab       	std	Y+53, r24	; 0x35
    3c2a:	9e ab       	std	Y+54, r25	; 0x36
    3c2c:	af ab       	std	Y+55, r26	; 0x37
    3c2e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c30:	6d a9       	ldd	r22, Y+53	; 0x35
    3c32:	7e a9       	ldd	r23, Y+54	; 0x36
    3c34:	8f a9       	ldd	r24, Y+55	; 0x37
    3c36:	98 ad       	ldd	r25, Y+56	; 0x38
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	4a e7       	ldi	r20, 0x7A	; 122
    3c3e:	55 e4       	ldi	r21, 0x45	; 69
    3c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	89 ab       	std	Y+49, r24	; 0x31
    3c4a:	9a ab       	std	Y+50, r25	; 0x32
    3c4c:	ab ab       	std	Y+51, r26	; 0x33
    3c4e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c50:	69 a9       	ldd	r22, Y+49	; 0x31
    3c52:	7a a9       	ldd	r23, Y+50	; 0x32
    3c54:	8b a9       	ldd	r24, Y+51	; 0x33
    3c56:	9c a9       	ldd	r25, Y+52	; 0x34
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	40 e8       	ldi	r20, 0x80	; 128
    3c5e:	5f e3       	ldi	r21, 0x3F	; 63
    3c60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c64:	88 23       	and	r24, r24
    3c66:	2c f4       	brge	.+10     	; 0x3c72 <HCLCD_Init4Bit+0x66>
		__ticks = 1;
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	98 ab       	std	Y+48, r25	; 0x30
    3c6e:	8f a7       	std	Y+47, r24	; 0x2f
    3c70:	3f c0       	rjmp	.+126    	; 0x3cf0 <HCLCD_Init4Bit+0xe4>
	else if (__tmp > 65535)
    3c72:	69 a9       	ldd	r22, Y+49	; 0x31
    3c74:	7a a9       	ldd	r23, Y+50	; 0x32
    3c76:	8b a9       	ldd	r24, Y+51	; 0x33
    3c78:	9c a9       	ldd	r25, Y+52	; 0x34
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	3f ef       	ldi	r19, 0xFF	; 255
    3c7e:	4f e7       	ldi	r20, 0x7F	; 127
    3c80:	57 e4       	ldi	r21, 0x47	; 71
    3c82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c86:	18 16       	cp	r1, r24
    3c88:	4c f5       	brge	.+82     	; 0x3cdc <HCLCD_Init4Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8a:	6d a9       	ldd	r22, Y+53	; 0x35
    3c8c:	7e a9       	ldd	r23, Y+54	; 0x36
    3c8e:	8f a9       	ldd	r24, Y+55	; 0x37
    3c90:	98 ad       	ldd	r25, Y+56	; 0x38
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	40 e2       	ldi	r20, 0x20	; 32
    3c98:	51 e4       	ldi	r21, 0x41	; 65
    3c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	bc 01       	movw	r22, r24
    3ca4:	cd 01       	movw	r24, r26
    3ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	98 ab       	std	Y+48, r25	; 0x30
    3cb0:	8f a7       	std	Y+47, r24	; 0x2f
    3cb2:	0f c0       	rjmp	.+30     	; 0x3cd2 <HCLCD_Init4Bit+0xc6>
    3cb4:	80 e9       	ldi	r24, 0x90	; 144
    3cb6:	91 e0       	ldi	r25, 0x01	; 1
    3cb8:	9e a7       	std	Y+46, r25	; 0x2e
    3cba:	8d a7       	std	Y+45, r24	; 0x2d
    3cbc:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cbe:	9e a5       	ldd	r25, Y+46	; 0x2e
    3cc0:	01 97       	sbiw	r24, 0x01	; 1
    3cc2:	f1 f7       	brne	.-4      	; 0x3cc0 <HCLCD_Init4Bit+0xb4>
    3cc4:	9e a7       	std	Y+46, r25	; 0x2e
    3cc6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cca:	98 a9       	ldd	r25, Y+48	; 0x30
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	98 ab       	std	Y+48, r25	; 0x30
    3cd0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cd4:	98 a9       	ldd	r25, Y+48	; 0x30
    3cd6:	00 97       	sbiw	r24, 0x00	; 0
    3cd8:	69 f7       	brne	.-38     	; 0x3cb4 <HCLCD_Init4Bit+0xa8>
    3cda:	14 c0       	rjmp	.+40     	; 0x3d04 <HCLCD_Init4Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cdc:	69 a9       	ldd	r22, Y+49	; 0x31
    3cde:	7a a9       	ldd	r23, Y+50	; 0x32
    3ce0:	8b a9       	ldd	r24, Y+51	; 0x33
    3ce2:	9c a9       	ldd	r25, Y+52	; 0x34
    3ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	98 ab       	std	Y+48, r25	; 0x30
    3cee:	8f a7       	std	Y+47, r24	; 0x2f
    3cf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cf2:	98 a9       	ldd	r25, Y+48	; 0x30
    3cf4:	9c a7       	std	Y+44, r25	; 0x2c
    3cf6:	8b a7       	std	Y+43, r24	; 0x2b
    3cf8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cfa:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cfc:	01 97       	sbiw	r24, 0x01	; 1
    3cfe:	f1 f7       	brne	.-4      	; 0x3cfc <HCLCD_Init4Bit+0xf0>
    3d00:	9c a7       	std	Y+44, r25	; 0x2c
    3d02:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(35);

	// Set direction of the 4 data pins
	u8 Loc_u8Counter = 0;
    3d04:	19 ae       	std	Y+57, r1	; 0x39
	for(Loc_u8Counter = HCLCD_PIN_START;Loc_u8Counter<(HCLCD_PIN_START+4);Loc_u8Counter++)
    3d06:	84 e0       	ldi	r24, 0x04	; 4
    3d08:	89 af       	std	Y+57, r24	; 0x39
    3d0a:	08 c0       	rjmp	.+16     	; 0x3d1c <HCLCD_Init4Bit+0x110>
	{
		MDIO_SetPinDirection(Loc_u8Counter,DATA_PORT,PIN_OUTPUT);
    3d0c:	89 ad       	ldd	r24, Y+57	; 0x39
    3d0e:	60 e0       	ldi	r22, 0x00	; 0
    3d10:	41 e0       	ldi	r20, 0x01	; 1
    3d12:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
{
	_delay_ms(35);

	// Set direction of the 4 data pins
	u8 Loc_u8Counter = 0;
	for(Loc_u8Counter = HCLCD_PIN_START;Loc_u8Counter<(HCLCD_PIN_START+4);Loc_u8Counter++)
    3d16:	89 ad       	ldd	r24, Y+57	; 0x39
    3d18:	8f 5f       	subi	r24, 0xFF	; 255
    3d1a:	89 af       	std	Y+57, r24	; 0x39
    3d1c:	89 ad       	ldd	r24, Y+57	; 0x39
    3d1e:	88 30       	cpi	r24, 0x08	; 8
    3d20:	a8 f3       	brcs	.-22     	; 0x3d0c <HCLCD_Init4Bit+0x100>
	{
		MDIO_SetPinDirection(Loc_u8Counter,DATA_PORT,PIN_OUTPUT);
	}

	// Set direction of the 3 Control pins
	for(Loc_u8Counter = RS;Loc_u8Counter<(RS+3);Loc_u8Counter++)
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	89 af       	std	Y+57, r24	; 0x39
    3d26:	08 c0       	rjmp	.+16     	; 0x3d38 <HCLCD_Init4Bit+0x12c>
	{
		MDIO_SetPinDirection(Loc_u8Counter,CONTROL_PORT,PIN_OUTPUT);
    3d28:	89 ad       	ldd	r24, Y+57	; 0x39
    3d2a:	61 e0       	ldi	r22, 0x01	; 1
    3d2c:	41 e0       	ldi	r20, 0x01	; 1
    3d2e:	0e 94 af 0b 	call	0x175e	; 0x175e <MDIO_SetPinDirection>
	{
		MDIO_SetPinDirection(Loc_u8Counter,DATA_PORT,PIN_OUTPUT);
	}

	// Set direction of the 3 Control pins
	for(Loc_u8Counter = RS;Loc_u8Counter<(RS+3);Loc_u8Counter++)
    3d32:	89 ad       	ldd	r24, Y+57	; 0x39
    3d34:	8f 5f       	subi	r24, 0xFF	; 255
    3d36:	89 af       	std	Y+57, r24	; 0x39
    3d38:	89 ad       	ldd	r24, Y+57	; 0x39
    3d3a:	84 30       	cpi	r24, 0x04	; 4
    3d3c:	a8 f3       	brcs	.-22     	; 0x3d28 <HCLCD_Init4Bit+0x11c>

	/*
	 * Start of the initialization sequence
	 */

	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT,FUNCTION_SET_MODE_COMMAND>>4);
    3d3e:	84 e0       	ldi	r24, 0x04	; 4
    3d40:	60 e0       	ldi	r22, 0x00	; 0
    3d42:	42 e0       	ldi	r20, 0x02	; 2
    3d44:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_SetNibbleValue>

	MDIO_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3d48:	83 e0       	ldi	r24, 0x03	; 3
    3d4a:	61 e0       	ldi	r22, 0x01	; 1
    3d4c:	41 e0       	ldi	r20, 0x01	; 1
    3d4e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    3d52:	80 e0       	ldi	r24, 0x00	; 0
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	a0 e0       	ldi	r26, 0x00	; 0
    3d58:	b0 e4       	ldi	r27, 0x40	; 64
    3d5a:	8f a3       	std	Y+39, r24	; 0x27
    3d5c:	98 a7       	std	Y+40, r25	; 0x28
    3d5e:	a9 a7       	std	Y+41, r26	; 0x29
    3d60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d62:	6f a1       	ldd	r22, Y+39	; 0x27
    3d64:	78 a5       	ldd	r23, Y+40	; 0x28
    3d66:	89 a5       	ldd	r24, Y+41	; 0x29
    3d68:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	4a e7       	ldi	r20, 0x7A	; 122
    3d70:	55 e4       	ldi	r21, 0x45	; 69
    3d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	8b a3       	std	Y+35, r24	; 0x23
    3d7c:	9c a3       	std	Y+36, r25	; 0x24
    3d7e:	ad a3       	std	Y+37, r26	; 0x25
    3d80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d82:	6b a1       	ldd	r22, Y+35	; 0x23
    3d84:	7c a1       	ldd	r23, Y+36	; 0x24
    3d86:	8d a1       	ldd	r24, Y+37	; 0x25
    3d88:	9e a1       	ldd	r25, Y+38	; 0x26
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	40 e8       	ldi	r20, 0x80	; 128
    3d90:	5f e3       	ldi	r21, 0x3F	; 63
    3d92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d96:	88 23       	and	r24, r24
    3d98:	2c f4       	brge	.+10     	; 0x3da4 <HCLCD_Init4Bit+0x198>
		__ticks = 1;
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	9a a3       	std	Y+34, r25	; 0x22
    3da0:	89 a3       	std	Y+33, r24	; 0x21
    3da2:	3f c0       	rjmp	.+126    	; 0x3e22 <HCLCD_Init4Bit+0x216>
	else if (__tmp > 65535)
    3da4:	6b a1       	ldd	r22, Y+35	; 0x23
    3da6:	7c a1       	ldd	r23, Y+36	; 0x24
    3da8:	8d a1       	ldd	r24, Y+37	; 0x25
    3daa:	9e a1       	ldd	r25, Y+38	; 0x26
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	3f ef       	ldi	r19, 0xFF	; 255
    3db0:	4f e7       	ldi	r20, 0x7F	; 127
    3db2:	57 e4       	ldi	r21, 0x47	; 71
    3db4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3db8:	18 16       	cp	r1, r24
    3dba:	4c f5       	brge	.+82     	; 0x3e0e <HCLCD_Init4Bit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dbc:	6f a1       	ldd	r22, Y+39	; 0x27
    3dbe:	78 a5       	ldd	r23, Y+40	; 0x28
    3dc0:	89 a5       	ldd	r24, Y+41	; 0x29
    3dc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	40 e2       	ldi	r20, 0x20	; 32
    3dca:	51 e4       	ldi	r21, 0x41	; 65
    3dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	bc 01       	movw	r22, r24
    3dd6:	cd 01       	movw	r24, r26
    3dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ddc:	dc 01       	movw	r26, r24
    3dde:	cb 01       	movw	r24, r22
    3de0:	9a a3       	std	Y+34, r25	; 0x22
    3de2:	89 a3       	std	Y+33, r24	; 0x21
    3de4:	0f c0       	rjmp	.+30     	; 0x3e04 <HCLCD_Init4Bit+0x1f8>
    3de6:	80 e9       	ldi	r24, 0x90	; 144
    3de8:	91 e0       	ldi	r25, 0x01	; 1
    3dea:	98 a3       	std	Y+32, r25	; 0x20
    3dec:	8f 8f       	std	Y+31, r24	; 0x1f
    3dee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3df0:	98 a1       	ldd	r25, Y+32	; 0x20
    3df2:	01 97       	sbiw	r24, 0x01	; 1
    3df4:	f1 f7       	brne	.-4      	; 0x3df2 <HCLCD_Init4Bit+0x1e6>
    3df6:	98 a3       	std	Y+32, r25	; 0x20
    3df8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dfa:	89 a1       	ldd	r24, Y+33	; 0x21
    3dfc:	9a a1       	ldd	r25, Y+34	; 0x22
    3dfe:	01 97       	sbiw	r24, 0x01	; 1
    3e00:	9a a3       	std	Y+34, r25	; 0x22
    3e02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e04:	89 a1       	ldd	r24, Y+33	; 0x21
    3e06:	9a a1       	ldd	r25, Y+34	; 0x22
    3e08:	00 97       	sbiw	r24, 0x00	; 0
    3e0a:	69 f7       	brne	.-38     	; 0x3de6 <HCLCD_Init4Bit+0x1da>
    3e0c:	14 c0       	rjmp	.+40     	; 0x3e36 <HCLCD_Init4Bit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e0e:	6b a1       	ldd	r22, Y+35	; 0x23
    3e10:	7c a1       	ldd	r23, Y+36	; 0x24
    3e12:	8d a1       	ldd	r24, Y+37	; 0x25
    3e14:	9e a1       	ldd	r25, Y+38	; 0x26
    3e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	9a a3       	std	Y+34, r25	; 0x22
    3e20:	89 a3       	std	Y+33, r24	; 0x21
    3e22:	89 a1       	ldd	r24, Y+33	; 0x21
    3e24:	9a a1       	ldd	r25, Y+34	; 0x22
    3e26:	9e 8f       	std	Y+30, r25	; 0x1e
    3e28:	8d 8f       	std	Y+29, r24	; 0x1d
    3e2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	f1 f7       	brne	.-4      	; 0x3e2e <HCLCD_Init4Bit+0x222>
    3e32:	9e 8f       	std	Y+30, r25	; 0x1e
    3e34:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	MDIO_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3e36:	83 e0       	ldi	r24, 0x03	; 3
    3e38:	61 e0       	ldi	r22, 0x01	; 1
    3e3a:	40 e0       	ldi	r20, 0x00	; 0
    3e3c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
	//Send Function Set Command
	HCLCD_WriteCommand4Bit(FUNCTION_SET_MODE_COMMAND);
    3e40:	88 e2       	ldi	r24, 0x28	; 40
    3e42:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <HCLCD_WriteCommand4Bit>
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	a0 e8       	ldi	r26, 0x80	; 128
    3e4c:	bf e3       	ldi	r27, 0x3F	; 63
    3e4e:	89 8f       	std	Y+25, r24	; 0x19
    3e50:	9a 8f       	std	Y+26, r25	; 0x1a
    3e52:	ab 8f       	std	Y+27, r26	; 0x1b
    3e54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e56:	69 8d       	ldd	r22, Y+25	; 0x19
    3e58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	4a e7       	ldi	r20, 0x7A	; 122
    3e64:	55 e4       	ldi	r21, 0x45	; 69
    3e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	8d 8b       	std	Y+21, r24	; 0x15
    3e70:	9e 8b       	std	Y+22, r25	; 0x16
    3e72:	af 8b       	std	Y+23, r26	; 0x17
    3e74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e76:	6d 89       	ldd	r22, Y+21	; 0x15
    3e78:	7e 89       	ldd	r23, Y+22	; 0x16
    3e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    3e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	40 e8       	ldi	r20, 0x80	; 128
    3e84:	5f e3       	ldi	r21, 0x3F	; 63
    3e86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e8a:	88 23       	and	r24, r24
    3e8c:	2c f4       	brge	.+10     	; 0x3e98 <HCLCD_Init4Bit+0x28c>
		__ticks = 1;
    3e8e:	81 e0       	ldi	r24, 0x01	; 1
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	9c 8b       	std	Y+20, r25	; 0x14
    3e94:	8b 8b       	std	Y+19, r24	; 0x13
    3e96:	3f c0       	rjmp	.+126    	; 0x3f16 <HCLCD_Init4Bit+0x30a>
	else if (__tmp > 65535)
    3e98:	6d 89       	ldd	r22, Y+21	; 0x15
    3e9a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e9e:	98 8d       	ldd	r25, Y+24	; 0x18
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	3f ef       	ldi	r19, 0xFF	; 255
    3ea4:	4f e7       	ldi	r20, 0x7F	; 127
    3ea6:	57 e4       	ldi	r21, 0x47	; 71
    3ea8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eac:	18 16       	cp	r1, r24
    3eae:	4c f5       	brge	.+82     	; 0x3f02 <HCLCD_Init4Bit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb0:	69 8d       	ldd	r22, Y+25	; 0x19
    3eb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	40 e2       	ldi	r20, 0x20	; 32
    3ebe:	51 e4       	ldi	r21, 0x41	; 65
    3ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	9c 8b       	std	Y+20, r25	; 0x14
    3ed6:	8b 8b       	std	Y+19, r24	; 0x13
    3ed8:	0f c0       	rjmp	.+30     	; 0x3ef8 <HCLCD_Init4Bit+0x2ec>
    3eda:	80 e9       	ldi	r24, 0x90	; 144
    3edc:	91 e0       	ldi	r25, 0x01	; 1
    3ede:	9a 8b       	std	Y+18, r25	; 0x12
    3ee0:	89 8b       	std	Y+17, r24	; 0x11
    3ee2:	89 89       	ldd	r24, Y+17	; 0x11
    3ee4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ee6:	01 97       	sbiw	r24, 0x01	; 1
    3ee8:	f1 f7       	brne	.-4      	; 0x3ee6 <HCLCD_Init4Bit+0x2da>
    3eea:	9a 8b       	std	Y+18, r25	; 0x12
    3eec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eee:	8b 89       	ldd	r24, Y+19	; 0x13
    3ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	9c 8b       	std	Y+20, r25	; 0x14
    3ef6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    3efa:	9c 89       	ldd	r25, Y+20	; 0x14
    3efc:	00 97       	sbiw	r24, 0x00	; 0
    3efe:	69 f7       	brne	.-38     	; 0x3eda <HCLCD_Init4Bit+0x2ce>
    3f00:	14 c0       	rjmp	.+40     	; 0x3f2a <HCLCD_Init4Bit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f02:	6d 89       	ldd	r22, Y+21	; 0x15
    3f04:	7e 89       	ldd	r23, Y+22	; 0x16
    3f06:	8f 89       	ldd	r24, Y+23	; 0x17
    3f08:	98 8d       	ldd	r25, Y+24	; 0x18
    3f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	9c 8b       	std	Y+20, r25	; 0x14
    3f14:	8b 8b       	std	Y+19, r24	; 0x13
    3f16:	8b 89       	ldd	r24, Y+19	; 0x13
    3f18:	9c 89       	ldd	r25, Y+20	; 0x14
    3f1a:	98 8b       	std	Y+16, r25	; 0x10
    3f1c:	8f 87       	std	Y+15, r24	; 0x0f
    3f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f20:	98 89       	ldd	r25, Y+16	; 0x10
    3f22:	01 97       	sbiw	r24, 0x01	; 1
    3f24:	f1 f7       	brne	.-4      	; 0x3f22 <HCLCD_Init4Bit+0x316>
    3f26:	98 8b       	std	Y+16, r25	; 0x10
    3f28:	8f 87       	std	Y+15, r24	; 0x0f

	//Send Display On/Off Command
	_delay_ms(1);
	HCLCD_WriteCommand4Bit(DISPLAY_ON_OFF_COMMAND);
    3f2a:	8f e0       	ldi	r24, 0x0F	; 15
    3f2c:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <HCLCD_WriteCommand4Bit>

	//Display Clear Mode
	HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <HCLCD_WriteCommand4Bit>
    3f36:	80 e0       	ldi	r24, 0x00	; 0
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	a0 e0       	ldi	r26, 0x00	; 0
    3f3c:	b0 e4       	ldi	r27, 0x40	; 64
    3f3e:	8b 87       	std	Y+11, r24	; 0x0b
    3f40:	9c 87       	std	Y+12, r25	; 0x0c
    3f42:	ad 87       	std	Y+13, r26	; 0x0d
    3f44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	4a e7       	ldi	r20, 0x7A	; 122
    3f54:	55 e4       	ldi	r21, 0x45	; 69
    3f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	8f 83       	std	Y+7, r24	; 0x07
    3f60:	98 87       	std	Y+8, r25	; 0x08
    3f62:	a9 87       	std	Y+9, r26	; 0x09
    3f64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f66:	6f 81       	ldd	r22, Y+7	; 0x07
    3f68:	78 85       	ldd	r23, Y+8	; 0x08
    3f6a:	89 85       	ldd	r24, Y+9	; 0x09
    3f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	40 e8       	ldi	r20, 0x80	; 128
    3f74:	5f e3       	ldi	r21, 0x3F	; 63
    3f76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f7a:	88 23       	and	r24, r24
    3f7c:	2c f4       	brge	.+10     	; 0x3f88 <HCLCD_Init4Bit+0x37c>
		__ticks = 1;
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	9e 83       	std	Y+6, r25	; 0x06
    3f84:	8d 83       	std	Y+5, r24	; 0x05
    3f86:	3f c0       	rjmp	.+126    	; 0x4006 <HCLCD_Init4Bit+0x3fa>
	else if (__tmp > 65535)
    3f88:	6f 81       	ldd	r22, Y+7	; 0x07
    3f8a:	78 85       	ldd	r23, Y+8	; 0x08
    3f8c:	89 85       	ldd	r24, Y+9	; 0x09
    3f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	3f ef       	ldi	r19, 0xFF	; 255
    3f94:	4f e7       	ldi	r20, 0x7F	; 127
    3f96:	57 e4       	ldi	r21, 0x47	; 71
    3f98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f9c:	18 16       	cp	r1, r24
    3f9e:	4c f5       	brge	.+82     	; 0x3ff2 <HCLCD_Init4Bit+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	40 e2       	ldi	r20, 0x20	; 32
    3fae:	51 e4       	ldi	r21, 0x41	; 65
    3fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	bc 01       	movw	r22, r24
    3fba:	cd 01       	movw	r24, r26
    3fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	9e 83       	std	Y+6, r25	; 0x06
    3fc6:	8d 83       	std	Y+5, r24	; 0x05
    3fc8:	0f c0       	rjmp	.+30     	; 0x3fe8 <HCLCD_Init4Bit+0x3dc>
    3fca:	80 e9       	ldi	r24, 0x90	; 144
    3fcc:	91 e0       	ldi	r25, 0x01	; 1
    3fce:	9c 83       	std	Y+4, r25	; 0x04
    3fd0:	8b 83       	std	Y+3, r24	; 0x03
    3fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd6:	01 97       	sbiw	r24, 0x01	; 1
    3fd8:	f1 f7       	brne	.-4      	; 0x3fd6 <HCLCD_Init4Bit+0x3ca>
    3fda:	9c 83       	std	Y+4, r25	; 0x04
    3fdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fde:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe2:	01 97       	sbiw	r24, 0x01	; 1
    3fe4:	9e 83       	std	Y+6, r25	; 0x06
    3fe6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fea:	9e 81       	ldd	r25, Y+6	; 0x06
    3fec:	00 97       	sbiw	r24, 0x00	; 0
    3fee:	69 f7       	brne	.-38     	; 0x3fca <HCLCD_Init4Bit+0x3be>
    3ff0:	14 c0       	rjmp	.+40     	; 0x401a <HCLCD_Init4Bit+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ff4:	78 85       	ldd	r23, Y+8	; 0x08
    3ff6:	89 85       	ldd	r24, Y+9	; 0x09
    3ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	9e 83       	std	Y+6, r25	; 0x06
    4004:	8d 83       	std	Y+5, r24	; 0x05
    4006:	8d 81       	ldd	r24, Y+5	; 0x05
    4008:	9e 81       	ldd	r25, Y+6	; 0x06
    400a:	9a 83       	std	Y+2, r25	; 0x02
    400c:	89 83       	std	Y+1, r24	; 0x01
    400e:	89 81       	ldd	r24, Y+1	; 0x01
    4010:	9a 81       	ldd	r25, Y+2	; 0x02
    4012:	01 97       	sbiw	r24, 0x01	; 1
    4014:	f1 f7       	brne	.-4      	; 0x4012 <HCLCD_Init4Bit+0x406>
    4016:	9a 83       	std	Y+2, r25	; 0x02
    4018:	89 83       	std	Y+1, r24	; 0x01

	//Entry Mode
	_delay_ms(2);
	HCLCD_WriteCommand4Bit(ENTRY_MODE_COMMAND);
    401a:	86 e0       	ldi	r24, 0x06	; 6
    401c:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <HCLCD_WriteCommand4Bit>
}
    4020:	e9 96       	adiw	r28, 0x39	; 57
    4022:	0f b6       	in	r0, 0x3f	; 63
    4024:	f8 94       	cli
    4026:	de bf       	out	0x3e, r29	; 62
    4028:	0f be       	out	0x3f, r0	; 63
    402a:	cd bf       	out	0x3d, r28	; 61
    402c:	cf 91       	pop	r28
    402e:	df 91       	pop	r29
    4030:	08 95       	ret

00004032 <HCLCD_WriteChar4Bit>:

void HCLCD_WriteChar4Bit(u8 Copy_u8Data)
{
    4032:	df 93       	push	r29
    4034:	cf 93       	push	r28
    4036:	cd b7       	in	r28, 0x3d	; 61
    4038:	de b7       	in	r29, 0x3e	; 62
    403a:	6d 97       	sbiw	r28, 0x1d	; 29
    403c:	0f b6       	in	r0, 0x3f	; 63
    403e:	f8 94       	cli
    4040:	de bf       	out	0x3e, r29	; 62
    4042:	0f be       	out	0x3f, r0	; 63
    4044:	cd bf       	out	0x3d, r28	; 61
    4046:	8d 8f       	std	Y+29, r24	; 0x1d
	//Set RW to Zero
	MDIO_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    4048:	82 e0       	ldi	r24, 0x02	; 2
    404a:	61 e0       	ldi	r22, 0x01	; 1
    404c:	40 e0       	ldi	r20, 0x00	; 0
    404e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>

	//Set RS to One
	MDIO_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	61 e0       	ldi	r22, 0x01	; 1
    4056:	41 e0       	ldi	r20, 0x01	; 1
    4058:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>

	//Set High Nibble Value of the command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT,Copy_u8Data>>4);
    405c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    405e:	98 2f       	mov	r25, r24
    4060:	92 95       	swap	r25
    4062:	9f 70       	andi	r25, 0x0F	; 15
    4064:	84 e0       	ldi	r24, 0x04	; 4
    4066:	60 e0       	ldi	r22, 0x00	; 0
    4068:	49 2f       	mov	r20, r25
    406a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_SetNibbleValue>

	//Set E to 1 then wait for 2 ms then set it to 0(sending the falling edge)
	MDIO_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    406e:	83 e0       	ldi	r24, 0x03	; 3
    4070:	61 e0       	ldi	r22, 0x01	; 1
    4072:	41 e0       	ldi	r20, 0x01	; 1
    4074:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    4078:	80 e0       	ldi	r24, 0x00	; 0
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	a0 e0       	ldi	r26, 0x00	; 0
    407e:	b0 e4       	ldi	r27, 0x40	; 64
    4080:	89 8f       	std	Y+25, r24	; 0x19
    4082:	9a 8f       	std	Y+26, r25	; 0x1a
    4084:	ab 8f       	std	Y+27, r26	; 0x1b
    4086:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4088:	69 8d       	ldd	r22, Y+25	; 0x19
    408a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    408c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    408e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4090:	20 e0       	ldi	r18, 0x00	; 0
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	4a e7       	ldi	r20, 0x7A	; 122
    4096:	55 e4       	ldi	r21, 0x45	; 69
    4098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	8d 8b       	std	Y+21, r24	; 0x15
    40a2:	9e 8b       	std	Y+22, r25	; 0x16
    40a4:	af 8b       	std	Y+23, r26	; 0x17
    40a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40a8:	6d 89       	ldd	r22, Y+21	; 0x15
    40aa:	7e 89       	ldd	r23, Y+22	; 0x16
    40ac:	8f 89       	ldd	r24, Y+23	; 0x17
    40ae:	98 8d       	ldd	r25, Y+24	; 0x18
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	40 e8       	ldi	r20, 0x80	; 128
    40b6:	5f e3       	ldi	r21, 0x3F	; 63
    40b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40bc:	88 23       	and	r24, r24
    40be:	2c f4       	brge	.+10     	; 0x40ca <HCLCD_WriteChar4Bit+0x98>
		__ticks = 1;
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	9c 8b       	std	Y+20, r25	; 0x14
    40c6:	8b 8b       	std	Y+19, r24	; 0x13
    40c8:	3f c0       	rjmp	.+126    	; 0x4148 <HCLCD_WriteChar4Bit+0x116>
	else if (__tmp > 65535)
    40ca:	6d 89       	ldd	r22, Y+21	; 0x15
    40cc:	7e 89       	ldd	r23, Y+22	; 0x16
    40ce:	8f 89       	ldd	r24, Y+23	; 0x17
    40d0:	98 8d       	ldd	r25, Y+24	; 0x18
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	3f ef       	ldi	r19, 0xFF	; 255
    40d6:	4f e7       	ldi	r20, 0x7F	; 127
    40d8:	57 e4       	ldi	r21, 0x47	; 71
    40da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40de:	18 16       	cp	r1, r24
    40e0:	4c f5       	brge	.+82     	; 0x4134 <HCLCD_WriteChar4Bit+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40e2:	69 8d       	ldd	r22, Y+25	; 0x19
    40e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40ea:	20 e0       	ldi	r18, 0x00	; 0
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	40 e2       	ldi	r20, 0x20	; 32
    40f0:	51 e4       	ldi	r21, 0x41	; 65
    40f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	bc 01       	movw	r22, r24
    40fc:	cd 01       	movw	r24, r26
    40fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4102:	dc 01       	movw	r26, r24
    4104:	cb 01       	movw	r24, r22
    4106:	9c 8b       	std	Y+20, r25	; 0x14
    4108:	8b 8b       	std	Y+19, r24	; 0x13
    410a:	0f c0       	rjmp	.+30     	; 0x412a <HCLCD_WriteChar4Bit+0xf8>
    410c:	80 e9       	ldi	r24, 0x90	; 144
    410e:	91 e0       	ldi	r25, 0x01	; 1
    4110:	9a 8b       	std	Y+18, r25	; 0x12
    4112:	89 8b       	std	Y+17, r24	; 0x11
    4114:	89 89       	ldd	r24, Y+17	; 0x11
    4116:	9a 89       	ldd	r25, Y+18	; 0x12
    4118:	01 97       	sbiw	r24, 0x01	; 1
    411a:	f1 f7       	brne	.-4      	; 0x4118 <HCLCD_WriteChar4Bit+0xe6>
    411c:	9a 8b       	std	Y+18, r25	; 0x12
    411e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4120:	8b 89       	ldd	r24, Y+19	; 0x13
    4122:	9c 89       	ldd	r25, Y+20	; 0x14
    4124:	01 97       	sbiw	r24, 0x01	; 1
    4126:	9c 8b       	std	Y+20, r25	; 0x14
    4128:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    412a:	8b 89       	ldd	r24, Y+19	; 0x13
    412c:	9c 89       	ldd	r25, Y+20	; 0x14
    412e:	00 97       	sbiw	r24, 0x00	; 0
    4130:	69 f7       	brne	.-38     	; 0x410c <HCLCD_WriteChar4Bit+0xda>
    4132:	14 c0       	rjmp	.+40     	; 0x415c <HCLCD_WriteChar4Bit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4134:	6d 89       	ldd	r22, Y+21	; 0x15
    4136:	7e 89       	ldd	r23, Y+22	; 0x16
    4138:	8f 89       	ldd	r24, Y+23	; 0x17
    413a:	98 8d       	ldd	r25, Y+24	; 0x18
    413c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	9c 8b       	std	Y+20, r25	; 0x14
    4146:	8b 8b       	std	Y+19, r24	; 0x13
    4148:	8b 89       	ldd	r24, Y+19	; 0x13
    414a:	9c 89       	ldd	r25, Y+20	; 0x14
    414c:	98 8b       	std	Y+16, r25	; 0x10
    414e:	8f 87       	std	Y+15, r24	; 0x0f
    4150:	8f 85       	ldd	r24, Y+15	; 0x0f
    4152:	98 89       	ldd	r25, Y+16	; 0x10
    4154:	01 97       	sbiw	r24, 0x01	; 1
    4156:	f1 f7       	brne	.-4      	; 0x4154 <HCLCD_WriteChar4Bit+0x122>
    4158:	98 8b       	std	Y+16, r25	; 0x10
    415a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    415c:	83 e0       	ldi	r24, 0x03	; 3
    415e:	61 e0       	ldi	r22, 0x01	; 1
    4160:	40 e0       	ldi	r20, 0x00	; 0
    4162:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>

	//Set Low Nibble Value of the command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT,Copy_u8Data);
    4166:	84 e0       	ldi	r24, 0x04	; 4
    4168:	60 e0       	ldi	r22, 0x00	; 0
    416a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    416c:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <MDIO_SetNibbleValue>

	//Set E to 1 then wait for 2 ms then set it to 0(sending the falling edge)
	MDIO_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    4170:	83 e0       	ldi	r24, 0x03	; 3
    4172:	61 e0       	ldi	r22, 0x01	; 1
    4174:	41 e0       	ldi	r20, 0x01	; 1
    4176:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
    417a:	80 e0       	ldi	r24, 0x00	; 0
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	a0 e0       	ldi	r26, 0x00	; 0
    4180:	b0 e4       	ldi	r27, 0x40	; 64
    4182:	8b 87       	std	Y+11, r24	; 0x0b
    4184:	9c 87       	std	Y+12, r25	; 0x0c
    4186:	ad 87       	std	Y+13, r26	; 0x0d
    4188:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    418a:	6b 85       	ldd	r22, Y+11	; 0x0b
    418c:	7c 85       	ldd	r23, Y+12	; 0x0c
    418e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4190:	9e 85       	ldd	r25, Y+14	; 0x0e
    4192:	20 e0       	ldi	r18, 0x00	; 0
    4194:	30 e0       	ldi	r19, 0x00	; 0
    4196:	4a e7       	ldi	r20, 0x7A	; 122
    4198:	55 e4       	ldi	r21, 0x45	; 69
    419a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419e:	dc 01       	movw	r26, r24
    41a0:	cb 01       	movw	r24, r22
    41a2:	8f 83       	std	Y+7, r24	; 0x07
    41a4:	98 87       	std	Y+8, r25	; 0x08
    41a6:	a9 87       	std	Y+9, r26	; 0x09
    41a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41aa:	6f 81       	ldd	r22, Y+7	; 0x07
    41ac:	78 85       	ldd	r23, Y+8	; 0x08
    41ae:	89 85       	ldd	r24, Y+9	; 0x09
    41b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	40 e8       	ldi	r20, 0x80	; 128
    41b8:	5f e3       	ldi	r21, 0x3F	; 63
    41ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41be:	88 23       	and	r24, r24
    41c0:	2c f4       	brge	.+10     	; 0x41cc <HCLCD_WriteChar4Bit+0x19a>
		__ticks = 1;
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	9e 83       	std	Y+6, r25	; 0x06
    41c8:	8d 83       	std	Y+5, r24	; 0x05
    41ca:	3f c0       	rjmp	.+126    	; 0x424a <HCLCD_WriteChar4Bit+0x218>
	else if (__tmp > 65535)
    41cc:	6f 81       	ldd	r22, Y+7	; 0x07
    41ce:	78 85       	ldd	r23, Y+8	; 0x08
    41d0:	89 85       	ldd	r24, Y+9	; 0x09
    41d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	3f ef       	ldi	r19, 0xFF	; 255
    41d8:	4f e7       	ldi	r20, 0x7F	; 127
    41da:	57 e4       	ldi	r21, 0x47	; 71
    41dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41e0:	18 16       	cp	r1, r24
    41e2:	4c f5       	brge	.+82     	; 0x4236 <HCLCD_WriteChar4Bit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    41e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    41e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	40 e2       	ldi	r20, 0x20	; 32
    41f2:	51 e4       	ldi	r21, 0x41	; 65
    41f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	bc 01       	movw	r22, r24
    41fe:	cd 01       	movw	r24, r26
    4200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4204:	dc 01       	movw	r26, r24
    4206:	cb 01       	movw	r24, r22
    4208:	9e 83       	std	Y+6, r25	; 0x06
    420a:	8d 83       	std	Y+5, r24	; 0x05
    420c:	0f c0       	rjmp	.+30     	; 0x422c <HCLCD_WriteChar4Bit+0x1fa>
    420e:	80 e9       	ldi	r24, 0x90	; 144
    4210:	91 e0       	ldi	r25, 0x01	; 1
    4212:	9c 83       	std	Y+4, r25	; 0x04
    4214:	8b 83       	std	Y+3, r24	; 0x03
    4216:	8b 81       	ldd	r24, Y+3	; 0x03
    4218:	9c 81       	ldd	r25, Y+4	; 0x04
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	f1 f7       	brne	.-4      	; 0x421a <HCLCD_WriteChar4Bit+0x1e8>
    421e:	9c 83       	std	Y+4, r25	; 0x04
    4220:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4222:	8d 81       	ldd	r24, Y+5	; 0x05
    4224:	9e 81       	ldd	r25, Y+6	; 0x06
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	9e 83       	std	Y+6, r25	; 0x06
    422a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    422c:	8d 81       	ldd	r24, Y+5	; 0x05
    422e:	9e 81       	ldd	r25, Y+6	; 0x06
    4230:	00 97       	sbiw	r24, 0x00	; 0
    4232:	69 f7       	brne	.-38     	; 0x420e <HCLCD_WriteChar4Bit+0x1dc>
    4234:	14 c0       	rjmp	.+40     	; 0x425e <HCLCD_WriteChar4Bit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4236:	6f 81       	ldd	r22, Y+7	; 0x07
    4238:	78 85       	ldd	r23, Y+8	; 0x08
    423a:	89 85       	ldd	r24, Y+9	; 0x09
    423c:	9a 85       	ldd	r25, Y+10	; 0x0a
    423e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4242:	dc 01       	movw	r26, r24
    4244:	cb 01       	movw	r24, r22
    4246:	9e 83       	std	Y+6, r25	; 0x06
    4248:	8d 83       	std	Y+5, r24	; 0x05
    424a:	8d 81       	ldd	r24, Y+5	; 0x05
    424c:	9e 81       	ldd	r25, Y+6	; 0x06
    424e:	9a 83       	std	Y+2, r25	; 0x02
    4250:	89 83       	std	Y+1, r24	; 0x01
    4252:	89 81       	ldd	r24, Y+1	; 0x01
    4254:	9a 81       	ldd	r25, Y+2	; 0x02
    4256:	01 97       	sbiw	r24, 0x01	; 1
    4258:	f1 f7       	brne	.-4      	; 0x4256 <HCLCD_WriteChar4Bit+0x224>
    425a:	9a 83       	std	Y+2, r25	; 0x02
    425c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    425e:	83 e0       	ldi	r24, 0x03	; 3
    4260:	61 e0       	ldi	r22, 0x01	; 1
    4262:	40 e0       	ldi	r20, 0x00	; 0
    4264:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MDIO_SetPinValue>
}
    4268:	6d 96       	adiw	r28, 0x1d	; 29
    426a:	0f b6       	in	r0, 0x3f	; 63
    426c:	f8 94       	cli
    426e:	de bf       	out	0x3e, r29	; 62
    4270:	0f be       	out	0x3f, r0	; 63
    4272:	cd bf       	out	0x3d, r28	; 61
    4274:	cf 91       	pop	r28
    4276:	df 91       	pop	r29
    4278:	08 95       	ret

0000427a <HCLCD_SetCursorPosition>:

void HCLCD_SetCursorPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    427a:	df 93       	push	r29
    427c:	cf 93       	push	r28
    427e:	00 d0       	rcall	.+0      	; 0x4280 <HCLCD_SetCursorPosition+0x6>
    4280:	cd b7       	in	r28, 0x3d	; 61
    4282:	de b7       	in	r29, 0x3e	; 62
    4284:	89 83       	std	Y+1, r24	; 0x01
    4286:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber == HCLCD_LINE_0)||(Copy_u8LineNumber == HCLCD_LINE_1))
    4288:	89 81       	ldd	r24, Y+1	; 0x01
    428a:	88 23       	and	r24, r24
    428c:	19 f0       	breq	.+6      	; 0x4294 <HCLCD_SetCursorPosition+0x1a>
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	81 30       	cpi	r24, 0x01	; 1
    4292:	79 f4       	brne	.+30     	; 0x42b2 <HCLCD_SetCursorPosition+0x38>
	{
		if(Copy_u8PositionNumber<16)
    4294:	8a 81       	ldd	r24, Y+2	; 0x02
    4296:	80 31       	cpi	r24, 0x10	; 16
    4298:	60 f4       	brcc	.+24     	; 0x42b2 <HCLCD_SetCursorPosition+0x38>
		{
			if(Copy_u8LineNumber== HCLCD_LINE_0)
    429a:	89 81       	ldd	r24, Y+1	; 0x01
    429c:	88 23       	and	r24, r24
    429e:	29 f4       	brne	.+10     	; 0x42aa <HCLCD_SetCursorPosition+0x30>
			{
				HCLCD_WriteCommand4Bit(Copy_u8PositionNumber + HCLCD_LINE0_OFFSET);
    42a0:	8a 81       	ldd	r24, Y+2	; 0x02
    42a2:	80 58       	subi	r24, 0x80	; 128
    42a4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <HCLCD_WriteCommand4Bit>
    42a8:	04 c0       	rjmp	.+8      	; 0x42b2 <HCLCD_SetCursorPosition+0x38>
			}
			else
			{
				HCLCD_WriteCommand4Bit(Copy_u8PositionNumber + HCLCD_LINE1_OFFSET);
    42aa:	8a 81       	ldd	r24, Y+2	; 0x02
    42ac:	80 54       	subi	r24, 0x40	; 64
    42ae:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <HCLCD_WriteCommand4Bit>
	}
	else
	{
		//Wrong line chosen
	}
}
    42b2:	0f 90       	pop	r0
    42b4:	0f 90       	pop	r0
    42b6:	cf 91       	pop	r28
    42b8:	df 91       	pop	r29
    42ba:	08 95       	ret

000042bc <HCLCD_WriteString>:

void HCLCD_WriteString(u8* P_u8Data)
{
    42bc:	df 93       	push	r29
    42be:	cf 93       	push	r28
    42c0:	00 d0       	rcall	.+0      	; 0x42c2 <HCLCD_WriteString+0x6>
    42c2:	0f 92       	push	r0
    42c4:	cd b7       	in	r28, 0x3d	; 61
    42c6:	de b7       	in	r29, 0x3e	; 62
    42c8:	9b 83       	std	Y+3, r25	; 0x03
    42ca:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Counter = 0;
    42cc:	19 82       	std	Y+1, r1	; 0x01
    42ce:	0e c0       	rjmp	.+28     	; 0x42ec <HCLCD_WriteString+0x30>
	while(P_u8Data[Loc_u8Counter] != '\0')
	{
		HCLCD_WriteChar4Bit(P_u8Data[Loc_u8Counter]);
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	28 2f       	mov	r18, r24
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	8a 81       	ldd	r24, Y+2	; 0x02
    42d8:	9b 81       	ldd	r25, Y+3	; 0x03
    42da:	fc 01       	movw	r30, r24
    42dc:	e2 0f       	add	r30, r18
    42de:	f3 1f       	adc	r31, r19
    42e0:	80 81       	ld	r24, Z
    42e2:	0e 94 19 20 	call	0x4032	; 0x4032 <HCLCD_WriteChar4Bit>
		Loc_u8Counter++;
    42e6:	89 81       	ldd	r24, Y+1	; 0x01
    42e8:	8f 5f       	subi	r24, 0xFF	; 255
    42ea:	89 83       	std	Y+1, r24	; 0x01
}

void HCLCD_WriteString(u8* P_u8Data)
{
	u8 Loc_u8Counter = 0;
	while(P_u8Data[Loc_u8Counter] != '\0')
    42ec:	89 81       	ldd	r24, Y+1	; 0x01
    42ee:	28 2f       	mov	r18, r24
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	8a 81       	ldd	r24, Y+2	; 0x02
    42f4:	9b 81       	ldd	r25, Y+3	; 0x03
    42f6:	fc 01       	movw	r30, r24
    42f8:	e2 0f       	add	r30, r18
    42fa:	f3 1f       	adc	r31, r19
    42fc:	80 81       	ld	r24, Z
    42fe:	88 23       	and	r24, r24
    4300:	39 f7       	brne	.-50     	; 0x42d0 <HCLCD_WriteString+0x14>
	{
		HCLCD_WriteChar4Bit(P_u8Data[Loc_u8Counter]);
		Loc_u8Counter++;
	}
}
    4302:	0f 90       	pop	r0
    4304:	0f 90       	pop	r0
    4306:	0f 90       	pop	r0
    4308:	cf 91       	pop	r28
    430a:	df 91       	pop	r29
    430c:	08 95       	ret

0000430e <HCLCD_WriteIntegerValue>:

void HCLCD_WriteIntegerValue(u32 Copy_u32Value)
{
    430e:	0f 93       	push	r16
    4310:	1f 93       	push	r17
    4312:	df 93       	push	r29
    4314:	cf 93       	push	r28
    4316:	cd b7       	in	r28, 0x3d	; 61
    4318:	de b7       	in	r29, 0x3e	; 62
    431a:	6e 97       	sbiw	r28, 0x1e	; 30
    431c:	0f b6       	in	r0, 0x3f	; 63
    431e:	f8 94       	cli
    4320:	de bf       	out	0x3e, r29	; 62
    4322:	0f be       	out	0x3f, r0	; 63
    4324:	cd bf       	out	0x3d, r28	; 61
    4326:	6b 8f       	std	Y+27, r22	; 0x1b
    4328:	7c 8f       	std	Y+28, r23	; 0x1c
    432a:	8d 8f       	std	Y+29, r24	; 0x1d
    432c:	9e 8f       	std	Y+30, r25	; 0x1e
	if(Copy_u32Value == 0)
    432e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4330:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4332:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4334:	be 8d       	ldd	r27, Y+30	; 0x1e
    4336:	00 97       	sbiw	r24, 0x00	; 0
    4338:	a1 05       	cpc	r26, r1
    433a:	b1 05       	cpc	r27, r1
    433c:	29 f4       	brne	.+10     	; 0x4348 <HCLCD_WriteIntegerValue+0x3a>
	{
		HCLCD_WriteChar4Bit((Copy_u32Value + 48));
    433e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4340:	80 5d       	subi	r24, 0xD0	; 208
    4342:	0e 94 19 20 	call	0x4032	; 0x4032 <HCLCD_WriteChar4Bit>
    4346:	67 c0       	rjmp	.+206    	; 0x4416 <HCLCD_WriteIntegerValue+0x108>
	}
	else
	{
		u32 Loc_u8TempValue = Copy_u32Value;
    4348:	8b 8d       	ldd	r24, Y+27	; 0x1b
    434a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    434c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    434e:	be 8d       	ldd	r27, Y+30	; 0x1e
    4350:	8b 83       	std	Y+3, r24	; 0x03
    4352:	9c 83       	std	Y+4, r25	; 0x04
    4354:	ad 83       	std	Y+5, r26	; 0x05
    4356:	be 83       	std	Y+6, r27	; 0x06
		u8 Loc_u8CharArray[20] = {0},Loc_u8Count = 0, Loc_u8Index = 0;
    4358:	84 e1       	ldi	r24, 0x14	; 20
    435a:	fe 01       	movw	r30, r28
    435c:	37 96       	adiw	r30, 0x07	; 7
    435e:	df 01       	movw	r26, r30
    4360:	48 2f       	mov	r20, r24
    4362:	1d 92       	st	X+, r1
    4364:	4a 95       	dec	r20
    4366:	e9 f7       	brne	.-6      	; 0x4362 <HCLCD_WriteIntegerValue+0x54>
    4368:	1a 82       	std	Y+2, r1	; 0x02
    436a:	19 82       	std	Y+1, r1	; 0x01
    436c:	2e c0       	rjmp	.+92     	; 0x43ca <HCLCD_WriteIntegerValue+0xbc>
		while(Loc_u8TempValue != 0)
		{
			Loc_u8CharArray[Loc_u8Count] = ((Loc_u8TempValue % 10) + 48);
    436e:	8a 81       	ldd	r24, Y+2	; 0x02
    4370:	08 2f       	mov	r16, r24
    4372:	10 e0       	ldi	r17, 0x00	; 0
    4374:	8b 81       	ldd	r24, Y+3	; 0x03
    4376:	9c 81       	ldd	r25, Y+4	; 0x04
    4378:	ad 81       	ldd	r26, Y+5	; 0x05
    437a:	be 81       	ldd	r27, Y+6	; 0x06
    437c:	2a e0       	ldi	r18, 0x0A	; 10
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	40 e0       	ldi	r20, 0x00	; 0
    4382:	50 e0       	ldi	r21, 0x00	; 0
    4384:	bc 01       	movw	r22, r24
    4386:	cd 01       	movw	r24, r26
    4388:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__udivmodsi4>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	28 2f       	mov	r18, r24
    4392:	20 5d       	subi	r18, 0xD0	; 208
    4394:	ce 01       	movw	r24, r28
    4396:	07 96       	adiw	r24, 0x07	; 7
    4398:	fc 01       	movw	r30, r24
    439a:	e0 0f       	add	r30, r16
    439c:	f1 1f       	adc	r31, r17
    439e:	20 83       	st	Z, r18
			Loc_u8TempValue /= 10;
    43a0:	8b 81       	ldd	r24, Y+3	; 0x03
    43a2:	9c 81       	ldd	r25, Y+4	; 0x04
    43a4:	ad 81       	ldd	r26, Y+5	; 0x05
    43a6:	be 81       	ldd	r27, Y+6	; 0x06
    43a8:	2a e0       	ldi	r18, 0x0A	; 10
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	40 e0       	ldi	r20, 0x00	; 0
    43ae:	50 e0       	ldi	r21, 0x00	; 0
    43b0:	bc 01       	movw	r22, r24
    43b2:	cd 01       	movw	r24, r26
    43b4:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__udivmodsi4>
    43b8:	da 01       	movw	r26, r20
    43ba:	c9 01       	movw	r24, r18
    43bc:	8b 83       	std	Y+3, r24	; 0x03
    43be:	9c 83       	std	Y+4, r25	; 0x04
    43c0:	ad 83       	std	Y+5, r26	; 0x05
    43c2:	be 83       	std	Y+6, r27	; 0x06
			Loc_u8Count++;
    43c4:	8a 81       	ldd	r24, Y+2	; 0x02
    43c6:	8f 5f       	subi	r24, 0xFF	; 255
    43c8:	8a 83       	std	Y+2, r24	; 0x02
	}
	else
	{
		u32 Loc_u8TempValue = Copy_u32Value;
		u8 Loc_u8CharArray[20] = {0},Loc_u8Count = 0, Loc_u8Index = 0;
		while(Loc_u8TempValue != 0)
    43ca:	8b 81       	ldd	r24, Y+3	; 0x03
    43cc:	9c 81       	ldd	r25, Y+4	; 0x04
    43ce:	ad 81       	ldd	r26, Y+5	; 0x05
    43d0:	be 81       	ldd	r27, Y+6	; 0x06
    43d2:	00 97       	sbiw	r24, 0x00	; 0
    43d4:	a1 05       	cpc	r26, r1
    43d6:	b1 05       	cpc	r27, r1
    43d8:	51 f6       	brne	.-108    	; 0x436e <HCLCD_WriteIntegerValue+0x60>
			Loc_u8CharArray[Loc_u8Count] = ((Loc_u8TempValue % 10) + 48);
			Loc_u8TempValue /= 10;
			Loc_u8Count++;
		}

		for(Loc_u8Index = 0; Loc_u8Index < Loc_u8Count; Loc_u8Index++)
    43da:	19 82       	std	Y+1, r1	; 0x01
    43dc:	18 c0       	rjmp	.+48     	; 0x440e <HCLCD_WriteIntegerValue+0x100>
		{
			HCLCD_WriteChar4Bit(Loc_u8CharArray[Loc_u8Count - Loc_u8Index - 1]);
    43de:	8a 81       	ldd	r24, Y+2	; 0x02
    43e0:	28 2f       	mov	r18, r24
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	89 81       	ldd	r24, Y+1	; 0x01
    43e6:	88 2f       	mov	r24, r24
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	d9 01       	movw	r26, r18
    43ec:	a8 1b       	sub	r26, r24
    43ee:	b9 0b       	sbc	r27, r25
    43f0:	cd 01       	movw	r24, r26
    43f2:	9c 01       	movw	r18, r24
    43f4:	21 50       	subi	r18, 0x01	; 1
    43f6:	30 40       	sbci	r19, 0x00	; 0
    43f8:	ce 01       	movw	r24, r28
    43fa:	07 96       	adiw	r24, 0x07	; 7
    43fc:	fc 01       	movw	r30, r24
    43fe:	e2 0f       	add	r30, r18
    4400:	f3 1f       	adc	r31, r19
    4402:	80 81       	ld	r24, Z
    4404:	0e 94 19 20 	call	0x4032	; 0x4032 <HCLCD_WriteChar4Bit>
			Loc_u8CharArray[Loc_u8Count] = ((Loc_u8TempValue % 10) + 48);
			Loc_u8TempValue /= 10;
			Loc_u8Count++;
		}

		for(Loc_u8Index = 0; Loc_u8Index < Loc_u8Count; Loc_u8Index++)
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	8f 5f       	subi	r24, 0xFF	; 255
    440c:	89 83       	std	Y+1, r24	; 0x01
    440e:	99 81       	ldd	r25, Y+1	; 0x01
    4410:	8a 81       	ldd	r24, Y+2	; 0x02
    4412:	98 17       	cp	r25, r24
    4414:	20 f3       	brcs	.-56     	; 0x43de <HCLCD_WriteIntegerValue+0xd0>
		{
			HCLCD_WriteChar4Bit(Loc_u8CharArray[Loc_u8Count - Loc_u8Index - 1]);
		}
	}
}
    4416:	6e 96       	adiw	r28, 0x1e	; 30
    4418:	0f b6       	in	r0, 0x3f	; 63
    441a:	f8 94       	cli
    441c:	de bf       	out	0x3e, r29	; 62
    441e:	0f be       	out	0x3f, r0	; 63
    4420:	cd bf       	out	0x3d, r28	; 61
    4422:	cf 91       	pop	r28
    4424:	df 91       	pop	r29
    4426:	1f 91       	pop	r17
    4428:	0f 91       	pop	r16
    442a:	08 95       	ret

0000442c <EEPROM_WriteByte>:
#include "../../MCAL/MDIO/MDIO_Interface.h"
#include "../../MCAL/MTWI/MTWI_Interface.h"


void EEPROM_WriteByte(u8 Copy_u8BlockNo, u8 Copy_u8ByteAddress, u8 Copy_u8Data )
{
    442c:	df 93       	push	r29
    442e:	cf 93       	push	r28
    4430:	00 d0       	rcall	.+0      	; 0x4432 <EEPROM_WriteByte+0x6>
    4432:	00 d0       	rcall	.+0      	; 0x4434 <EEPROM_WriteByte+0x8>
    4434:	cd b7       	in	r28, 0x3d	; 61
    4436:	de b7       	in	r29, 0x3e	; 62
    4438:	8a 83       	std	Y+2, r24	; 0x02
    443a:	6b 83       	std	Y+3, r22	; 0x03
    443c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8SlaveAdd;
	/*Send Start Condition*/
	MTWI_SendStartCondition();
    443e:	0e 94 ac 07 	call	0xf58	; 0xf58 <MTWI_SendStartCondition>

	/*Send SLA+W
	 * SLA = 1010 XXX 0 ===> for write
	 * xxx = Copy_u8BlockNo*/
	Loc_u8SlaveAdd = EEPROM_FIXED_SLAVE_ADDRESS|(Copy_u8BlockNo);
    4442:	8a 81       	ldd	r24, Y+2	; 0x02
    4444:	80 65       	ori	r24, 0x50	; 80
    4446:	89 83       	std	Y+1, r24	; 0x01

	MTWI_SendSlaveAddress_WithWrite(Loc_u8SlaveAdd);
    4448:	89 81       	ldd	r24, Y+1	; 0x01
    444a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <MTWI_SendSlaveAddress_WithWrite>

	/*Send the remainder Byte address as a data byte*/
	MTWI_MasterSlaveWriteData(Copy_u8ByteAddress);
    444e:	8b 81       	ldd	r24, Y+3	; 0x03
    4450:	0e 94 4a 08 	call	0x1094	; 0x1094 <MTWI_MasterSlaveWriteData>

	/*Send the real data needed to be saved at the previous Address*/
	MTWI_MasterSlaveWriteData(Copy_u8Data);
    4454:	8c 81       	ldd	r24, Y+4	; 0x04
    4456:	0e 94 4a 08 	call	0x1094	; 0x1094 <MTWI_MasterSlaveWriteData>

	/*Send Stop Condition*/
	MTWI_SendStopCondtition();
    445a:	0e 94 a5 08 	call	0x114a	; 0x114a <MTWI_SendStopCondtition>
}
    445e:	0f 90       	pop	r0
    4460:	0f 90       	pop	r0
    4462:	0f 90       	pop	r0
    4464:	0f 90       	pop	r0
    4466:	cf 91       	pop	r28
    4468:	df 91       	pop	r29
    446a:	08 95       	ret

0000446c <EEPROM_ReadByte>:


u8 EEPROM_ReadByte(u8 Copy_u8BlockNo, u8 Copy_u8ByteAddress)
{
    446c:	df 93       	push	r29
    446e:	cf 93       	push	r28
    4470:	00 d0       	rcall	.+0      	; 0x4472 <EEPROM_ReadByte+0x6>
    4472:	00 d0       	rcall	.+0      	; 0x4474 <EEPROM_ReadByte+0x8>
    4474:	cd b7       	in	r28, 0x3d	; 61
    4476:	de b7       	in	r29, 0x3e	; 62
    4478:	8b 83       	std	Y+3, r24	; 0x03
    447a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc_u8ReturnedValue;
	u8 Loc_u8SlaveAdd;
	/*Send Start Condition*/
	MTWI_SendStartCondition();
    447c:	0e 94 ac 07 	call	0xf58	; 0xf58 <MTWI_SendStartCondition>

	/*Send SLA+W
	 * SLA = 1010 XXX 0 ===> for write
	 * xxx = Copy_u8BlockNo*/
	Loc_u8SlaveAdd = EEPROM_FIXED_SLAVE_ADDRESS|(Copy_u8BlockNo);
    4480:	8b 81       	ldd	r24, Y+3	; 0x03
    4482:	80 65       	ori	r24, 0x50	; 80
    4484:	89 83       	std	Y+1, r24	; 0x01

	MTWI_SendSlaveAddress_WithWrite(Loc_u8SlaveAdd);
    4486:	89 81       	ldd	r24, Y+1	; 0x01
    4488:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <MTWI_SendSlaveAddress_WithWrite>

	/*Send the remainder Byte address as a data byte*/
	MTWI_MasterSlaveWriteData(Copy_u8ByteAddress);
    448c:	8c 81       	ldd	r24, Y+4	; 0x04
    448e:	0e 94 4a 08 	call	0x1094	; 0x1094 <MTWI_MasterSlaveWriteData>

	/*Send Repeated Start*/
	MTWI_SendStartCondition();
    4492:	0e 94 ac 07 	call	0xf58	; 0xf58 <MTWI_SendStartCondition>

	/*Send Slave Address with Read*/
	/*Same Slave Address Adjusted before
	 * But with changing the LSB from 0 ==> 1
	 * to signal read request*/
	Loc_u8SlaveAdd|=0x01;
    4496:	89 81       	ldd	r24, Y+1	; 0x01
    4498:	81 60       	ori	r24, 0x01	; 1
    449a:	89 83       	std	Y+1, r24	; 0x01

	/*Read Data*/
	MTWI_MasterSlaveReadData(&Loc_u8ReturnedValue);
    449c:	ce 01       	movw	r24, r28
    449e:	02 96       	adiw	r24, 0x02	; 2
    44a0:	0e 94 75 08 	call	0x10ea	; 0x10ea <MTWI_MasterSlaveReadData>

	/*Send Stop Condition*/
	MTWI_SendStopCondtition();
    44a4:	0e 94 a5 08 	call	0x114a	; 0x114a <MTWI_SendStopCondtition>

	return Loc_u8ReturnedValue;
    44a8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    44aa:	0f 90       	pop	r0
    44ac:	0f 90       	pop	r0
    44ae:	0f 90       	pop	r0
    44b0:	0f 90       	pop	r0
    44b2:	cf 91       	pop	r28
    44b4:	df 91       	pop	r29
    44b6:	08 95       	ret

000044b8 <main>:
#include "HAL/HSERVO/HSERVO_Interface.h"


//extern u16 GLOB_On_Time;
int main()
{
    44b8:	df 93       	push	r29
    44ba:	cf 93       	push	r28
    44bc:	cd b7       	in	r28, 0x3d	; 61
    44be:	de b7       	in	r29, 0x3e	; 62
    44c0:	6c 97       	sbiw	r28, 0x1c	; 28
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	f8 94       	cli
    44c6:	de bf       	out	0x3e, r29	; 62
    44c8:	0f be       	out	0x3f, r0	; 63
    44ca:	cd bf       	out	0x3d, r28	; 61
	MGIE_Enable();
    44cc:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MGIE_Enable>
	US_INIT();
    44d0:	0e 94 86 11 	call	0x230c	; 0x230c <US_INIT>
	HCLCD_Init4Bit();
    44d4:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <HCLCD_Init4Bit>
	HSERVO_Init();
    44d8:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <HSERVO_Init>
	HDCM_Init();
    44dc:	0e 94 56 19 	call	0x32ac	; 0x32ac <HDCM_Init>
	HDCM_Forward();
    44e0:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <HDCM_Forward>
	HCLCD_WriteString("Dir: Forward");
    44e4:	80 e6       	ldi	r24, 0x60	; 96
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	0e 94 5e 21 	call	0x42bc	; 0x42bc <HCLCD_WriteString>
	HSERVO_Rotate_Middle();
    44ec:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <HSERVO_Rotate_Middle>
    44f0:	80 e0       	ldi	r24, 0x00	; 0
    44f2:	90 e8       	ldi	r25, 0x80	; 128
    44f4:	ab e3       	ldi	r26, 0x3B	; 59
    44f6:	b5 e4       	ldi	r27, 0x45	; 69
    44f8:	89 8f       	std	Y+25, r24	; 0x19
    44fa:	9a 8f       	std	Y+26, r25	; 0x1a
    44fc:	ab 8f       	std	Y+27, r26	; 0x1b
    44fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4500:	69 8d       	ldd	r22, Y+25	; 0x19
    4502:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4504:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4506:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4508:	20 e0       	ldi	r18, 0x00	; 0
    450a:	30 e0       	ldi	r19, 0x00	; 0
    450c:	4a e7       	ldi	r20, 0x7A	; 122
    450e:	55 e4       	ldi	r21, 0x45	; 69
    4510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4514:	dc 01       	movw	r26, r24
    4516:	cb 01       	movw	r24, r22
    4518:	8d 8b       	std	Y+21, r24	; 0x15
    451a:	9e 8b       	std	Y+22, r25	; 0x16
    451c:	af 8b       	std	Y+23, r26	; 0x17
    451e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4520:	6d 89       	ldd	r22, Y+21	; 0x15
    4522:	7e 89       	ldd	r23, Y+22	; 0x16
    4524:	8f 89       	ldd	r24, Y+23	; 0x17
    4526:	98 8d       	ldd	r25, Y+24	; 0x18
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	30 e0       	ldi	r19, 0x00	; 0
    452c:	40 e8       	ldi	r20, 0x80	; 128
    452e:	5f e3       	ldi	r21, 0x3F	; 63
    4530:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4534:	88 23       	and	r24, r24
    4536:	2c f4       	brge	.+10     	; 0x4542 <main+0x8a>
		__ticks = 1;
    4538:	81 e0       	ldi	r24, 0x01	; 1
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	9c 8b       	std	Y+20, r25	; 0x14
    453e:	8b 8b       	std	Y+19, r24	; 0x13
    4540:	3f c0       	rjmp	.+126    	; 0x45c0 <main+0x108>
	else if (__tmp > 65535)
    4542:	6d 89       	ldd	r22, Y+21	; 0x15
    4544:	7e 89       	ldd	r23, Y+22	; 0x16
    4546:	8f 89       	ldd	r24, Y+23	; 0x17
    4548:	98 8d       	ldd	r25, Y+24	; 0x18
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	3f ef       	ldi	r19, 0xFF	; 255
    454e:	4f e7       	ldi	r20, 0x7F	; 127
    4550:	57 e4       	ldi	r21, 0x47	; 71
    4552:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4556:	18 16       	cp	r1, r24
    4558:	4c f5       	brge	.+82     	; 0x45ac <main+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    455a:	69 8d       	ldd	r22, Y+25	; 0x19
    455c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    455e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4560:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	40 e2       	ldi	r20, 0x20	; 32
    4568:	51 e4       	ldi	r21, 0x41	; 65
    456a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    456e:	dc 01       	movw	r26, r24
    4570:	cb 01       	movw	r24, r22
    4572:	bc 01       	movw	r22, r24
    4574:	cd 01       	movw	r24, r26
    4576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    457a:	dc 01       	movw	r26, r24
    457c:	cb 01       	movw	r24, r22
    457e:	9c 8b       	std	Y+20, r25	; 0x14
    4580:	8b 8b       	std	Y+19, r24	; 0x13
    4582:	0f c0       	rjmp	.+30     	; 0x45a2 <main+0xea>
    4584:	80 e9       	ldi	r24, 0x90	; 144
    4586:	91 e0       	ldi	r25, 0x01	; 1
    4588:	9a 8b       	std	Y+18, r25	; 0x12
    458a:	89 8b       	std	Y+17, r24	; 0x11
    458c:	89 89       	ldd	r24, Y+17	; 0x11
    458e:	9a 89       	ldd	r25, Y+18	; 0x12
    4590:	01 97       	sbiw	r24, 0x01	; 1
    4592:	f1 f7       	brne	.-4      	; 0x4590 <main+0xd8>
    4594:	9a 8b       	std	Y+18, r25	; 0x12
    4596:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4598:	8b 89       	ldd	r24, Y+19	; 0x13
    459a:	9c 89       	ldd	r25, Y+20	; 0x14
    459c:	01 97       	sbiw	r24, 0x01	; 1
    459e:	9c 8b       	std	Y+20, r25	; 0x14
    45a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45a2:	8b 89       	ldd	r24, Y+19	; 0x13
    45a4:	9c 89       	ldd	r25, Y+20	; 0x14
    45a6:	00 97       	sbiw	r24, 0x00	; 0
    45a8:	69 f7       	brne	.-38     	; 0x4584 <main+0xcc>
    45aa:	14 c0       	rjmp	.+40     	; 0x45d4 <main+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ac:	6d 89       	ldd	r22, Y+21	; 0x15
    45ae:	7e 89       	ldd	r23, Y+22	; 0x16
    45b0:	8f 89       	ldd	r24, Y+23	; 0x17
    45b2:	98 8d       	ldd	r25, Y+24	; 0x18
    45b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45b8:	dc 01       	movw	r26, r24
    45ba:	cb 01       	movw	r24, r22
    45bc:	9c 8b       	std	Y+20, r25	; 0x14
    45be:	8b 8b       	std	Y+19, r24	; 0x13
    45c0:	8b 89       	ldd	r24, Y+19	; 0x13
    45c2:	9c 89       	ldd	r25, Y+20	; 0x14
    45c4:	98 8b       	std	Y+16, r25	; 0x10
    45c6:	8f 87       	std	Y+15, r24	; 0x0f
    45c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    45ca:	98 89       	ldd	r25, Y+16	; 0x10
    45cc:	01 97       	sbiw	r24, 0x01	; 1
    45ce:	f1 f7       	brne	.-4      	; 0x45cc <main+0x114>
    45d0:	98 8b       	std	Y+16, r25	; 0x10
    45d2:	8f 87       	std	Y+15, r24	; 0x0f
	//HCLCD_WriteCommand4Bit(0b00000001);
	//HCLCD_WriteIntegerValue(GLOB_On_Time);
	_delay_ms(3000);
	while(1)
	{
		HDCM_Stop();
    45d4:	0e 94 c9 19 	call	0x3392	; 0x3392 <HDCM_Stop>
    45d8:	80 e0       	ldi	r24, 0x00	; 0
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	aa ef       	ldi	r26, 0xFA	; 250
    45de:	b4 e4       	ldi	r27, 0x44	; 68
    45e0:	8b 87       	std	Y+11, r24	; 0x0b
    45e2:	9c 87       	std	Y+12, r25	; 0x0c
    45e4:	ad 87       	std	Y+13, r26	; 0x0d
    45e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    45ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    45ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	4a e7       	ldi	r20, 0x7A	; 122
    45f6:	55 e4       	ldi	r21, 0x45	; 69
    45f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	8f 83       	std	Y+7, r24	; 0x07
    4602:	98 87       	std	Y+8, r25	; 0x08
    4604:	a9 87       	std	Y+9, r26	; 0x09
    4606:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4608:	6f 81       	ldd	r22, Y+7	; 0x07
    460a:	78 85       	ldd	r23, Y+8	; 0x08
    460c:	89 85       	ldd	r24, Y+9	; 0x09
    460e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	40 e8       	ldi	r20, 0x80	; 128
    4616:	5f e3       	ldi	r21, 0x3F	; 63
    4618:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    461c:	88 23       	and	r24, r24
    461e:	2c f4       	brge	.+10     	; 0x462a <main+0x172>
		__ticks = 1;
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	9e 83       	std	Y+6, r25	; 0x06
    4626:	8d 83       	std	Y+5, r24	; 0x05
    4628:	3f c0       	rjmp	.+126    	; 0x46a8 <main+0x1f0>
	else if (__tmp > 65535)
    462a:	6f 81       	ldd	r22, Y+7	; 0x07
    462c:	78 85       	ldd	r23, Y+8	; 0x08
    462e:	89 85       	ldd	r24, Y+9	; 0x09
    4630:	9a 85       	ldd	r25, Y+10	; 0x0a
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	3f ef       	ldi	r19, 0xFF	; 255
    4636:	4f e7       	ldi	r20, 0x7F	; 127
    4638:	57 e4       	ldi	r21, 0x47	; 71
    463a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    463e:	18 16       	cp	r1, r24
    4640:	4c f5       	brge	.+82     	; 0x4694 <main+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4642:	6b 85       	ldd	r22, Y+11	; 0x0b
    4644:	7c 85       	ldd	r23, Y+12	; 0x0c
    4646:	8d 85       	ldd	r24, Y+13	; 0x0d
    4648:	9e 85       	ldd	r25, Y+14	; 0x0e
    464a:	20 e0       	ldi	r18, 0x00	; 0
    464c:	30 e0       	ldi	r19, 0x00	; 0
    464e:	40 e2       	ldi	r20, 0x20	; 32
    4650:	51 e4       	ldi	r21, 0x41	; 65
    4652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4656:	dc 01       	movw	r26, r24
    4658:	cb 01       	movw	r24, r22
    465a:	bc 01       	movw	r22, r24
    465c:	cd 01       	movw	r24, r26
    465e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4662:	dc 01       	movw	r26, r24
    4664:	cb 01       	movw	r24, r22
    4666:	9e 83       	std	Y+6, r25	; 0x06
    4668:	8d 83       	std	Y+5, r24	; 0x05
    466a:	0f c0       	rjmp	.+30     	; 0x468a <main+0x1d2>
    466c:	80 e9       	ldi	r24, 0x90	; 144
    466e:	91 e0       	ldi	r25, 0x01	; 1
    4670:	9c 83       	std	Y+4, r25	; 0x04
    4672:	8b 83       	std	Y+3, r24	; 0x03
    4674:	8b 81       	ldd	r24, Y+3	; 0x03
    4676:	9c 81       	ldd	r25, Y+4	; 0x04
    4678:	01 97       	sbiw	r24, 0x01	; 1
    467a:	f1 f7       	brne	.-4      	; 0x4678 <main+0x1c0>
    467c:	9c 83       	std	Y+4, r25	; 0x04
    467e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4680:	8d 81       	ldd	r24, Y+5	; 0x05
    4682:	9e 81       	ldd	r25, Y+6	; 0x06
    4684:	01 97       	sbiw	r24, 0x01	; 1
    4686:	9e 83       	std	Y+6, r25	; 0x06
    4688:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    468a:	8d 81       	ldd	r24, Y+5	; 0x05
    468c:	9e 81       	ldd	r25, Y+6	; 0x06
    468e:	00 97       	sbiw	r24, 0x00	; 0
    4690:	69 f7       	brne	.-38     	; 0x466c <main+0x1b4>
    4692:	14 c0       	rjmp	.+40     	; 0x46bc <main+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4694:	6f 81       	ldd	r22, Y+7	; 0x07
    4696:	78 85       	ldd	r23, Y+8	; 0x08
    4698:	89 85       	ldd	r24, Y+9	; 0x09
    469a:	9a 85       	ldd	r25, Y+10	; 0x0a
    469c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	9e 83       	std	Y+6, r25	; 0x06
    46a6:	8d 83       	std	Y+5, r24	; 0x05
    46a8:	8d 81       	ldd	r24, Y+5	; 0x05
    46aa:	9e 81       	ldd	r25, Y+6	; 0x06
    46ac:	9a 83       	std	Y+2, r25	; 0x02
    46ae:	89 83       	std	Y+1, r24	; 0x01
    46b0:	89 81       	ldd	r24, Y+1	; 0x01
    46b2:	9a 81       	ldd	r25, Y+2	; 0x02
    46b4:	01 97       	sbiw	r24, 0x01	; 1
    46b6:	f1 f7       	brne	.-4      	; 0x46b4 <main+0x1fc>
    46b8:	9a 83       	std	Y+2, r25	; 0x02
    46ba:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		HDCM_Back();
    46bc:	0e 94 ef 19 	call	0x33de	; 0x33de <HDCM_Back>
    46c0:	89 cf       	rjmp	.-238    	; 0x45d4 <main+0x11c>

000046c2 <__udivmodsi4>:
    46c2:	a1 e2       	ldi	r26, 0x21	; 33
    46c4:	1a 2e       	mov	r1, r26
    46c6:	aa 1b       	sub	r26, r26
    46c8:	bb 1b       	sub	r27, r27
    46ca:	fd 01       	movw	r30, r26
    46cc:	0d c0       	rjmp	.+26     	; 0x46e8 <__udivmodsi4_ep>

000046ce <__udivmodsi4_loop>:
    46ce:	aa 1f       	adc	r26, r26
    46d0:	bb 1f       	adc	r27, r27
    46d2:	ee 1f       	adc	r30, r30
    46d4:	ff 1f       	adc	r31, r31
    46d6:	a2 17       	cp	r26, r18
    46d8:	b3 07       	cpc	r27, r19
    46da:	e4 07       	cpc	r30, r20
    46dc:	f5 07       	cpc	r31, r21
    46de:	20 f0       	brcs	.+8      	; 0x46e8 <__udivmodsi4_ep>
    46e0:	a2 1b       	sub	r26, r18
    46e2:	b3 0b       	sbc	r27, r19
    46e4:	e4 0b       	sbc	r30, r20
    46e6:	f5 0b       	sbc	r31, r21

000046e8 <__udivmodsi4_ep>:
    46e8:	66 1f       	adc	r22, r22
    46ea:	77 1f       	adc	r23, r23
    46ec:	88 1f       	adc	r24, r24
    46ee:	99 1f       	adc	r25, r25
    46f0:	1a 94       	dec	r1
    46f2:	69 f7       	brne	.-38     	; 0x46ce <__udivmodsi4_loop>
    46f4:	60 95       	com	r22
    46f6:	70 95       	com	r23
    46f8:	80 95       	com	r24
    46fa:	90 95       	com	r25
    46fc:	9b 01       	movw	r18, r22
    46fe:	ac 01       	movw	r20, r24
    4700:	bd 01       	movw	r22, r26
    4702:	cf 01       	movw	r24, r30
    4704:	08 95       	ret

00004706 <__prologue_saves__>:
    4706:	2f 92       	push	r2
    4708:	3f 92       	push	r3
    470a:	4f 92       	push	r4
    470c:	5f 92       	push	r5
    470e:	6f 92       	push	r6
    4710:	7f 92       	push	r7
    4712:	8f 92       	push	r8
    4714:	9f 92       	push	r9
    4716:	af 92       	push	r10
    4718:	bf 92       	push	r11
    471a:	cf 92       	push	r12
    471c:	df 92       	push	r13
    471e:	ef 92       	push	r14
    4720:	ff 92       	push	r15
    4722:	0f 93       	push	r16
    4724:	1f 93       	push	r17
    4726:	cf 93       	push	r28
    4728:	df 93       	push	r29
    472a:	cd b7       	in	r28, 0x3d	; 61
    472c:	de b7       	in	r29, 0x3e	; 62
    472e:	ca 1b       	sub	r28, r26
    4730:	db 0b       	sbc	r29, r27
    4732:	0f b6       	in	r0, 0x3f	; 63
    4734:	f8 94       	cli
    4736:	de bf       	out	0x3e, r29	; 62
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	cd bf       	out	0x3d, r28	; 61
    473c:	09 94       	ijmp

0000473e <__epilogue_restores__>:
    473e:	2a 88       	ldd	r2, Y+18	; 0x12
    4740:	39 88       	ldd	r3, Y+17	; 0x11
    4742:	48 88       	ldd	r4, Y+16	; 0x10
    4744:	5f 84       	ldd	r5, Y+15	; 0x0f
    4746:	6e 84       	ldd	r6, Y+14	; 0x0e
    4748:	7d 84       	ldd	r7, Y+13	; 0x0d
    474a:	8c 84       	ldd	r8, Y+12	; 0x0c
    474c:	9b 84       	ldd	r9, Y+11	; 0x0b
    474e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4750:	b9 84       	ldd	r11, Y+9	; 0x09
    4752:	c8 84       	ldd	r12, Y+8	; 0x08
    4754:	df 80       	ldd	r13, Y+7	; 0x07
    4756:	ee 80       	ldd	r14, Y+6	; 0x06
    4758:	fd 80       	ldd	r15, Y+5	; 0x05
    475a:	0c 81       	ldd	r16, Y+4	; 0x04
    475c:	1b 81       	ldd	r17, Y+3	; 0x03
    475e:	aa 81       	ldd	r26, Y+2	; 0x02
    4760:	b9 81       	ldd	r27, Y+1	; 0x01
    4762:	ce 0f       	add	r28, r30
    4764:	d1 1d       	adc	r29, r1
    4766:	0f b6       	in	r0, 0x3f	; 63
    4768:	f8 94       	cli
    476a:	de bf       	out	0x3e, r29	; 62
    476c:	0f be       	out	0x3f, r0	; 63
    476e:	cd bf       	out	0x3d, r28	; 61
    4770:	ed 01       	movw	r28, r26
    4772:	08 95       	ret

00004774 <_exit>:
    4774:	f8 94       	cli

00004776 <__stop_program>:
    4776:	ff cf       	rjmp	.-2      	; 0x4776 <__stop_program>
